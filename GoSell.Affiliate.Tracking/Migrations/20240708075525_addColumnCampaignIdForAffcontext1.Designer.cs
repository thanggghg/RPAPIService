// <auto-generated />
using System;
using GoSell.Affiliate.Tracking.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoSell.Affiliate.Tracking.Migrations
{
    [DbContext(typeof(AffiliateContext))]
    [Migration("20240708075525_addColumnCampaignIdForAffcontext1")]
    partial class addColumnCampaignIdForAffcontext1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("affiliate_business_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_campaign_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_campaign_product_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_category_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_click_tracking_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_collection_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_color_default_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_commission_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_link_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_mapping_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_order_detail_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_order_tracking_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_partner_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_product_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_store_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_submission_id_seq", "affiliate-tracking-services");

            modelBuilder.HasSequence("affiliate_theme_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_tracking_management_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_transaction_detail_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.HasSequence("affiliate_transaction_id_seq", "affiliate-tracking-services")
                .HasMin(1L)
                .HasMax(9223372036854775807L);

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateBusiness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_business_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_business_id_seq", "affiliate-tracking-services");

                    b.Property<string>("CoverImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_image_path");

                    b.Property<string>("LanguageKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_key");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ThumbnailImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_image_path");

                    b.HasKey("Id");

                    b.ToTable("affiliate_business", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_category_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_category_id_seq", "affiliate-tracking-services");

                    b.Property<long>("AffiliateStoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_store_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("category_name");

                    b.Property<string>("RefCategoryId")
                        .HasColumnType("text")
                        .HasColumnName("ref_category_id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateStoreId");

                    b.ToTable("affiliate_category", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCollection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_collection_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_collection_id_seq", "affiliate-tracking-services");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Enabled")
                        .HasMaxLength(500)
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("category_name");

                    b.HasKey("Id");

                    b.ToTable("affiliate_collection", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateColorDefault", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_color_default_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_color_default_id_seq", "affiliate-tracking-services");

                    b.Property<long>("BusinessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("business_id");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_color");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secondary_color");

                    b.HasKey("Id");

                    b.ToTable("affiliate_color_default", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_mapping_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_mapping_id_seq", "affiliate-tracking-services");

                    b.Property<long>("AffiliateStoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_store_id");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("integer")
                        .HasColumnName("column_index");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("MappingKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mapping_key");

                    b.Property<int>("RowIndex")
                        .HasColumnType("integer")
                        .HasColumnName("row_index");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateStoreId");

                    b.ToTable("affiliate_mapping", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_store_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_store_id_seq", "affiliate-tracking-services");

                    b.Property<bool?>("AllowGetOrderTracking")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_get_order_tracking");

                    b.Property<bool?>("AllowGetOrderTrackingCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_get_order_tracking_code");

                    b.Property<bool?>("AllowGetOrderTrackingUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_get_order_tracking_url");

                    b.Property<bool>("AllowPublisherRegister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("allow_publisher_register");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("api_key");

                    b.Property<bool>("AutoApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("auto_approved");

                    b.Property<DateTime?>("AutoApprovedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("auto_approved_date");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint")
                        .HasColumnName("business_id");

                    b.Property<int>("CookieDurationDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30)
                        .HasColumnName("cookie_duration_day");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("GoSellStoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("gosell_store_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("KeyWordByCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("key_word_by_code");

                    b.Property<string>("KeyWordByUrl")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("key_word_by_url");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("affiliate_store", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateTheme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_theme_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_theme_id_seq", "affiliate-tracking-services");

                    b.Property<long>("ColorId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("color_id");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cover_image");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("store_id");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("StoreId");

                    b.ToTable("affiliate_theme", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCampaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_campaign_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_campaign_id_seq", "affiliate-tracking-services");

                    b.Property<long>("AffiliateStoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_store_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("campaign_name");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TerminatedBy")
                        .HasColumnType("text")
                        .HasColumnName("terminated_by");

                    b.Property<DateTime>("TerminatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("terminated_date");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateStoreId");

                    b.ToTable("affiliate_campaign", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCampaignProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_campaign_product_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_campaign_product_id_seq", "affiliate-tracking-services");

                    b.Property<long>("AffiliateCampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_campaign_id");

                    b.Property<long>("AffiliateProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_product_id");

                    b.Property<decimal>("CommissionFix")
                        .HasColumnType("numeric(20,2)")
                        .HasColumnName("commission_fix");

                    b.Property<decimal>("CommissionPercent")
                        .HasColumnType("numeric(20,2)")
                        .HasColumnName("commission_percent");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateCampaignId");

                    b.HasIndex("AffiliateProductId");

                    b.ToTable("affiliate_campaign_product", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateClickTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_click_tracking_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_click_tracking_id_seq", "affiliate-tracking-services");

                    b.Property<string>("ClickId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("click_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Device")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("group_id");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("PlatForm")
                        .HasColumnType("text")
                        .HasColumnName("platform");

                    b.Property<Guid>("TrackingId")
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.HasKey("Id");

                    b.ToTable("affiliate_click_tracking", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCommission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_commission_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_commission_id_seq", "affiliate-tracking-services");

                    b.Property<string>("CommissionName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("commission_name");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("currency");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_amount");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("integer")
                        .HasColumnName("discount_percentage");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("product_name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("affiliate_commission", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_link_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_link_id_seq", "affiliate-tracking-services");

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("OriginLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("origin_link");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_id");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<string>("SubId1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sub_id_1");

                    b.Property<string>("SubId2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sub_id_2");

                    b.Property<string>("SubId3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sub_id_3");

                    b.Property<string>("SubId4")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sub_id_4");

                    b.Property<string>("SubId5")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sub_id_5");

                    b.Property<string>("TargetLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("target_link");

                    b.Property<Guid>("TrackingId")
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TrackingId")
                        .IsUnique();

                    b.ToTable("affiliate_link", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_order_detail_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_order_detail_id_seq", "affiliate-tracking-services");

                    b.Property<string>("CategoryId")
                        .HasColumnType("text")
                        .HasColumnName("category_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("ItemName")
                        .HasColumnType("text")
                        .HasColumnName("item_name");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("product_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<string>("Sku")
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("submission_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("total_price");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("affiliate_order_detail", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateOrderTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_order_tracking_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_order_tracking_id_seq", "affiliate-tracking-services");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_create_time");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<string>("TrackingIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tracking_ids");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.ToTable("affiliate_order_tracking", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_product_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_product_id_seq", "affiliate-tracking-services");

                    b.Property<long>("AffiliateStoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_store_id");

                    b.Property<long?>("CategoryId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<long?>("CollectionId")
                        .HasMaxLength(255)
                        .HasColumnType("bigint")
                        .HasColumnName("collection_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("FixValue")
                        .HasColumnType("numeric")
                        .HasColumnName("fixed_value");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFixValue")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fixed_value");

                    b.Property<bool>("IsOutOfStock")
                        .HasColumnType("boolean")
                        .HasColumnName("is_outof_stock");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean")
                        .HasColumnName("is_percentage");

                    b.Property<bool>("IsStopSelling")
                        .HasColumnType("boolean")
                        .HasColumnName("is_stop_selling");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("product_name");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("numeric")
                        .HasColumnName("percentage");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("text")
                        .HasColumnName("product_url");

                    b.Property<string>("RefProductId")
                        .HasColumnType("text")
                        .HasColumnName("ref_product_id");

                    b.Property<decimal?>("RegularPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("regular_price");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.HasKey("Id");

                    b.HasIndex("AffiliateStoreId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectionId");

                    b.ToTable("affiliate_product", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateSubmission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_submission_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_submission_id_seq", "affiliate-tracking-services");

                    b.Property<string>("ClickId")
                        .HasColumnType("text")
                        .HasColumnName("click_id");

                    b.Property<string>("ConversionId")
                        .HasColumnType("text")
                        .HasColumnName("conversion_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("text")
                        .HasColumnName("customer_address");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("text")
                        .HasColumnName("customer_phone");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_amount");

                    b.Property<long>("ExternalStoreId")
                        .HasColumnType("bigint")
                        .HasColumnName("external_store_id");

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("fee_amount");

                    b.Property<string>("GroupId")
                        .HasColumnType("text")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("OrderCreatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_created_date");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_id");

                    b.Property<long?>("PartnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_id");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("payment_method");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("numeric")
                        .HasColumnName("shipping_fee");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal>("SubTotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("sub_total_amount");

                    b.Property<int>("SubmissionType")
                        .HasColumnType("integer")
                        .HasColumnName("submission_type");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_amount");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<string>("TrackingIds")
                        .HasColumnType("text")
                        .HasColumnName("tracking_ids");

                    b.HasKey("Id");

                    b.ToTable("affiliate_submission", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateTrackingManagement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"affiliate-tracking-services\".affiliate_tracking_management_id_seq')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"), "affiliate_tracking_management_id_seq", "affiliate-tracking-services");

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("group_id");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<long>("PartnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("partner_id");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<long>("TotalClicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("total_clicks");

                    b.Property<long>("TotalHits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("total_hits");

                    b.Property<Guid>("TrackingId")
                        .HasColumnType("uuid")
                        .HasColumnName("tracking_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TrackingId");

                    b.ToTable("affiliate_tracking_management", "affiliate-tracking-services");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCategory", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", "AffiliateStore")
                        .WithMany()
                        .HasForeignKey("AffiliateStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffiliateStore");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateMapping", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", "AffiliateStore")
                        .WithMany("AffiliateMappings")
                        .HasForeignKey("AffiliateStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mapping_store");

                    b.Navigation("AffiliateStore");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateBusiness", "AffiliateBusiness")
                        .WithMany("AffiliateStores")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_store_business");

                    b.Navigation("AffiliateBusiness");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateTheme", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateColorDefault", "AffiliateColorDefault")
                        .WithMany("AffiliateThemes")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theme_color_default");

                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", "AffiliateStore")
                        .WithMany("AffiliateThemes")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theme_store");

                    b.Navigation("AffiliateColorDefault");

                    b.Navigation("AffiliateStore");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCampaign", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", "AffiliateStore")
                        .WithMany("AffiliateCampaigns")
                        .HasForeignKey("AffiliateStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campaign_affiliate_store");

                    b.Navigation("AffiliateStore");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCampaignProduct", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateCampaign", "AffiliateCampaign")
                        .WithMany("AffiliateCampaignProducts")
                        .HasForeignKey("AffiliateCampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_affiliate_campaign_id");

                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", "AffiliateProduct")
                        .WithMany("AffiliateCampaignProducts")
                        .HasForeignKey("AffiliateProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_affiliate_product_id");

                    b.Navigation("AffiliateCampaign");

                    b.Navigation("AffiliateProduct");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCommission", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", "AffiliateProduct")
                        .WithOne("AffiliateCommission")
                        .HasForeignKey("GoSell.Affiliate.Tracking.Entities.AffiliateCommission", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_commission_product");

                    b.Navigation("AffiliateProduct");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateLink", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateCampaign", "AffiliateCampaign")
                        .WithMany("AffiliateLinks")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("fk_link_campaign");

                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", "AffiliateProduct")
                        .WithMany("AffiliateLinks")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_link_product");

                    b.Navigation("AffiliateCampaign");

                    b.Navigation("AffiliateProduct");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateOrderDetail", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateSubmission", "AffiliateSubmission")
                        .WithMany("AffiliateOrderDetails")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submission_order_detail");

                    b.Navigation("AffiliateSubmission");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", "AffiliateStore")
                        .WithMany("AffiliateProducts")
                        .HasForeignKey("AffiliateStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_affiliate_product_store");

                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCategory", "AffiliateCategory")
                        .WithMany("AffiliateProducts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_product_category");

                    b.HasOne("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCollection", "AffiliateCollection")
                        .WithMany("AffiliateProducts")
                        .HasForeignKey("CollectionId")
                        .HasConstraintName("fk_product_collection");

                    b.Navigation("AffiliateCategory");

                    b.Navigation("AffiliateCollection");

                    b.Navigation("AffiliateStore");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateTrackingManagement", b =>
                {
                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", "AffiliateProduct")
                        .WithMany("AffiliateTrackingManagements")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_tracking_product");

                    b.HasOne("GoSell.Affiliate.Tracking.Entities.AffiliateLink", "AffiliateLink")
                        .WithMany("AffiliateTrackingManagements")
                        .HasForeignKey("TrackingId")
                        .HasPrincipalKey("TrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tracking_link");

                    b.Navigation("AffiliateLink");

                    b.Navigation("AffiliateProduct");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateBusiness", b =>
                {
                    b.Navigation("AffiliateStores");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCategory", b =>
                {
                    b.Navigation("AffiliateProducts");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateCollection", b =>
                {
                    b.Navigation("AffiliateProducts");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateColorDefault", b =>
                {
                    b.Navigation("AffiliateThemes");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Database.Entities.AffiliateStore", b =>
                {
                    b.Navigation("AffiliateCampaigns");

                    b.Navigation("AffiliateMappings");

                    b.Navigation("AffiliateProducts");

                    b.Navigation("AffiliateThemes");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateCampaign", b =>
                {
                    b.Navigation("AffiliateCampaignProducts");

                    b.Navigation("AffiliateLinks");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateLink", b =>
                {
                    b.Navigation("AffiliateTrackingManagements");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateProduct", b =>
                {
                    b.Navigation("AffiliateCampaignProducts");

                    b.Navigation("AffiliateCommission");

                    b.Navigation("AffiliateLinks");

                    b.Navigation("AffiliateTrackingManagements");
                });

            modelBuilder.Entity("GoSell.Affiliate.Tracking.Entities.AffiliateSubmission", b =>
                {
                    b.Navigation("AffiliateOrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
