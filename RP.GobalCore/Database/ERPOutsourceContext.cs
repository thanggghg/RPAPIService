using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using RP.GobalCore.Database.Entities;

namespace RP.GobalCore.Database;

public partial class ErpoutsourceContext : DbContext
{
    public ErpoutsourceContext()
    {
    }

    public ErpoutsourceContext(DbContextOptions<ErpoutsourceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdjcenterLogRequest> AdjcenterLogRequests { get; set; }

    public virtual DbSet<Adjdiscussion> Adjdiscussions { get; set; }

    public virtual DbSet<Adjrequest> Adjrequests { get; set; }

    public virtual DbSet<AdjustmentDetail> AdjustmentDetails { get; set; }

    public virtual DbSet<Apapproval> Apapprovals { get; set; }

    public virtual DbSet<ApbillTo> ApbillTos { get; set; }

    public virtual DbSet<AphdrLog> AphdrLogs { get; set; }

    public virtual DbSet<Apheader> Apheaders { get; set; }

    public virtual DbSet<ApheaderLog> ApheaderLogs { get; set; }

    public virtual DbSet<Apinvestigating> Apinvestigatings { get; set; }

    public virtual DbSet<ApoldErpBmePurHi> ApoldErpBmePurHis { get; set; }

    public virtual DbSet<AppsTree> AppsTrees { get; set; }

    public virtual DbSet<ApshipTo> ApshipTos { get; set; }

    public virtual DbSet<Aptran> Aptrans { get; set; }

    public virtual DbSet<AptransLog> AptransLogs { get; set; }

    public virtual DbSet<Atcomponent> Atcomponents { get; set; }

    public virtual DbSet<Atctree> Atctrees { get; set; }

    public virtual DbSet<Batch> Batches { get; set; }

    public virtual DbSet<Bldetail> Bldetails { get; set; }

    public virtual DbSet<BldetailLog> BldetailLogs { get; set; }

    public virtual DbSet<Blheader> Blheaders { get; set; }

    public virtual DbSet<BlheaderLog> BlheaderLogs { get; set; }

    public virtual DbSet<Blprint> Blprints { get; set; }

    public virtual DbSet<BomVsUsage> BomVsUsages { get; set; }

    public virtual DbSet<BomdetailAllocAddIn> BomdetailAllocAddIns { get; set; }

    public virtual DbSet<Bomheader> Bomheaders { get; set; }

    public virtual DbSet<Brdetail> Brdetails { get; set; }

    public virtual DbSet<BrdetailGroup> BrdetailGroups { get; set; }

    public virtual DbSet<BrdetailLog> BrdetailLogs { get; set; }

    public virtual DbSet<Brheader> Brheaders { get; set; }

    public virtual DbSet<BrmasterBatchSize> BrmasterBatchSizes { get; set; }

    public virtual DbSet<BrmasterBlendInstr> BrmasterBlendInstrs { get; set; }

    public virtual DbSet<BrmasterCoatFml> BrmasterCoatFmls { get; set; }

    public virtual DbSet<BrmasterCoatInstr> BrmasterCoatInstrs { get; set; }

    public virtual DbSet<BrmasterCompoundingInstr> BrmasterCompoundingInstrs { get; set; }

    public virtual DbSet<BrmasterEncap> BrmasterEncaps { get; set; }

    public virtual DbSet<BrmasterHeader> BrmasterHeaders { get; set; }

    public virtual DbSet<BrmasterInstr> BrmasterInstrs { get; set; }

    public virtual DbSet<BrmasterSgwupInstr> BrmasterSgwupInstrs { get; set; }

    public virtual DbSet<BrmasterWupInstr> BrmasterWupInstrs { get; set; }

    public virtual DbSet<BrprodRelease> BrprodReleases { get; set; }

    public virtual DbSet<BrproductionStatusLog> BrproductionStatusLogs { get; set; }

    public virtual DbSet<Carrier> Carriers { get; set; }

    public virtual DbSet<CleanLabelTemplate> CleanLabelTemplates { get; set; }

    public virtual DbSet<CoaspecTemplate> CoaspecTemplates { get; set; }

    public virtual DbSet<CodeCategory> CodeCategories { get; set; }

    public virtual DbSet<CodeType> CodeTypes { get; set; }

    public virtual DbSet<ColorCode> ColorCodes { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompanyLocation> CompanyLocations { get; set; }

    public virtual DbSet<CostDetailBulkMatEstimate> CostDetailBulkMatEstimates { get; set; }

    public virtual DbSet<CostDetailBulkMatEstimateLog> CostDetailBulkMatEstimateLogs { get; set; }

    public virtual DbSet<CostDetailCapsuleMatEstimate> CostDetailCapsuleMatEstimates { get; set; }

    public virtual DbSet<CostDetailCoatingMatEstimate> CostDetailCoatingMatEstimates { get; set; }

    public virtual DbSet<CostDetailGelatinMatEstimate> CostDetailGelatinMatEstimates { get; set; }

    public virtual DbSet<CostDetailGelatinUsedEstimate> CostDetailGelatinUsedEstimates { get; set; }

    public virtual DbSet<CostDetailLaborActual> CostDetailLaborActuals { get; set; }

    public virtual DbSet<CostDetailLaborEstimate> CostDetailLaborEstimates { get; set; }

    public virtual DbSet<CostDetailOverHeadActual> CostDetailOverHeadActuals { get; set; }

    public virtual DbSet<CostDetailOverHeadEstimate> CostDetailOverHeadEstimates { get; set; }

    public virtual DbSet<CostDetailPackagingEstimateLogRemove> CostDetailPackagingEstimateLogRemoves { get; set; }

    public virtual DbSet<CostDetailPackagingEstimateRemove> CostDetailPackagingEstimateRemoves { get; set; }

    public virtual DbSet<CostDetailPkgTemplateRemove> CostDetailPkgTemplateRemoves { get; set; }

    public virtual DbSet<CostHeaderActual> CostHeaderActuals { get; set; }

    public virtual DbSet<CostHeaderEstimate> CostHeaderEstimates { get; set; }

    public virtual DbSet<CountryCode> CountryCodes { get; set; }

    public virtual DbSet<CpnCategory> CpnCategories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerCarrier> CustomerCarriers { get; set; }

    public virtual DbSet<CustomerDoc> CustomerDocs { get; set; }

    public virtual DbSet<CustomerGtin> CustomerGtins { get; set; }

    public virtual DbSet<CustomerLog> CustomerLogs { get; set; }

    public virtual DbSet<CustomerLogBookDetail> CustomerLogBookDetails { get; set; }

    public virtual DbSet<CustomerLogBookHeader> CustomerLogBookHeaders { get; set; }

    public virtual DbSet<CustomerQuote> CustomerQuotes { get; set; }

    public virtual DbSet<CustomerRef> CustomerRefs { get; set; }

    public virtual DbSet<CustomerRefLog> CustomerRefLogs { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Device> Devices { get; set; }

    public virtual DbSet<DevicePhyInvByLocation> DevicePhyInvByLocations { get; set; }

    public virtual DbSet<DocTemplate> DocTemplates { get; set; }

    public virtual DbSet<Dtproperty> Dtproperties { get; set; }

    public virtual DbSet<Edipartner> Edipartners { get; set; }

    public virtual DbSet<EmailQueue> EmailQueues { get; set; }

    public virtual DbSet<EmailWhitelist> EmailWhitelists { get; set; }

    public virtual DbSet<Fgcoa> Fgcoas { get; set; }

    public virtual DbSet<Fgcoadetail> Fgcoadetails { get; set; }

    public virtual DbSet<FgcoadetailLog> FgcoadetailLogs { get; set; }

    public virtual DbSet<Fgcoaformula> Fgcoaformulas { get; set; }

    public virtual DbSet<FgcoaformulaLog> FgcoaformulaLogs { get; set; }

    public virtual DbSet<Fgcoaheader> Fgcoaheaders { get; set; }

    public virtual DbSet<FgcoaheaderLog> FgcoaheaderLogs { get; set; }

    public virtual DbSet<Fgcoatemplate> Fgcoatemplates { get; set; }

    public virtual DbSet<FgcoatemplateRemove> FgcoatemplateRemoves { get; set; }

    public virtual DbSet<Fgformula> Fgformulas { get; set; }

    public virtual DbSet<FgformulaLog> FgformulaLogs { get; set; }

    public virtual DbSet<Fggelatin> Fggelatins { get; set; }

    public virtual DbSet<FggelatinLog> FggelatinLogs { get; set; }

    public virtual DbSet<FgitemMaster> FgitemMasters { get; set; }

    public virtual DbSet<FgitemMasterBulkId> FgitemMasterBulkIds { get; set; }

    public virtual DbSet<FgitemMasterBulkIdlogRemove> FgitemMasterBulkIdlogRemoves { get; set; }

    public virtual DbSet<FgitemMasterByLot> FgitemMasterByLots { get; set; }

    public virtual DbSet<FgitemMasterComboId> FgitemMasterComboIds { get; set; }

    public virtual DbSet<FgitemMasterLog> FgitemMasterLogs { get; set; }

    public virtual DbSet<Fglabel> Fglabels { get; set; }

    public virtual DbSet<FglabelComment> FglabelComments { get; set; }

    public virtual DbSet<FgpackInstruction> FgpackInstructions { get; set; }

    public virtual DbSet<Fgpackaging> Fgpackagings { get; set; }

    public virtual DbSet<FgpackagingLog> FgpackagingLogs { get; set; }

    public virtual DbSet<FgphyInvByLocation> FgphyInvByLocations { get; set; }

    public virtual DbSet<FgphyInvByLocationLog> FgphyInvByLocationLogs { get; set; }

    public virtual DbSet<FgpkgComponent> FgpkgComponents { get; set; }

    public virtual DbSet<FgpkgComponentLog> FgpkgComponentLogs { get; set; }

    public virtual DbSet<FgreturnDetail> FgreturnDetails { get; set; }

    public virtual DbSet<FgreturnHeader> FgreturnHeaders { get; set; }

    public virtual DbSet<FgspecAnalysList> FgspecAnalysLists { get; set; }

    public virtual DbSet<FgspecDetail> FgspecDetails { get; set; }

    public virtual DbSet<FgspecDetailLog> FgspecDetailLogs { get; set; }

    public virtual DbSet<FgspecDigitalPrint> FgspecDigitalPrints { get; set; }

    public virtual DbSet<FgspecDoc> FgspecDocs { get; set; }

    public virtual DbSet<FgspecFormula> FgspecFormulas { get; set; }

    public virtual DbSet<FgspecFormulaLog> FgspecFormulaLogs { get; set; }

    public virtual DbSet<FgspecGelFormula> FgspecGelFormulas { get; set; }

    public virtual DbSet<FgspecGelFormulaLog> FgspecGelFormulaLogs { get; set; }

    public virtual DbSet<FgspecHeader> FgspecHeaders { get; set; }

    public virtual DbSet<FgspecHeaderLog> FgspecHeaderLogs { get; set; }

    public virtual DbSet<FgspecImtemplate> FgspecImtemplates { get; set; }

    public virtual DbSet<FgspecImtrackingDetail> FgspecImtrackingDetails { get; set; }

    public virtual DbSet<FgspecImtrackingDetailLog> FgspecImtrackingDetailLogs { get; set; }

    public virtual DbSet<FgspecImtrackingHdr> FgspecImtrackingHdrs { get; set; }

    public virtual DbSet<FgspecImtrackingHdrLog> FgspecImtrackingHdrLogs { get; set; }

    public virtual DbSet<FgspecLotTrackingDetail> FgspecLotTrackingDetails { get; set; }

    public virtual DbSet<FgspecLotTrackingHdr> FgspecLotTrackingHdrs { get; set; }

    public virtual DbSet<FgspecPkg> FgspecPkgs { get; set; }

    public virtual DbSet<FgspecPkgLog> FgspecPkgLogs { get; set; }

    public virtual DbSet<FgspecPkgTemplate> FgspecPkgTemplates { get; set; }

    public virtual DbSet<Foformula> Foformulas { get; set; }

    public virtual DbSet<Foheader> Foheaders { get; set; }

    public virtual DbSet<Fopodetail> Fopodetails { get; set; }

    public virtual DbSet<Form> Forms { get; set; }

    public virtual DbSet<FormRequest> FormRequests { get; set; }

    public virtual DbSet<GelBatchHeader> GelBatchHeaders { get; set; }

    public virtual DbSet<GelBatchInstructTemplate> GelBatchInstructTemplates { get; set; }

    public virtual DbSet<GelBatchInstruction> GelBatchInstructions { get; set; }

    public virtual DbSet<GelatinSchedule> GelatinSchedules { get; set; }

    public virtual DbSet<GelatinSource> GelatinSources { get; set; }

    public virtual DbSet<GenCodeType> GenCodeTypes { get; set; }

    public virtual DbSet<GeneralCode> GeneralCodes { get; set; }

    public virtual DbSet<GlcostAccount> GlcostAccounts { get; set; }

    public virtual DbSet<GlcostCenter> GlcostCenters { get; set; }

    public virtual DbSet<GlrevenueAccount> GlrevenueAccounts { get; set; }

    public virtual DbSet<GlrevenueSubAccount> GlrevenueSubAccounts { get; set; }

    public virtual DbSet<Hierarchy> Hierarchies { get; set; }

    public virtual DbSet<Iminfo> Iminfos { get; set; }

    public virtual DbSet<ImlabelDoc> ImlabelDocs { get; set; }

    public virtual DbSet<Inspection> Inspections { get; set; }

    public virtual DbSet<InventoryAging> InventoryAgings { get; set; }

    public virtual DbSet<InventoryTransHistory> InventoryTransHistories { get; set; }

    public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }

    public virtual DbSet<InvoiceHeader> InvoiceHeaders { get; set; }

    public virtual DbSet<InvoicePayment> InvoicePayments { get; set; }

    public virtual DbSet<InvoiceTerm> InvoiceTerms { get; set; }

    public virtual DbSet<LogicalInventory> LogicalInventories { get; set; }

    public virtual DbSet<Manufacturer> Manufacturers { get; set; }

    public virtual DbSet<ManufacturerDoc> ManufacturerDocs { get; set; }

    public virtual DbSet<MarketingLead> MarketingLeads { get; set; }

    public virtual DbSet<MetaDataOverHead> MetaDataOverHeads { get; set; }

    public virtual DbSet<Mfschedule> Mfschedules { get; set; }

    public virtual DbSet<MmSamDc> MmSamDcs { get; set; }

    public virtual DbSet<MmSamStore> MmSamStores { get; set; }

    public virtual DbSet<MmWmDc> MmWmDcs { get; set; }

    public virtual DbSet<MmWmStore> MmWmStores { get; set; }

    public virtual DbSet<NextApponumber> NextApponumbers { get; set; }

    public virtual DbSet<NextCoatingFormulaNumber> NextCoatingFormulaNumbers { get; set; }

    public virtual DbSet<NextCustomerNumber> NextCustomerNumbers { get; set; }

    public virtual DbSet<NextFormulaNumber> NextFormulaNumbers { get; set; }

    public virtual DbSet<NextGelMassNumber> NextGelMassNumbers { get; set; }

    public virtual DbSet<NextImsiblingNum> NextImsiblingNums { get; set; }

    public virtual DbSet<NextInvoiceNumber> NextInvoiceNumbers { get; set; }

    public virtual DbSet<NextItemMasterNumber> NextItemMasterNumbers { get; set; }

    public virtual DbSet<NextLotWhsNumber> NextLotWhsNumbers { get; set; }

    public virtual DbSet<NextMfgLotNumber> NextMfgLotNumbers { get; set; }

    public virtual DbSet<NextPalletNumber> NextPalletNumbers { get; set; }

    public virtual DbSet<NextRmanumber> NextRmanumbers { get; set; }

    public virtual DbSet<NextRnDformulaNumber> NextRnDformulaNumbers { get; set; }

    public virtual DbSet<NextVoucherNumber> NextVoucherNumbers { get; set; }

    public virtual DbSet<NextWeighUpBatchNumber> NextWeighUpBatchNumbers { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; }

    public virtual DbSet<NotificationTemplateUser> NotificationTemplateUsers { get; set; }

    public virtual DbSet<NotificationUser> NotificationUsers { get; set; }

    public virtual DbSet<PackagingType> PackagingTypes { get; set; }

    public virtual DbSet<PackagingUsageBrdetail> PackagingUsageBrdetails { get; set; }

    public virtual DbSet<PackagingUsageBrpdflog> PackagingUsageBrpdflogs { get; set; }

    public virtual DbSet<PackagingUsageHeader> PackagingUsageHeaders { get; set; }

    public virtual DbSet<PackagingUsageInstruction> PackagingUsageInstructions { get; set; }

    public virtual DbSet<PackagingUsageRmdetail> PackagingUsageRmdetails { get; set; }

    public virtual DbSet<PalletInfo> PalletInfos { get; set; }

    public virtual DbSet<PhyBinMaster> PhyBinMasters { get; set; }

    public virtual DbSet<PhyTransferBatchDetail> PhyTransferBatchDetails { get; set; }

    public virtual DbSet<PhyTransferBatchHeader> PhyTransferBatchHeaders { get; set; }

    public virtual DbSet<PhysicalInventory> PhysicalInventories { get; set; }

    public virtual DbSet<PickTicketBinLocation> PickTicketBinLocations { get; set; }

    public virtual DbSet<PickTicketDetail> PickTicketDetails { get; set; }

    public virtual DbSet<PickTicketHeader> PickTicketHeaders { get; set; }

    public virtual DbSet<PillDiceCavity> PillDiceCavities { get; set; }

    public virtual DbSet<PillSize> PillSizes { get; set; }

    public virtual DbSet<PkgPlanningCache> PkgPlanningCaches { get; set; }

    public virtual DbSet<PkgSafetyStockItem> PkgSafetyStockItems { get; set; }

    public virtual DbSet<PkgSoStatus> PkgSoStatuses { get; set; }

    public virtual DbSet<PoStatus> PoStatuses { get; set; }

    public virtual DbSet<ProdMachine> ProdMachines { get; set; }

    public virtual DbSet<ProdMachineTool> ProdMachineTools { get; set; }

    public virtual DbSet<ProdSchedule> ProdSchedules { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductType> ProductTypes { get; set; }

    public virtual DbSet<ProductionCode> ProductionCodes { get; set; }

    public virtual DbSet<Qbaccount> Qbaccounts { get; set; }

    public virtual DbSet<QbexpSetup> QbexpSetups { get; set; }

    public virtual DbSet<Qbitem> Qbitems { get; set; }

    public virtual DbSet<Qbmapping> Qbmappings { get; set; }

    public virtual DbSet<QuoteDetail> QuoteDetails { get; set; }

    public virtual DbSet<QuoteDetailFormula> QuoteDetailFormulas { get; set; }

    public virtual DbSet<QuoteDetailLog> QuoteDetailLogs { get; set; }

    public virtual DbSet<QuoteHeader> QuoteHeaders { get; set; }

    public virtual DbSet<QuotePkgCostDetailEstimate> QuotePkgCostDetailEstimates { get; set; }

    public virtual DbSet<QuotePkgCostDetailEstimateLog> QuotePkgCostDetailEstimateLogs { get; set; }

    public virtual DbSet<QuotePkgCostDetailEstimateRemove> QuotePkgCostDetailEstimateRemoves { get; set; }

    public virtual DbSet<QuotePkgCpnDetailEstimate> QuotePkgCpnDetailEstimates { get; set; }

    public virtual DbSet<QuotePkgCpnDetailEstimateLog> QuotePkgCpnDetailEstimateLogs { get; set; }

    public virtual DbSet<QuotePkgHeader> QuotePkgHeaders { get; set; }

    public virtual DbSet<QuotePkgHeaderLog> QuotePkgHeaderLogs { get; set; }

    public virtual DbSet<QuotePkgLaborDetailEstimate> QuotePkgLaborDetailEstimates { get; set; }

    public virtual DbSet<QuotePkgLaborDetailEstimateLog> QuotePkgLaborDetailEstimateLogs { get; set; }

    public virtual DbSet<QuotePkgOvrHdDetailEstimate> QuotePkgOvrHdDetailEstimates { get; set; }

    public virtual DbSet<QuotePkgOvrHdDetailEstimateLog> QuotePkgOvrHdDetailEstimateLogs { get; set; }

    public virtual DbSet<QuoteRfqlog> QuoteRfqlogs { get; set; }

    public virtual DbSet<QuoteRfqstatus> QuoteRfqstatuses { get; set; }

    public virtual DbSet<RawMaterial> RawMaterials { get; set; }

    public virtual DbSet<RawMaterialByVendor> RawMaterialByVendors { get; set; }

    public virtual DbSet<RawMaterialByVendorByLot> RawMaterialByVendorByLots { get; set; }

    public virtual DbSet<RawMaterialByVendorByLotLog> RawMaterialByVendorByLotLogs { get; set; }

    public virtual DbSet<RawMaterialByVendorByLotRemove> RawMaterialByVendorByLotRemoves { get; set; }

    public virtual DbSet<RawMaterialByVendorHistoricalPrice> RawMaterialByVendorHistoricalPrices { get; set; }

    public virtual DbSet<RawMaterialByVendorLog> RawMaterialByVendorLogs { get; set; }

    public virtual DbSet<RawMaterialCoa> RawMaterialCoas { get; set; }

    public virtual DbSet<RawMaterialLog> RawMaterialLogs { get; set; }

    public virtual DbSet<RawMaterialSpecAnalysis> RawMaterialSpecAnalyses { get; set; }

    public virtual DbSet<RcvBackLog> RcvBackLogs { get; set; }

    public virtual DbSet<RcvDetail> RcvDetails { get; set; }

    public virtual DbSet<RcvDetailLog> RcvDetailLogs { get; set; }

    public virtual DbSet<RcvHeader> RcvHeaders { get; set; }

    public virtual DbSet<RcvHeaderLog> RcvHeaderLogs { get; set; }

    public virtual DbSet<RcvVoucherDetail> RcvVoucherDetails { get; set; }

    public virtual DbSet<RcvVoucherHeader> RcvVoucherHeaders { get; set; }

    public virtual DbSet<RcvVoucherInvoice> RcvVoucherInvoices { get; set; }

    public virtual DbSet<ReceiveRm> ReceiveRms { get; set; }

    public virtual DbSet<RegistrationDoc> RegistrationDocs { get; set; }

    public virtual DbSet<RegistrationDocTmpRemove> RegistrationDocTmpRemoves { get; set; }

    public virtual DbSet<ReleaseToQa> ReleaseToQas { get; set; }

    public virtual DbSet<Rfqdoc> Rfqdocs { get; set; }

    public virtual DbSet<RmactivationRequest> RmactivationRequests { get; set; }

    public virtual DbSet<RmcleanLabel> RmcleanLabels { get; set; }

    public virtual DbSet<RmdocType> RmdocTypes { get; set; }

    public virtual DbSet<RminvTransHistory> RminvTransHistories { get; set; }

    public virtual DbSet<RminvTransRemove> RminvTransRemoves { get; set; }

    public virtual DbSet<RmlotPickForBr> RmlotPickForBrs { get; set; }

    public virtual DbSet<Rmmanufacture> Rmmanufactures { get; set; }

    public virtual DbSet<RmphyInvByLocation> RmphyInvByLocations { get; set; }

    public virtual DbSet<RmphyInvByLocationLog> RmphyInvByLocationLogs { get; set; }

    public virtual DbSet<RmsafetyStockItem> RmsafetyStockItems { get; set; }

    public virtual DbSet<RmspecDetail> RmspecDetails { get; set; }

    public virtual DbSet<RmspecDetailLog> RmspecDetailLogs { get; set; }

    public virtual DbSet<RmspecHeader> RmspecHeaders { get; set; }

    public virtual DbSet<RmspecHeaderLog> RmspecHeaderLogs { get; set; }

    public virtual DbSet<RmspecTemplated> RmspecTemplateds { get; set; }

    public virtual DbSet<RmtestMethod> RmtestMethods { get; set; }

    public virtual DbSet<RmtestResult> RmtestResults { get; set; }

    public virtual DbSet<RmviewDoc> RmviewDocs { get; set; }

    public virtual DbSet<RnDcoatingFormulaDetail> RnDcoatingFormulaDetails { get; set; }

    public virtual DbSet<RnDcoatingFormulaDetailLog> RnDcoatingFormulaDetailLogs { get; set; }

    public virtual DbSet<RnDcoatingFormulaHeader> RnDcoatingFormulaHeaders { get; set; }

    public virtual DbSet<RnDcoatingFormulaHeaderLog> RnDcoatingFormulaHeaderLogs { get; set; }

    public virtual DbSet<RnDformulaCleanLabel> RnDformulaCleanLabels { get; set; }

    public virtual DbSet<RnDformulaDetail> RnDformulaDetails { get; set; }

    public virtual DbSet<RnDformulaDetailLog> RnDformulaDetailLogs { get; set; }

    public virtual DbSet<RnDformulaHeader> RnDformulaHeaders { get; set; }

    public virtual DbSet<RnDformulaHeaderLog> RnDformulaHeaderLogs { get; set; }

    public virtual DbSet<RnDformulaWorkTask> RnDformulaWorkTasks { get; set; }

    public virtual DbSet<RnDgelFormulaDetail> RnDgelFormulaDetails { get; set; }

    public virtual DbSet<RnDgelFormulaDetailLog> RnDgelFormulaDetailLogs { get; set; }

    public virtual DbSet<RnDgelFormulaHeader> RnDgelFormulaHeaders { get; set; }

    public virtual DbSet<RnDgelFormulaHeaderLog> RnDgelFormulaHeaderLogs { get; set; }

    public virtual DbSet<Rtvdetail> Rtvdetails { get; set; }

    public virtual DbSet<Rtvheader> Rtvheaders { get; set; }

    public virtual DbSet<SampleTracking> SampleTrackings { get; set; }

    public virtual DbSet<SampleTrackingImport> SampleTrackingImports { get; set; }

    public virtual DbSet<SampleTrackingMd> SampleTrackingMds { get; set; }

    public virtual DbSet<SampleTrackingMethod> SampleTrackingMethods { get; set; }

    public virtual DbSet<SampleTrackingResult> SampleTrackingResults { get; set; }

    public virtual DbSet<SampleTrackingResultDetail> SampleTrackingResultDetails { get; set; }

    public virtual DbSet<SampleTrackingResultHeader> SampleTrackingResultHeaders { get; set; }

    public virtual DbSet<ShapeCode> ShapeCodes { get; set; }

    public virtual DbSet<SobillTo> SobillTos { get; set; }

    public virtual DbSet<SobulkStatusOpen> SobulkStatusOpens { get; set; }

    public virtual DbSet<SobulkStatusRangeOpen> SobulkStatusRangeOpens { get; set; }

    public virtual DbSet<SocloseRequest> SocloseRequests { get; set; }

    public virtual DbSet<Sodetail> Sodetails { get; set; }

    public virtual DbSet<Soformula> Soformulas { get; set; }

    public virtual DbSet<SoformulaLog> SoformulaLogs { get; set; }

    public virtual DbSet<Soheader> Soheaders { get; set; }

    public virtual DbSet<SopackItem> SopackItems { get; set; }

    public virtual DbSet<SopackStatusOpen> SopackStatusOpens { get; set; }

    public virtual DbSet<SopackStatusRangeOpen> SopackStatusRangeOpens { get; set; }

    public virtual DbSet<Sopodetail> Sopodetails { get; set; }

    public virtual DbSet<SopodetailSubItem> SopodetailSubItems { get; set; }

    public virtual DbSet<SopodetailSubItemLog> SopodetailSubItemLogs { get; set; }

    public virtual DbSet<SoshipTo> SoshipTos { get; set; }

    public virtual DbSet<SotimeLineEvent> SotimeLineEvents { get; set; }

    public virtual DbSet<TabletMachine> TabletMachines { get; set; }

    public virtual DbSet<TblEdiRmRemove> TblEdiRmRemoves { get; set; }

    public virtual DbSet<TempBr> TempBrs { get; set; }

    public virtual DbSet<TempWubr> TempWubrs { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TicketDetail> TicketDetails { get; set; }

    public virtual DbSet<TicketEditorTemplate> TicketEditorTemplates { get; set; }

    public virtual DbSet<TitleLevelRequest> TitleLevelRequests { get; set; }

    public virtual DbSet<TmpAdp82922Remove> TmpAdp82922Removes { get; set; }

    public virtual DbSet<TmpBrallocRemove> TmpBrallocRemoves { get; set; }

    public virtual DbSet<TmpPkgHb3Remove> TmpPkgHb3Removes { get; set; }

    public virtual DbSet<TmpPkgItemType2Remove> TmpPkgItemType2Removes { get; set; }

    public virtual DbSet<TmpPkgItemTypeRemove> TmpPkgItemTypeRemoves { get; set; }

    public virtual DbSet<TmpPkgallocRemove> TmpPkgallocRemoves { get; set; }

    public virtual DbSet<TmpRmallocRemove> TmpRmallocRemoves { get; set; }

    public virtual DbSet<TmpRminactiveRemove> TmpRminactiveRemoves { get; set; }

    public virtual DbSet<TmpVendorInActive> TmpVendorInActives { get; set; }

    public virtual DbSet<TmpdecCpnUseRemove> TmpdecCpnUseRemoves { get; set; }

    public virtual DbSet<TmpdecDupLotRemove> TmpdecDupLotRemoves { get; set; }

    public virtual DbSet<TmpdecPkgBatchRemove> TmpdecPkgBatchRemoves { get; set; }

    public virtual DbSet<TmpdecPoRemove> TmpdecPoRemoves { get; set; }

    public virtual DbSet<TmpdecPomonRemove> TmpdecPomonRemoves { get; set; }

    public virtual DbSet<TmpdecProdCompletedRemove> TmpdecProdCompletedRemoves { get; set; }

    public virtual DbSet<TmpdecReceivingRemove> TmpdecReceivingRemoves { get; set; }

    public virtual DbSet<TmpdecRmphyInvByLocationRemove> TmpdecRmphyInvByLocationRemoves { get; set; }

    public virtual DbSet<TmpdecRmphySflRemove> TmpdecRmphySflRemoves { get; set; }

    public virtual DbSet<TmpdecRmusageRemove> TmpdecRmusageRemoves { get; set; }

    public virtual DbSet<TmpgetCpnforPkgBatch> TmpgetCpnforPkgBatches { get; set; }

    public virtual DbSet<TmpgetRmforBrlot> TmpgetRmforBrlots { get; set; }

    public virtual DbSet<TmpgetRmforBrlotThang> TmpgetRmforBrlotThangs { get; set; }

    public virtual DbSet<TmppkgAllocRemove1> TmppkgAllocRemoves1 { get; set; }

    public virtual DbSet<TmpqbinvoiceRemove> TmpqbinvoiceRemoves { get; set; }

    public virtual DbSet<TmpquoteDecRemove> TmpquoteDecRemoves { get; set; }

    public virtual DbSet<TripHeader> TripHeaders { get; set; }

    public virtual DbSet<Uommatrix> Uommatrices { get; set; }

    public virtual DbSet<UompillSize> UompillSizes { get; set; }

    public virtual DbSet<Upstracking> Upstrackings { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserDeptTemplate> UserDeptTemplates { get; set; }

    public virtual DbSet<UserTree> UserTrees { get; set; }

    public virtual DbSet<UserTreeRequest> UserTreeRequests { get; set; }

    public virtual DbSet<UsersRequest> UsersRequests { get; set; }

    public virtual DbSet<VItinventoryAudit> VItinventoryAudits { get; set; }

    public virtual DbSet<Validation> Validations { get; set; }

    public virtual DbSet<ValidationOption> ValidationOptions { get; set; }

    public virtual DbSet<ValidationResponse> ValidationResponses { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<VendorDoc> VendorDocs { get; set; }

    public virtual DbSet<VendorLog> VendorLogs { get; set; }

    public virtual DbSet<VendorManufacture> VendorManufactures { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    public virtual DbSet<WeighUpDetail> WeighUpDetails { get; set; }

    public virtual DbSet<WeighUpSchedule> WeighUpSchedules { get; set; }

    public virtual DbSet<WorkTask> WorkTasks { get; set; }

    public virtual DbSet<Wslog> Wslogs { get; set; }

    public virtual DbSet<WuplanningCache> WuplanningCaches { get; set; }

    public virtual DbSet<ZipCode> ZipCodes { get; set; }

    public virtual DbSet<Zmm810Hdr> Zmm810Hdrs { get; set; }

    public virtual DbSet<Zmm810Itm> Zmm810Itms { get; set; }

    public virtual DbSet<Zmm810Sac> Zmm810Sacs { get; set; }

    public virtual DbSet<Zmm812Cdd> Zmm812Cdds { get; set; }

    public virtual DbSet<Zmm812Hdr> Zmm812Hdrs { get; set; }

    public virtual DbSet<Zmm812Itd> Zmm812Itds { get; set; }

    public virtual DbSet<Zmm812N1> Zmm812N1s { get; set; }

    public virtual DbSet<Zmm812N9> Zmm812N9s { get; set; }

    public virtual DbSet<Zmm812Per> Zmm812Pers { get; set; }

    public virtual DbSet<Zmm812Sac> Zmm812Sacs { get; set; }

    public virtual DbSet<Zmm816> Zmm816s { get; set; }

    public virtual DbSet<Zmm820Adx> Zmm820Adxes { get; set; }

    public virtual DbSet<Zmm820AdxReason> Zmm820AdxReasons { get; set; }

    public virtual DbSet<Zmm820Dtm> Zmm820Dtms { get; set; }

    public virtual DbSet<Zmm820Hdr> Zmm820Hdrs { get; set; }

    public virtual DbSet<Zmm820N1> Zmm820N1s { get; set; }

    public virtual DbSet<Zmm820Ref> Zmm820Refs { get; set; }

    public virtual DbSet<Zmm820Ref6o> Zmm820Ref6os { get; set; }

    public virtual DbSet<Zmm820Rmr> Zmm820Rmrs { get; set; }

    public virtual DbSet<Zmm850Fob> Zmm850Fobs { get; set; }

    public virtual DbSet<Zmm850Hdr> Zmm850Hdrs { get; set; }

    public virtual DbSet<Zmm850Itd> Zmm850Itds { get; set; }

    public virtual DbSet<Zmm850N1> Zmm850N1s { get; set; }

    public virtual DbSet<Zmm850N9> Zmm850N9s { get; set; }

    public virtual DbSet<Zmm850Per> Zmm850Pers { get; set; }

    public virtual DbSet<Zmm850Pid> Zmm850Pids { get; set; }

    public virtual DbSet<Zmm850Po1> Zmm850Po1s { get; set; }

    public virtual DbSet<Zmm850Po1Ctp> Zmm850Po1Ctps { get; set; }

    public virtual DbSet<Zmm850Po1N9> Zmm850Po1N9s { get; set; }

    public virtual DbSet<Zmm850Po1Pid> Zmm850Po1Pids { get; set; }

    public virtual DbSet<Zmm850Po1Po4> Zmm850Po1Po4s { get; set; }

    public virtual DbSet<Zmm850Po1Sac> Zmm850Po1Sacs { get; set; }

    public virtual DbSet<Zmm850Po1Sdq> Zmm850Po1Sdqs { get; set; }

    public virtual DbSet<Zmm850Po1Sln> Zmm850Po1Slns { get; set; }

    public virtual DbSet<Zmm850Po1SlnPid> Zmm850Po1SlnPids { get; set; }

    public virtual DbSet<Zmm850Ref> Zmm850Refs { get; set; }

    public virtual DbSet<Zmm850Sac> Zmm850Sacs { get; set; }

    public virtual DbSet<Zmm850Td5> Zmm850Td5s { get; set; }

    public virtual DbSet<Zmm856Hdr> Zmm856Hdrs { get; set; }

    public virtual DbSet<Zmm856HdrPp> Zmm856HdrPps { get; set; }

    public virtual DbSet<Zmm856Itm> Zmm856Itms { get; set; }

    public virtual DbSet<Zmm856ItmPp> Zmm856ItmPps { get; set; }

    public virtual DbSet<Zmm860Fob> Zmm860Fobs { get; set; }

    public virtual DbSet<Zmm860Hdr> Zmm860Hdrs { get; set; }

    public virtual DbSet<Zmm860Itd> Zmm860Itds { get; set; }

    public virtual DbSet<Zmm860N1> Zmm860N1s { get; set; }

    public virtual DbSet<Zmm860N9> Zmm860N9s { get; set; }

    public virtual DbSet<Zmm860Poc> Zmm860Pocs { get; set; }

    public virtual DbSet<Zmm860PocCtp> Zmm860PocCtps { get; set; }

    public virtual DbSet<Zmm860PocPid> Zmm860PocPids { get; set; }

    public virtual DbSet<Zmm860PocPo4> Zmm860PocPo4s { get; set; }

    public virtual DbSet<Zmm860PocSac> Zmm860PocSacs { get; set; }

    public virtual DbSet<Zmm860PocSdq> Zmm860PocSdqs { get; set; }

    public virtual DbSet<Zmm860PocSln> Zmm860PocSlns { get; set; }

    public virtual DbSet<Zmm860PocSlnPid> Zmm860PocSlnPids { get; set; }

    public virtual DbSet<Zmm860Ref> Zmm860Refs { get; set; }

    public virtual DbSet<Zmm860Sac> Zmm860Sacs { get; set; }

    public virtual DbSet<Zmm860Td5> Zmm860Td5s { get; set; }

    public virtual DbSet<Zmm864Hdr> Zmm864Hdrs { get; set; }

    public virtual DbSet<Zmm864Mit> Zmm864Mits { get; set; }

    public virtual DbSet<Zmm864Msg> Zmm864Msgs { get; set; }

    public virtual DbSet<Zmm864N1> Zmm864N1s { get; set; }

    public virtual DbSet<Zmm864Ref> Zmm864Refs { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=210.2.68.52,2433;Database=ERPOutsource;User Id=osrw;Password=P6RYhk4RFrrebRWrvhf9mQ==;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdjcenterLogRequest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ADJCenterLogRequest");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.ItemType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReqGroupId)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Adjdiscussion>(entity =>
        {
            entity.ToTable("ADJDiscussion");

            entity.Property(e => e.Content).HasMaxLength(255);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FileName).HasMaxLength(500);
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Adjrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ADJReque__3214EC07E1DA3756");

            entity.ToTable("ADJRequest");

            entity.HasIndex(e => e.ItemId, "UQ__ADJReque__727E838AE420A923").IsUnique();

            entity.Property(e => e.AdjustQty).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ApproveType)
                .HasMaxLength(32)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ItemType)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedBy)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Lot)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ReqCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ReqGroupId)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.ReqType)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RequestBy)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.ToRack)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.WarehousesLoc)
                .HasMaxLength(128)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AdjustmentDetail>(entity =>
        {
            entity.HasKey(e => e.AdjdetailNoPk);

            entity.ToTable("AdjustmentDetail");

            entity.HasIndex(e => e.AdjditemId, "ItemNo");

            entity.HasIndex(e => e.AdjdwhsLot, "WhsLot");

            entity.Property(e => e.AdjdetailNoPk).HasColumnName("ADJDetailNo_PK");
            entity.Property(e => e.Adjdimcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADJDIMCode");
            entity.Property(e => e.AdjditemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADJDItemID");
            entity.Property(e => e.AdjditemKeyNoFk).HasColumnName("ADJDItemKeyNo_FK");
            entity.Property(e => e.AdjdjheaderNoFk).HasColumnName("ADJDJHeaderNo_FK");
            entity.Property(e => e.AdjdmanLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADJDManLot");
            entity.Property(e => e.AdjdproductClassNoFk).HasColumnName("ADJDProductClassNo_FK");
            entity.Property(e => e.Adjdqty).HasColumnName("ADJDQty");
            entity.Property(e => e.Adjdreason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ADJDReason");
            entity.Property(e => e.Adjdsonum).HasColumnName("ADJDSOnum");
            entity.Property(e => e.AdjdstatusNoFk).HasColumnName("ADJDStatusNo_FK");
            entity.Property(e => e.AdjdtransTypeNoFk).HasColumnName("ADJDTransTypeNo_FK");
            entity.Property(e => e.AdjdwhsLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADJDWhsLot");
            entity.Property(e => e.AdjvendorId).HasColumnName("ADJVendorID");
            entity.Property(e => e.Caller)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Apapproval>(entity =>
        {
            entity.HasKey(e => e.ApapprovalNoPk);

            entity.ToTable("APApproval", tb => tb.HasTrigger("trigger_APApproval"));

            entity.Property(e => e.ApapprovalNoPk).HasColumnName("APApprovalNo_PK");
            entity.Property(e => e.ApaapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APAApprovedBy");
            entity.Property(e => e.ApaapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("APAApprovedDt");
            entity.Property(e => e.ApaapprovedReason)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("APAApprovedReason");
            entity.Property(e => e.ApaapprovedTitleId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APAApprovedTitleID");
            entity.Property(e => e.ApaisApproved).HasColumnName("APAIsApproved");
            entity.Property(e => e.ApaisReadyToSign).HasColumnName("APAIsReadyToSign");
            entity.Property(e => e.Apaponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APAPONumber");
            entity.Property(e => e.AparequestReason)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("APARequestReason");
            entity.Property(e => e.ApasessionId).HasColumnName("APASessionID");
            entity.Property(e => e.ApasessionStatus).HasColumnName("APASessionStatus");
            entity.Property(e => e.ApatotalPrice).HasColumnName("APATotalPrice");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<ApbillTo>(entity =>
        {
            entity.HasKey(e => e.ApbillToNoPk);

            entity.ToTable("APBillTo");

            entity.Property(e => e.ApbillToNoPk).HasColumnName("APBillToNo_PK");
            entity.Property(e => e.Apbtaddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APBTAddress1");
            entity.Property(e => e.Apbtaddress2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APBTAddress2");
            entity.Property(e => e.Apbtaddress3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APBTAddress3");
            entity.Property(e => e.Apbtattn)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APBTAttn");
            entity.Property(e => e.Apbtcity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APBTCity");
            entity.Property(e => e.Apbtcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTCountry");
            entity.Property(e => e.Apbtemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APBTEmail");
            entity.Property(e => e.Apbtfax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTFax1");
            entity.Property(e => e.Apbtfax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTFax2");
            entity.Property(e => e.Apbtname)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APBTName");
            entity.Property(e => e.Apbtphone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTPhone1");
            entity.Property(e => e.Apbtphone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTPhone2");
            entity.Property(e => e.ApbtphoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTPhoneExt");
            entity.Property(e => e.ApbtpostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTPostalCode");
            entity.Property(e => e.Apbtremarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("APBTRemarks");
            entity.Property(e => e.Apbtstate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTState");
            entity.Property(e => e.ApbtzipCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APBTZipCode");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<AphdrLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("APHdrLOG");

            entity.Property(e => e.AphapbillToNoFk).HasColumnName("APHAPBillToNo_FK");
            entity.Property(e => e.AphapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHApprovedBy");
            entity.Property(e => e.AphapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("APHApprovedDt");
            entity.Property(e => e.AphapshipToNoFk).HasColumnName("APHAPShipToNo_FK");
            entity.Property(e => e.AphbanketPo).HasColumnName("APHBanketPO");
            entity.Property(e => e.AphbatchNoFk).HasColumnName("APHBatchNo_FK");
            entity.Property(e => e.AphconfirmBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHConfirmBy");
            entity.Property(e => e.AphconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("APHConfirmDt");
            entity.Property(e => e.AphcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHCustomerNo_FK");
            entity.Property(e => e.AphdrLogPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("APHdrLOG_PK");
            entity.Property(e => e.ApheaderNoPk).HasColumnName("APHeaderNo_PK");
            entity.Property(e => e.AphenteredBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHEnteredBy");
            entity.Property(e => e.Aphfob)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHFOB");
            entity.Property(e => e.AphfreightCharge).HasColumnName("APHFreightCharge");
            entity.Property(e => e.AphnonManfacturingPo).HasColumnName("APHNonManfacturingPO");
            entity.Property(e => e.Aphnotes)
                .HasColumnType("ntext")
                .HasColumnName("APHNotes");
            entity.Property(e => e.ApholdPonumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHOldPONumber");
            entity.Property(e => e.AphorderDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APHOrderDesc");
            entity.Property(e => e.Aphordered4Dept)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHOrdered4Dept");
            entity.Property(e => e.AphorderedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHOrderedBy");
            entity.Property(e => e.AphpaymentCodeTypeNoFk).HasColumnName("APHPaymentCodeTypeNo_FK");
            entity.Property(e => e.Aphpoamount)
                .HasColumnType("money")
                .HasColumnName("APHPOAmount");
            entity.Property(e => e.Aphpodate)
                .HasColumnType("datetime")
                .HasColumnName("APHPODate");
            entity.Property(e => e.Aphpomanual).HasColumnName("APHPOManual");
            entity.Property(e => e.Aphponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHPONumber");
            entity.Property(e => e.Aphpoqty).HasColumnName("APHPOQty");
            entity.Property(e => e.AphrejectedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHRejectedBy");
            entity.Property(e => e.AphrequestedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHRequestedBy");
            entity.Property(e => e.AphscacCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHScacCode");
            entity.Property(e => e.AphscacName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHScacName");
            entity.Property(e => e.AphstatusNoFk).HasColumnName("APHStatusNo_FK");
            entity.Property(e => e.AphtaxAmount)
                .HasColumnType("money")
                .HasColumnName("APHTaxAmount");
            entity.Property(e => e.AphtaxRate).HasColumnName("APHTaxRate");
            entity.Property(e => e.Aphterms).HasColumnName("APHTerms");
            entity.Property(e => e.AphvendorNoFk).HasColumnName("APHVendorNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Apheader>(entity =>
        {
            entity.HasKey(e => e.ApheaderNoPk).HasName("PK_APPurchaseOrder");

            entity.ToTable("APHeader");

            entity.HasIndex(e => e.Aphponumber, "IX_APPONum").IsUnique();

            entity.Property(e => e.ApheaderNoPk).HasColumnName("APHeaderNo_PK");
            entity.Property(e => e.AphapbillToNoFk).HasColumnName("APHAPBillToNo_FK");
            entity.Property(e => e.AphapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHApprovedBy");
            entity.Property(e => e.AphapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("APHApprovedDt");
            entity.Property(e => e.AphapshipToNoFk).HasColumnName("APHAPShipToNo_FK");
            entity.Property(e => e.AphbanketPo).HasColumnName("APHBanketPO");
            entity.Property(e => e.AphbatchNoFk).HasColumnName("APHBatchNo_FK");
            entity.Property(e => e.AphconfirmBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHConfirmBy");
            entity.Property(e => e.AphconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("APHConfirmDt");
            entity.Property(e => e.AphcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHCustomerNo_FK");
            entity.Property(e => e.AphenteredBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHEnteredBy");
            entity.Property(e => e.Aphfob)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHFOB");
            entity.Property(e => e.AphfreightCharge).HasColumnName("APHFreightCharge");
            entity.Property(e => e.AphnonManfacturingPo).HasColumnName("APHNonManfacturingPO");
            entity.Property(e => e.Aphnotes).HasColumnName("APHNotes");
            entity.Property(e => e.ApholdPonumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHOldPONumber");
            entity.Property(e => e.AphorderDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APHOrderDesc");
            entity.Property(e => e.Aphordered4Dept)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHOrdered4Dept");
            entity.Property(e => e.AphorderedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHOrderedBy");
            entity.Property(e => e.AphpaymentCodeTypeNoFk).HasColumnName("APHPaymentCodeTypeNo_FK");
            entity.Property(e => e.Aphpoamount)
                .HasColumnType("money")
                .HasColumnName("APHPOAmount");
            entity.Property(e => e.Aphpodate)
                .HasColumnType("datetime")
                .HasColumnName("APHPODate");
            entity.Property(e => e.Aphpomanual).HasColumnName("APHPOManual");
            entity.Property(e => e.Aphponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHPONumber");
            entity.Property(e => e.Aphpoqty).HasColumnName("APHPOQty");
            entity.Property(e => e.AphproductClassNoFk).HasColumnName("APHProductClassNo_FK");
            entity.Property(e => e.AphrejectedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHRejectedBy");
            entity.Property(e => e.AphrequestedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHRequestedBy");
            entity.Property(e => e.AphscacCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHScacCode");
            entity.Property(e => e.AphscacName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHScacName");
            entity.Property(e => e.AphstatusNoFk).HasColumnName("APHStatusNo_FK");
            entity.Property(e => e.AphtaxAmount)
                .HasColumnType("money")
                .HasColumnName("APHTaxAmount");
            entity.Property(e => e.AphtaxRate).HasColumnName("APHTaxRate");
            entity.Property(e => e.Aphterms).HasColumnName("APHTerms");
            entity.Property(e => e.AphvendorNoFk).HasColumnName("APHVendorNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApheaderLog>(entity =>
        {
            entity.HasKey(e => e.ApheaderLogNoPk).HasName("PK_APHeaderLog");

            entity.ToTable("APHeaderLOG");

            entity.Property(e => e.ApheaderLogNoPk).HasColumnName("APHeaderLogNo_PK");
            entity.Property(e => e.Aphldate)
                .HasColumnType("datetime")
                .HasColumnName("APHLDate");
            entity.Property(e => e.Aphlnotes)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("APHLNotes");
            entity.Property(e => e.Aphlponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHLPONumber");
            entity.Property(e => e.AphluserIdFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APHLUserID_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<Apinvestigating>(entity =>
        {
            entity.ToTable("APInvestigating");

            entity.Property(e => e.Whslot)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApoldErpBmePurHi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("APOld_ERP_BME_PurHis");

            entity.Property(e => e.ItemDta)
                .HasColumnType("datetime")
                .HasColumnName("ItemDTA");
            entity.Property(e => e.PobatchNum).HasColumnName("POBatchNum");
            entity.Property(e => e.Podate)
                .HasColumnType("datetime")
                .HasColumnName("PODate");
            entity.Property(e => e.Ponote)
                .HasMaxLength(1000)
                .HasColumnName("PONote");
            entity.Property(e => e.Ponum)
                .HasMaxLength(50)
                .HasColumnName("PONum");
            entity.Property(e => e.PoordQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("POOrdQty");
            entity.Property(e => e.PorecvQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("PORecvQty");
            entity.Property(e => e.PostatusFk).HasColumnName("POstatus_FK");
            entity.Property(e => e.Remarks).HasMaxLength(50);
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .HasColumnName("RMCode");
            entity.Property(e => e.RmrecvStatus).HasColumnName("RMRecvStatus");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.VendorName).HasMaxLength(250);
        });

        modelBuilder.Entity<AppsTree>(entity =>
        {
            entity.HasKey(e => e.AppsTreeNoPk).HasName("PK_AppsTree_1");

            entity.ToTable("AppsTree");

            entity.Property(e => e.AppsTreeNoPk)
                .ValueGeneratedNever()
                .HasColumnName("AppsTreeNo_PK");
            entity.Property(e => e.AppsDirectory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AppsTreeName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.WebViewType)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<ApshipTo>(entity =>
        {
            entity.HasKey(e => e.ApshipToNoPk);

            entity.ToTable("APShipTo");

            entity.Property(e => e.ApshipToNoPk).HasColumnName("APShipToNo_PK");
            entity.Property(e => e.Apstaddress1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTAddress1");
            entity.Property(e => e.Apstaddress2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTAddress2");
            entity.Property(e => e.Apstaddress3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTAddress3");
            entity.Property(e => e.Apstattn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTAttn");
            entity.Property(e => e.Apstcity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTCity");
            entity.Property(e => e.Apstcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTCountry");
            entity.Property(e => e.Apstemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APSTEmail");
            entity.Property(e => e.Apstfax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTFax1");
            entity.Property(e => e.Apstfax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTFax2");
            entity.Property(e => e.Apstname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTName");
            entity.Property(e => e.Apstphone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTPhone1");
            entity.Property(e => e.Apstphone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTPhone2");
            entity.Property(e => e.ApstphoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTPhoneExt");
            entity.Property(e => e.ApstpostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTPostalCode");
            entity.Property(e => e.Apstremarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("APSTRemarks");
            entity.Property(e => e.Apststate)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTState");
            entity.Property(e => e.ApstzipCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APSTZipCode");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<Aptran>(entity =>
        {
            entity.HasKey(e => e.AptransNoPk);

            entity.ToTable("APTrans", tb => tb.HasTrigger("trigger_APTrans"));

            entity.HasIndex(e => e.RecStatusNoFk, "IX1APTrans");

            entity.HasIndex(e => e.AptcustomerNoFk, "IX_APTransCustomer");

            entity.HasIndex(e => e.AptrawMaterialNoFk, "IX_APTransRM");

            entity.Property(e => e.AptransNoPk).HasColumnName("APTransNo_PK");
            entity.Property(e => e.AptapheaderNoFk).HasColumnName("APTAPHeaderNo_FK");
            entity.Property(e => e.Aptapponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTAPPONumber");
            entity.Property(e => e.AptapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTApprovedBy");
            entity.Property(e => e.AptapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("APTApprovedDt");
            entity.Property(e => e.AptapprovedUnitCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTApprovedUnitCost");
            entity.Property(e => e.AptassignedUom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APTAssignedUOM");
            entity.Property(e => e.AptbatchNoFk).HasColumnName("APTBatchNo_FK");
            entity.Property(e => e.AptblanketQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTBlanketQty");
            entity.Property(e => e.Aptbomqty).HasColumnName("APTBOMQty");
            entity.Property(e => e.AptconfirmBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTConfirmBy");
            entity.Property(e => e.AptconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("APTConfirmDt");
            entity.Property(e => e.AptcostAcctNoFk)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("APTCostAcctNo_FK");
            entity.Property(e => e.AptcostCenterNoFk).HasColumnName("APTCostCenterNo_FK");
            entity.Property(e => e.AptcustomerNoFk).HasColumnName("APTCustomerNo_FK");
            entity.Property(e => e.AptdeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("APTDeliveryDate");
            entity.Property(e => e.AptitemNote)
                .HasMaxLength(2000)
                .HasColumnName("APTItemNote");
            entity.Property(e => e.AptmiscItemCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTMiscItemCost");
            entity.Property(e => e.Aptnotes)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("APTNotes");
            entity.Property(e => e.AptrawMaterialNoFk).HasColumnName("APTRawMaterialNo_FK");
            entity.Property(e => e.AptreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("APTReceivedDate");
            entity.Property(e => e.AptrefNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTRefNumber");
            entity.Property(e => e.AptrmassignedDescr)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("APTRMAssignedDescr");
            entity.Property(e => e.AptrminvTransNoPk).HasColumnName("APTRMInvTransNo_PK");
            entity.Property(e => e.AptrmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTRMItemNumber");
            entity.Property(e => e.AptstatusNoFk).HasColumnName("APTStatusNo_FK");
            entity.Property(e => e.ApttrackingEta)
                .HasColumnType("datetime")
                .HasColumnName("APTTrackingETA");
            entity.Property(e => e.ApttrackingNumber).HasColumnName("APTTrackingNumber");
            entity.Property(e => e.ApttransAmt).HasColumnName("APTTransAmt");
            entity.Property(e => e.ApttransDate)
                .HasColumnType("datetime")
                .HasColumnName("APTTransDate");
            entity.Property(e => e.ApttransQty).HasColumnName("APTTransQty");
            entity.Property(e => e.ApttransQtyReceived).HasColumnName("APTTransQtyReceived");
            entity.Property(e => e.ApttransTax).HasColumnName("APTTransTax");
            entity.Property(e => e.ApttransUnitPrice).HasColumnName("APTTransUnitPrice");
            entity.Property(e => e.AptunitActualPrice)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTUnitActualPrice");
            entity.Property(e => e.AptvendorNoFk).HasColumnName("APTVendorNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AptransLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("APTransLOG");

            entity.Property(e => e.AptapheaderNoFk).HasColumnName("APTAPHeaderNo_FK");
            entity.Property(e => e.Aptapponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTAPPONumber");
            entity.Property(e => e.AptapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTApprovedBy");
            entity.Property(e => e.AptapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("APTApprovedDt");
            entity.Property(e => e.AptapprovedUnitCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTApprovedUnitCost");
            entity.Property(e => e.AptassignedUom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("APTAssignedUOM");
            entity.Property(e => e.AptbatchNoFk).HasColumnName("APTBatchNo_FK");
            entity.Property(e => e.AptblanketQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTBlanketQty");
            entity.Property(e => e.Aptbomqty).HasColumnName("APTBOMQty");
            entity.Property(e => e.AptconfirmBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTConfirmBy");
            entity.Property(e => e.AptconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("APTConfirmDt");
            entity.Property(e => e.AptcostAcctNoFk)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("APTCostAcctNo_FK");
            entity.Property(e => e.AptcostCenterNoFk).HasColumnName("APTCostCenterNo_FK");
            entity.Property(e => e.AptcustomerNoFk).HasColumnName("APTCustomerNo_FK");
            entity.Property(e => e.AptdeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("APTDeliveryDate");
            entity.Property(e => e.AptitemNote)
                .HasMaxLength(2000)
                .HasColumnName("APTItemNote");
            entity.Property(e => e.AptmiscItemCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTMiscItemCost");
            entity.Property(e => e.Aptnotes)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("APTNotes");
            entity.Property(e => e.AptransLogPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("APTransLog_PK");
            entity.Property(e => e.AptransNoPk).HasColumnName("APTransNo_PK");
            entity.Property(e => e.AptrawMaterialNoFk).HasColumnName("APTRawMaterialNo_FK");
            entity.Property(e => e.AptreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("APTReceivedDate");
            entity.Property(e => e.AptrefNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTRefNumber");
            entity.Property(e => e.AptrmassignedDescr)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("APTRMAssignedDescr");
            entity.Property(e => e.AptrminvTransNoPk).HasColumnName("APTRMInvTransNo_PK");
            entity.Property(e => e.AptrmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTRMItemNumber");
            entity.Property(e => e.AptstatusNoFk).HasColumnName("APTStatusNo_FK");
            entity.Property(e => e.ApttrackingEta)
                .HasColumnType("datetime")
                .HasColumnName("APTTrackingETA");
            entity.Property(e => e.ApttrackingNumber)
                .IsUnicode(false)
                .HasColumnName("APTTrackingNumber");
            entity.Property(e => e.ApttransAmt).HasColumnName("APTTransAmt");
            entity.Property(e => e.ApttransDate)
                .HasColumnType("datetime")
                .HasColumnName("APTTransDate");
            entity.Property(e => e.ApttransQty).HasColumnName("APTTransQty");
            entity.Property(e => e.ApttransQtyReceived).HasColumnName("APTTransQtyReceived");
            entity.Property(e => e.ApttransTax).HasColumnName("APTTransTax");
            entity.Property(e => e.ApttransUnitPrice).HasColumnName("APTTransUnitPrice");
            entity.Property(e => e.AptunitActualPrice)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("APTUnitActualPrice");
            entity.Property(e => e.AptvendorNoFk).HasColumnName("APTVendorNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Atcomponent>(entity =>
        {
            entity.HasKey(e => e.AtcpnId);

            entity.ToTable("ATComponent");

            entity.Property(e => e.AtcpnId).HasColumnName("ATCpnID");
            entity.Property(e => e.AppTreeFk).HasColumnName("AppTree_FK");
            entity.Property(e => e.AtcpnName)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ATCpnName");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Atctree>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATCTree");

            entity.Property(e => e.AtcpnId).HasColumnName("ATCpnID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.TitleId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TitleID");
        });

        modelBuilder.Entity<Batch>(entity =>
        {
            entity.HasKey(e => e.BatchNoPk);

            entity.ToTable("Batch");

            entity.Property(e => e.BatchNoPk).HasColumnName("BatchNo_PK");
            entity.Property(e => e.BatchNotes).HasColumnType("ntext");
            entity.Property(e => e.BatchStatusNoFk).HasColumnName("BatchStatusNo_FK");
            entity.Property(e => e.BatchTypeNoFk).HasColumnName("BatchTypeNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Bldetail>(entity =>
        {
            entity.HasKey(e => e.BldetailNoPk);

            entity.ToTable("BLDetail");

            entity.HasIndex(e => e.BldheaderNoFk, "IX1BLDetail");

            entity.HasIndex(e => e.BlditemMasterNoFk, "IX2BLDetail");

            entity.Property(e => e.BldetailNoPk).HasColumnName("BLDetailNo_PK");
            entity.Property(e => e.BldcaseCustOrder).HasColumnName("BLDCaseCustOrder");
            entity.Property(e => e.BldcaseQty).HasColumnName("BLDCaseQty");
            entity.Property(e => e.Bldcount).HasColumnName("BLDCount");
            entity.Property(e => e.BldcustProdCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDCustProdCode");
            entity.Property(e => e.BldfginvLotNoFk).HasColumnName("BLDFGInvLotNo_FK");
            entity.Property(e => e.BldheaderNoFk).HasColumnName("BLDHeaderNo_FK");
            entity.Property(e => e.BlditemDesc)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("BLDItemDesc");
            entity.Property(e => e.BlditemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDItem_ID");
            entity.Property(e => e.BlditemMasterNoFk).HasColumnName("BLDItemMasterNo_FK");
            entity.Property(e => e.BldmanLotNumber)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BLDManLotNumber");
            entity.Property(e => e.Bldpack).HasColumnName("BLDPack");
            entity.Property(e => e.BldqtyPerCase).HasColumnName("BLDQtyPerCase");
            entity.Property(e => e.BldshipQty).HasColumnName("BLDShipQty");
            entity.Property(e => e.Bldsku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDSKU");
            entity.Property(e => e.Bldsscc18)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDSSCC18");
            entity.Property(e => e.BldstatusNoFk).HasColumnName("BLDStatusNo_FK");
            entity.Property(e => e.BldunitQty).HasColumnName("BLDUnitQty");
            entity.Property(e => e.Bldupc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDUPC");
            entity.Property(e => e.BldwhsLotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDWhsLotNumber");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<BldetailLog>(entity =>
        {
            entity.HasKey(e => e.BldetailLogPk).HasName("PK_BLDetailLog");

            entity.ToTable("BLDetailLOG");

            entity.Property(e => e.BldetailLogPk).HasColumnName("BLDetailLog_PK");
            entity.Property(e => e.BldcaseCustOrder).HasColumnName("BLDCaseCustOrder");
            entity.Property(e => e.BldcaseQty).HasColumnName("BLDCaseQty");
            entity.Property(e => e.Bldcount).HasColumnName("BLDCount");
            entity.Property(e => e.BldcustProdCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDCustProdCode");
            entity.Property(e => e.BldetailNoPk).HasColumnName("BLDetailNo_PK");
            entity.Property(e => e.BldfginvLotNoFk).HasColumnName("BLDFGInvLotNo_FK");
            entity.Property(e => e.BldheaderNoFk).HasColumnName("BLDHeaderNo_FK");
            entity.Property(e => e.BlditemDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLDItemDesc");
            entity.Property(e => e.BlditemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDItem_ID");
            entity.Property(e => e.BlditemMasterNoFk).HasColumnName("BLDItemMasterNo_FK");
            entity.Property(e => e.BldmanLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDManLotNumber");
            entity.Property(e => e.Bldpack).HasColumnName("BLDPack");
            entity.Property(e => e.BldqtyPerCase).HasColumnName("BLDQtyPerCase");
            entity.Property(e => e.Bldsku)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDSKU");
            entity.Property(e => e.Bldsscc18)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDSSCC18");
            entity.Property(e => e.BldstatusNoFk).HasColumnName("BLDStatusNo_FK");
            entity.Property(e => e.BldunitQty).HasColumnName("BLDUnitQty");
            entity.Property(e => e.Bldupc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDUPC");
            entity.Property(e => e.BldwhsLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLDWhsLotNumber");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Blheader>(entity =>
        {
            entity.HasKey(e => e.BlheaderNoPk);

            entity.ToTable("BLHeader");

            entity.HasIndex(e => e.BlhcustNoFk, "IX1BLHeader");

            entity.HasIndex(e => e.BlhsoheaderNoFk, "IX2BLHeader");

            entity.Property(e => e.BlheaderNoPk).HasColumnName("BLHeaderNo_PK");
            entity.Property(e => e.BlhallocatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHAllocatedBy");
            entity.Property(e => e.BlhallocatedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHAllocatedDate");
            entity.Property(e => e.BlhbilltoNoFk).HasColumnName("BLHBilltoNo_FK");
            entity.Property(e => e.BlhbtediwhsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLHBTEDIwhsID");
            entity.Property(e => e.BlhbtstrAddress1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrAddress1");
            entity.Property(e => e.BlhbtstrAddress2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrAddress2");
            entity.Property(e => e.BlhbtstrAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrAttn");
            entity.Property(e => e.BlhbtstrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrCity");
            entity.Property(e => e.BlhbtstrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrCountry");
            entity.Property(e => e.BlhbtstrEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrEmail");
            entity.Property(e => e.BlhbtstrFax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrFax1");
            entity.Property(e => e.BlhbtstrFax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrFax2");
            entity.Property(e => e.BlhbtstrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrName");
            entity.Property(e => e.BlhbtstrPhone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPhone1");
            entity.Property(e => e.BlhbtstrPhone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPhone2");
            entity.Property(e => e.BlhbtstrPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPhoneExt");
            entity.Property(e => e.BlhbtstrPostal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPostal");
            entity.Property(e => e.BlhbtstrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrState");
            entity.Property(e => e.BlhbtstrZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrZip");
            entity.Property(e => e.BlhchargeTerms).HasColumnName("BLHChargeTerms");
            entity.Property(e => e.Blhcodamount).HasColumnName("BLHCODAmount");
            entity.Property(e => e.Blhcodterms).HasColumnName("BLHCODTerms");
            entity.Property(e => e.Blhconversation).HasColumnName("BLHConversation");
            entity.Property(e => e.BlhcountedBy).HasColumnName("BLHCountedBy");
            entity.Property(e => e.BlhcustCheck).HasColumnName("BLHCustCheck");
            entity.Property(e => e.BlhcustNewPonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHCustNewPONum");
            entity.Property(e => e.BlhcustNoFk).HasColumnName("BLHCustNo_FK");
            entity.Property(e => e.BlhcustPo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHCustPO");
            entity.Property(e => e.BlhcustServInstr)
                .HasColumnType("ntext")
                .HasColumnName("BLHCustServInstr");
            entity.Property(e => e.BlhisShipAll).HasColumnName("BLHIsShipAll");
            entity.Property(e => e.BlhloadedBy).HasColumnName("BLHLoadedBy");
            entity.Property(e => e.BlhpayCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHPayCode");
            entity.Property(e => e.BlhpickupLoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHPickupLoc");
            entity.Property(e => e.BlhprintedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHPrintedBy");
            entity.Property(e => e.BlhprintedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHPrintedDate");
            entity.Property(e => e.Blhpro)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("BLHPRO");
            entity.Property(e => e.BlhrePrintedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHRePrintedBy");
            entity.Property(e => e.BlhrePrintedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHRePrintedDate");
            entity.Property(e => e.BlhscacCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHScacCode");
            entity.Property(e => e.BlhscacName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHScacName");
            entity.Property(e => e.BlhsealNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSealNo");
            entity.Property(e => e.Blhsffob).HasColumnName("BLHSFFOB");
            entity.Property(e => e.BlhshipBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHShipBy");
            entity.Property(e => e.BlhshipDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHShipDate");
            entity.Property(e => e.BlhshiptoNoFk).HasColumnName("BLHShiptoNo_FK");
            entity.Property(e => e.BlhsoheaderNoFk).HasColumnName("BLHSOHeaderNo_FK");
            entity.Property(e => e.Blhsoqty).HasColumnName("BLHSOQty");
            entity.Property(e => e.BlhspcInstr)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("BLHSpcInstr");
            entity.Property(e => e.BlhstatusNoFk).HasColumnName("BLHStatusNo_FK");
            entity.Property(e => e.BlhstediwhsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLHSTEDIwhsID");
            entity.Property(e => e.Blhstfob).HasColumnName("BLHSTFOB");
            entity.Property(e => e.BlhststrAddress1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrAddress1");
            entity.Property(e => e.BlhststrAddress2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrAddress2");
            entity.Property(e => e.BlhststrAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrAttn");
            entity.Property(e => e.BlhststrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrCity");
            entity.Property(e => e.BlhststrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrCountry");
            entity.Property(e => e.BlhststrEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrEmail");
            entity.Property(e => e.BlhststrFax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrFax1");
            entity.Property(e => e.BlhststrFax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrFax2");
            entity.Property(e => e.BlhststrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrName");
            entity.Property(e => e.BlhststrPhone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPhone1");
            entity.Property(e => e.BlhststrPhone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPhone2");
            entity.Property(e => e.BlhststrPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPhoneExt");
            entity.Property(e => e.BlhststrPostal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPostal");
            entity.Property(e => e.BlhststrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrState");
            entity.Property(e => e.BlhststrZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrZip");
            entity.Property(e => e.BlhtotalQty).HasColumnName("BLHTotalQty");
            entity.Property(e => e.BlhtrailerNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BLHTrailerNo");
            entity.Property(e => e.BlhvoidedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHVoidedBy");
            entity.Property(e => e.BlhvoidedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHVoidedDate");
            entity.Property(e => e.BlhwareHouseIns)
                .HasColumnType("ntext")
                .HasColumnName("BLHWareHouseIns");
            entity.Property(e => e.BlhwhshipDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHWHShipDate");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<BlheaderLog>(entity =>
        {
            entity.HasKey(e => e.BlheaderLogPk).HasName("PK_BLHeaderLog");

            entity.ToTable("BLHeaderLOG");

            entity.Property(e => e.BlheaderLogPk).HasColumnName("BLHeaderLog_PK");
            entity.Property(e => e.BlhallocatedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHAllocatedBy");
            entity.Property(e => e.BlhallocatedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHAllocatedDate");
            entity.Property(e => e.BlhbilltoNoFk).HasColumnName("BLHBilltoNo_FK");
            entity.Property(e => e.BlhbtediwhsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLHBTEDIwhsID");
            entity.Property(e => e.BlhbtstrAddress1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrAddress1");
            entity.Property(e => e.BlhbtstrAddress2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrAddress2");
            entity.Property(e => e.BlhbtstrAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrAttn");
            entity.Property(e => e.BlhbtstrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrCity");
            entity.Property(e => e.BlhbtstrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrCountry");
            entity.Property(e => e.BlhbtstrEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrEmail");
            entity.Property(e => e.BlhbtstrFax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrFax1");
            entity.Property(e => e.BlhbtstrFax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrFax2");
            entity.Property(e => e.BlhbtstrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrName");
            entity.Property(e => e.BlhbtstrPhone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPhone1");
            entity.Property(e => e.BlhbtstrPhone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPhone2");
            entity.Property(e => e.BlhbtstrPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPhoneExt");
            entity.Property(e => e.BlhbtstrPostal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrPostal");
            entity.Property(e => e.BlhbtstrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrState");
            entity.Property(e => e.BlhbtstrZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHBTstrZip");
            entity.Property(e => e.BlhchargeTerms).HasColumnName("BLHChargeTerms");
            entity.Property(e => e.Blhcodamount).HasColumnName("BLHCODAmount");
            entity.Property(e => e.Blhcodterms).HasColumnName("BLHCODTerms");
            entity.Property(e => e.BlhcountedBy).HasColumnName("BLHCountedBy");
            entity.Property(e => e.BlhcustCheck).HasColumnName("BLHCustCheck");
            entity.Property(e => e.BlhcustNewPonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHCustNewPONum");
            entity.Property(e => e.BlhcustNoFk).HasColumnName("BLHCustNo_FK");
            entity.Property(e => e.BlhcustPo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHCustPO");
            entity.Property(e => e.BlhcustServInstr)
                .HasColumnType("ntext")
                .HasColumnName("BLHCustServInstr");
            entity.Property(e => e.BlheaderNoPk).HasColumnName("BLHeaderNo_PK");
            entity.Property(e => e.BlhisShipAll).HasColumnName("BLHIsShipAll");
            entity.Property(e => e.BlhloadedBy).HasColumnName("BLHLoadedBy");
            entity.Property(e => e.BlhpayCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHPayCode");
            entity.Property(e => e.BlhpickupLoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHPickupLoc");
            entity.Property(e => e.BlhprintedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHPrintedBy");
            entity.Property(e => e.BlhprintedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHPrintedDate");
            entity.Property(e => e.Blhpro)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("BLHPRO");
            entity.Property(e => e.BlhrePrintedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHRePrintedBy");
            entity.Property(e => e.BlhrePrintedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHRePrintedDate");
            entity.Property(e => e.BlhscacCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHScacCode");
            entity.Property(e => e.BlhscacName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHScacName");
            entity.Property(e => e.BlhsealNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSealNo");
            entity.Property(e => e.Blhsffob).HasColumnName("BLHSFFOB");
            entity.Property(e => e.BlhshipBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHShipBy");
            entity.Property(e => e.BlhshipDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHShipDate");
            entity.Property(e => e.BlhshiptoNoFk).HasColumnName("BLHShiptoNo_FK");
            entity.Property(e => e.BlhsoheaderNoFk).HasColumnName("BLHSOHeaderNo_FK");
            entity.Property(e => e.Blhsoqty).HasColumnName("BLHSOQty");
            entity.Property(e => e.BlhspcInstr)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("BLHSpcInstr");
            entity.Property(e => e.BlhstatusNoFk).HasColumnName("BLHStatusNo_FK");
            entity.Property(e => e.BlhstediwhsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLHSTEDIwhsID");
            entity.Property(e => e.Blhstfob).HasColumnName("BLHSTFOB");
            entity.Property(e => e.BlhststrAddress1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrAddress1");
            entity.Property(e => e.BlhststrAddress2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrAddress2");
            entity.Property(e => e.BlhststrAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrAttn");
            entity.Property(e => e.BlhststrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrCity");
            entity.Property(e => e.BlhststrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrCountry");
            entity.Property(e => e.BlhststrEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrEmail");
            entity.Property(e => e.BlhststrFax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrFax1");
            entity.Property(e => e.BlhststrFax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrFax2");
            entity.Property(e => e.BlhststrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrName");
            entity.Property(e => e.BlhststrPhone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPhone1");
            entity.Property(e => e.BlhststrPhone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPhone2");
            entity.Property(e => e.BlhststrPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPhoneExt");
            entity.Property(e => e.BlhststrPostal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrPostal");
            entity.Property(e => e.BlhststrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrState");
            entity.Property(e => e.BlhststrZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHSTstrZip");
            entity.Property(e => e.BlhtotalQty).HasColumnName("BLHTotalQty");
            entity.Property(e => e.BlhtrailerNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BLHTrailerNo");
            entity.Property(e => e.BlhvoidedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHVoidedBy");
            entity.Property(e => e.BlhvoidedDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHVoidedDate");
            entity.Property(e => e.BlhwareHouseIns)
                .HasColumnType("ntext")
                .HasColumnName("BLHWareHouseIns");
            entity.Property(e => e.BlhwhshipDate)
                .HasColumnType("datetime")
                .HasColumnName("BLHWHShipDate");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Blprint>(entity =>
        {
            entity.HasKey(e => e.BlprintNoPk);

            entity.ToTable("BLPrint");

            entity.Property(e => e.BlprintNoPk).HasColumnName("BLPrintNo_PK");
            entity.Property(e => e.BlpcarrierClass)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLPCarrierClass");
            entity.Property(e => e.BlpcarrierDescr)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLPCarrierDescr");
            entity.Property(e => e.BlpcarrierHazMat).HasColumnName("BLPCarrierHazMat");
            entity.Property(e => e.BlpcarrierHuqty).HasColumnName("BLPCarrierHUQty");
            entity.Property(e => e.BlpcarrierHutype)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLPCarrierHUType");
            entity.Property(e => e.BlpcarrierNmfc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BLPCarrierNMFC");
            entity.Property(e => e.BlpcarrierPkQty).HasColumnName("BLPCarrierPkQty");
            entity.Property(e => e.BlpcarrierPkType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("BLPCarrierPkType");
            entity.Property(e => e.BlpcarrierWeight).HasColumnName("BLPCarrierWeight");
            entity.Property(e => e.BlpcustInfo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BLPCustInfo");
            entity.Property(e => e.BlpcustPallet).HasColumnName("BLPCustPallet");
            entity.Property(e => e.BlpcustPkgCnt).HasColumnName("BLPCustPkgCnt");
            entity.Property(e => e.BlpcustPo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BLPCustPO");
            entity.Property(e => e.BlpcustWeight).HasColumnName("BLPCustWeight");
            entity.Property(e => e.BlpheaderNoFk).HasColumnName("BLPHeaderNo_FK");
            entity.Property(e => e.BlprecortType).HasColumnName("BLPRecortType");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BomVsUsage>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("BOM_vs_Usage");

            entity.Property(e => e.BrlotNum)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRLotNum");
            entity.Property(e => e.BrlotStatus).HasColumnName("BRLotStatus");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DisplayOrder).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.ItemClass)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.RmallocQty).HasColumnName("RMAllocQty");
            entity.Property(e => e.RmallocSubQty)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("RMAllocSubQty");
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.RmqtyAllocated).HasColumnName("RMQtyAllocated");
            entity.Property(e => e.RmqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyInQCInspection");
            entity.Property(e => e.RmqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyOH");
            entity.Property(e => e.RmqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyOrdered");
            entity.Property(e => e.Sodate)
                .HasColumnType("datetime")
                .HasColumnName("SODate");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
            entity.Property(e => e.Sonum).HasColumnName("SONum");
            entity.Property(e => e.Sostatus).HasColumnName("SOStatus");
            entity.Property(e => e.Wuqty)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("WUQty");
        });

        modelBuilder.Entity<BomdetailAllocAddIn>(entity =>
        {
            entity.HasKey(e => e.BomallocAddInHeaderPk).HasName("PK_BOMHeaderAdjust");

            entity.ToTable("BOMDetailAllocAddIn");

            entity.Property(e => e.BomallocAddInHeaderPk).HasColumnName("BOMAllocAddInHeader_PK");
            entity.Property(e => e.AdjQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BomheaderFk).HasColumnName("BOMHeader_FK");
            entity.Property(e => e.Brlot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.RmitemFk).HasColumnName("RMitem_FK");
            entity.Property(e => e.Sonum).HasColumnName("SOnum");

            entity.HasOne(d => d.BomheaderFkNavigation).WithMany(p => p.BomdetailAllocAddIns)
                .HasForeignKey(d => d.BomheaderFk)
                .HasConstraintName("FK_BOMAllocAddIn_BOMHeader");
        });

        modelBuilder.Entity<Bomheader>(entity =>
        {
            entity.HasKey(e => e.BmheaderNoPk);

            entity.ToTable("BOMHeader");

            entity.HasIndex(e => new { e.BmhsodetailNoFk, e.BmhrawMaterialNoFk }, "IX1BOMHeader");

            entity.HasIndex(e => e.RecStatusNoFk, "IX2BOMHeader");

            entity.Property(e => e.BmheaderNoPk).HasColumnName("BMHeaderNo_PK");
            entity.Property(e => e.BmhallocatedQty).HasColumnName("BMHAllocatedQty");
            entity.Property(e => e.BmhaptransNoFk).HasColumnName("BMHAPTransNo_FK");
            entity.Property(e => e.BmhaptransNoFksave).HasColumnName("BMHAPTransNo_FKSave");
            entity.Property(e => e.Bmhbomqty).HasColumnName("BMHBOMQty");
            entity.Property(e => e.BmhcurrAllocated).HasColumnName("BMHCurrAllocated");
            entity.Property(e => e.BmhcurrInQc).HasColumnName("BMHCurrInQC");
            entity.Property(e => e.BmhcurrOh).HasColumnName("BMHCurrOH");
            entity.Property(e => e.BmhcurrOrder)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BMHCurrOrder");
            entity.Property(e => e.BmhcustomerNoFk).HasColumnName("BMHCustomerNo_FK");
            entity.Property(e => e.BmhcustomerSuppplied).HasColumnName("BMHCustomerSuppplied");
            entity.Property(e => e.BmhdeleteAction)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("BMHDeleteAction");
            entity.Property(e => e.BmhdeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("BMHDeliveryDate");
            entity.Property(e => e.BmhextPrice).HasColumnName("BMHExtPrice");
            entity.Property(e => e.Bmhnotes)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("BMHNotes");
            entity.Property(e => e.BmhparentIm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BMHParentIM");
            entity.Property(e => e.BmhpendingNote)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("BMHPendingNote");
            entity.Property(e => e.BmhpurchasedQty).HasColumnName("BMHPurchasedQty");
            entity.Property(e => e.BmhrawMaterialNoFk).HasColumnName("BMHRawMaterialNo_FK");
            entity.Property(e => e.BmhrminvTransNoFk).HasColumnName("BMHRMInvTransNo_FK");
            entity.Property(e => e.BmhrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BMHRMItemNumber");
            entity.Property(e => e.BmhsodetailNoFk).HasColumnName("BMHSODetailNo_FK");
            entity.Property(e => e.BmhsoheaderNoFk).HasColumnName("BMHSOHeaderNo_FK");
            entity.Property(e => e.BmhsopodetailFk).HasColumnName("BMHSOPODetail_FK");
            entity.Property(e => e.BmhstatusNoFk).HasColumnName("BMHStatusNo_FK");
            entity.Property(e => e.BmhunitPrice).HasColumnName("BMHUnitPrice");
            entity.Property(e => e.BmhvendorNoFk).HasColumnName("BMHVendorNo_FK");
            entity.Property(e => e.BmhweighedUp).HasColumnName("BMHWeighedUp");
            entity.Property(e => e.BmhweighedUpQty).HasColumnName("BMHWeighedUpQty");
            entity.Property(e => e.BomprodClassFk).HasColumnName("BOMProdClass_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(2500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Brdetail>(entity =>
        {
            entity.HasKey(e => e.BatchRecordDetailNoPk).HasName("PK_BrDetail");

            entity.ToTable("BRDetail");

            entity.Property(e => e.BatchRecordDetailNoPk).HasColumnName("BatchRecordDetailNo_PK");
            entity.Property(e => e.BrdheaderNoFk).HasColumnName("BRDHeaderNo_FK");
            entity.Property(e => e.BrdlastStageUpdBy)
                .HasMaxLength(50)
                .HasColumnName("BRDLastStageUpdBy");
            entity.Property(e => e.BrdlastStageUpdDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDLastStageUpdDt");
            entity.Property(e => e.BrdlotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRDLotNumber");
            entity.Property(e => e.Brdnotes)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BRDNotes");
            entity.Property(e => e.Brdroom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRDRoom");
            entity.Property(e => e.BrdroomOrder).HasColumnName("BRDRoomOrder");
            entity.Property(e => e.BrdstatusNoFk).HasColumnName("BRDStatusNo_FK");
            entity.Property(e => e.BrdtankBlendingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankBlendingEndDt");
            entity.Property(e => e.BrdtankBlendingId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRDTankBlendingId");
            entity.Property(e => e.BrdtankBlendingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankBlendingStartDt");
            entity.Property(e => e.BrdtankCoatingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankCoatingEndDt");
            entity.Property(e => e.BrdtankCoatingQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("BRDTankCoatingQty");
            entity.Property(e => e.BrdtankCoatingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankCoatingStartDt");
            entity.Property(e => e.BrdtankEncapsulationEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankEncapsulationEndDt");
            entity.Property(e => e.BrdtankEncapsulationQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("BRDTankEncapsulationQty");
            entity.Property(e => e.BrdtankEncapsulationStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankEncapsulationStartDt");
            entity.Property(e => e.BrdtankInspectionEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankInspectionEndDt");
            entity.Property(e => e.BrdtankInspectionHour).HasColumnName("BRDTankInspectionHour");
            entity.Property(e => e.BrdtankInspectionQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("BRDTankInspectionQty");
            entity.Property(e => e.BrdtankInspectionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankInspectionStartDt");
            entity.Property(e => e.BrdtankNumber).HasColumnName("BRDTankNumber");
            entity.Property(e => e.BrdtankNumberSortedKey)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRDTankNumberSortedKey");
            entity.Property(e => e.BrdtankSize).HasColumnName("BRDTankSize");
            entity.Property(e => e.BrdtankSluggingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankSluggingEndDt");
            entity.Property(e => e.BrdtankSluggingPercentage)
                .HasMaxLength(50)
                .HasColumnName("BRDTankSluggingPercentage");
            entity.Property(e => e.BrdtankSluggingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankSluggingStartDt");
            entity.Property(e => e.BrdtankStatus).HasColumnName("BRDTankStatus");
            entity.Property(e => e.BrdtankWeight).HasColumnName("BRDTankWeight");
            entity.Property(e => e.BrdtankWuendDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankWUEndDt");
            entity.Property(e => e.BrdtankWustartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankWUStartDt");
            entity.Property(e => e.BrdweighedUp).HasColumnName("BRDWeighedUp");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BrdetailGroup>(entity =>
        {
            entity.HasKey(e => e.BrdgroupPk);

            entity.ToTable("BRDetailGroup");

            entity.Property(e => e.BrdgroupPk).HasColumnName("BRDGroup_PK");
            entity.Property(e => e.Brdroom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRDRoom");
            entity.Property(e => e.Department)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BrdetailLog>(entity =>
        {
            entity.HasKey(e => e.BrdlogPk);

            entity.ToTable("BRDetailLOG");

            entity.Property(e => e.BrdlogPk).HasColumnName("BRDLog_PK");
            entity.Property(e => e.BrdlotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("BRDLotNumber");
            entity.Property(e => e.BrdtankBlendBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankBlendBy");
            entity.Property(e => e.BrdtankBlendDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankBlendDt");
            entity.Property(e => e.BrdtankBlendEndBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankBlendEndBy");
            entity.Property(e => e.BrdtankBlendEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankBlendEndDt");
            entity.Property(e => e.BrdtankBlendStartBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankBlendStartBy");
            entity.Property(e => e.BrdtankBlendStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankBlendStartDt");
            entity.Property(e => e.BrdtankCoatBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankCoatBy");
            entity.Property(e => e.BrdtankCoatDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankCoatDt");
            entity.Property(e => e.BrdtankEncapBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankEncapBy");
            entity.Property(e => e.BrdtankEncapDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankEncapDt");
            entity.Property(e => e.BrdtankInspectBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankInspectBy");
            entity.Property(e => e.BrdtankInspectDt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankInspectDt");
            entity.Property(e => e.BrdtankNumber).HasColumnName("BRDTankNumber");
            entity.Property(e => e.BrdtankWuby)
                .HasMaxLength(50)
                .HasColumnName("BRDTankWUBy");
            entity.Property(e => e.BrdtankWudt)
                .HasColumnType("datetime")
                .HasColumnName("BRDTankWUDt");
            entity.Property(e => e.BrdtankWuendBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankWUEndBy");
            entity.Property(e => e.BrdtankWustartBy)
                .HasMaxLength(50)
                .HasColumnName("BRDTankWUStartBy");
        });

        modelBuilder.Entity<Brheader>(entity =>
        {
            entity.HasKey(e => e.BatchRecordHeaderNoPk);

            entity.ToTable("BRHeader");

            entity.HasIndex(e => e.BatchRecordId, "BatchRecordId");

            entity.HasIndex(e => e.BrhlotNumber, "C_BRHlotNumber").IsUnique();

            entity.HasIndex(e => e.BrhstatusNoFk, "IX1BRHeader");

            entity.HasIndex(e => e.BrhbatchEncapsulationEndDt, "IX2BRHeader");

            entity.HasIndex(e => e.BrhsoheaderNoFk, "IX3BRHeader");

            entity.HasIndex(e => e.LastUpdDt, "IX4BRHeader");

            entity.HasIndex(e => e.BrhsodetailNoFk, "IX5BRHeader");

            entity.HasIndex(e => new { e.BrhbatchEncapsulationEndDt, e.BrhsoheaderNoFk, e.BatchRecordHeaderNoPk, e.BrhsodetailNoFk, e.BrhlotNumber, e.BrhlotSize, e.LotComment, e.SpComment }, "_dta_index_BRHeader_7_835586115__K44_K7_K1_K6_K8_K10_K82_K81");

            entity.Property(e => e.BatchRecordHeaderNoPk).HasColumnName("BatchRecordHeaderNo_PK");
            entity.Property(e => e.BatchRecordId).HasComment("BR id from Master Batch Record");
            entity.Property(e => e.Bmebatch)
                .HasMaxLength(50)
                .HasColumnName("BMEbatch");
            entity.Property(e => e.BrhalreadyWeighedUp).HasColumnName("BRHAlreadyWeighedUp");
            entity.Property(e => e.BrhbatchBlending).HasColumnName("BRHBatchBlending");
            entity.Property(e => e.BrhbatchBlendingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchBlendingEndDt");
            entity.Property(e => e.BrhbatchBlendingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchBlendingStartDt");
            entity.Property(e => e.BrhbatchCoating).HasColumnName("BRHBatchCoating");
            entity.Property(e => e.BrhbatchCoatingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchCoatingEndDt");
            entity.Property(e => e.BrhbatchCoatingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchCoatingStartDt");
            entity.Property(e => e.BrhbatchCompressing).HasColumnName("BRHBatchCompressing");
            entity.Property(e => e.BrhbatchCompressingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchCompressingEndDt");
            entity.Property(e => e.BrhbatchCompressingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchCompressingStartDt");
            entity.Property(e => e.BrhbatchCountingNsorting).HasColumnName("BRHBatchCountingNSorting");
            entity.Property(e => e.BrhbatchCountingNsortingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchCountingNSortingEndDt");
            entity.Property(e => e.BrhbatchCountingNsortingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchCountingNSortingStartDt");
            entity.Property(e => e.BrhbatchDrying).HasColumnName("BRHBatchDrying");
            entity.Property(e => e.BrhbatchDryingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchDryingEndDt");
            entity.Property(e => e.BrhbatchDryingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchDryingStartDt");
            entity.Property(e => e.BrhbatchEdited).HasColumnName("BRHBatchEdited");
            entity.Property(e => e.BrhbatchEditedDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchEditedDt");
            entity.Property(e => e.BrhbatchEncapsulation).HasColumnName("BRHBatchEncapsulation");
            entity.Property(e => e.BrhbatchEncapsulationEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchEncapsulationEndDt");
            entity.Property(e => e.BrhbatchEncapsulationStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchEncapsulationStartDt");
            entity.Property(e => e.BrhbatchInspection).HasColumnName("BRHBatchInspection");
            entity.Property(e => e.BrhbatchInspectionEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchInspectionEndDt");
            entity.Property(e => e.BrhbatchInspectionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchInspectionStartDt");
            entity.Property(e => e.BrhbatchLabelPrinting).HasColumnName("BRHBatchLabelPrinting");
            entity.Property(e => e.BrhbatchLabelPrintingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchLabelPrintingEndDt");
            entity.Property(e => e.BrhbatchLabelPrintingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchLabelPrintingStartDt");
            entity.Property(e => e.BrhbatchMixing).HasColumnName("BRHBatchMixing");
            entity.Property(e => e.BrhbatchMixingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchMixingEndDt");
            entity.Property(e => e.BrhbatchMixingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchMixingStartDt");
            entity.Property(e => e.BrhbatchPackaging).HasColumnName("BRHBatchPackaging");
            entity.Property(e => e.BrhbatchPackagingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchPackagingEndDt");
            entity.Property(e => e.BrhbatchPackagingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchPackagingStartDt");
            entity.Property(e => e.BrhbatchPolishing).HasColumnName("BRHBatchPolishing");
            entity.Property(e => e.BrhbatchPolishingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchPolishingEndDt");
            entity.Property(e => e.BrhbatchPolishingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchPolishingStartDt");
            entity.Property(e => e.BrhbatchProduction).HasColumnName("BRHBatchProduction");
            entity.Property(e => e.BrhbatchProductionEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchProductionEndDt");
            entity.Property(e => e.BrhbatchProductionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchProductionStartDt");
            entity.Property(e => e.BrhbatchQareleased).HasColumnName("BRHBatchQAReleased");
            entity.Property(e => e.BrhbatchQareleasedEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchQAReleasedEndDt");
            entity.Property(e => e.BrhbatchQareleasedStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchQAReleasedStartDt");
            entity.Property(e => e.BrhbatchRecordTypeNoFk).HasColumnName("BRHBatchRecordTypeNo_FK");
            entity.Property(e => e.BrhbatchReleased2Prod).HasColumnName("BRHBatchReleased2Prod");
            entity.Property(e => e.BrhbatchReleased2ProdEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchReleased2ProdEndDt");
            entity.Property(e => e.BrhbatchReleased2ProdStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchReleased2ProdStartDt");
            entity.Property(e => e.BrhbatchWeighedUp).HasColumnName("BRHBatchWeighedUp");
            entity.Property(e => e.BrhbatchWeighedUpEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchWeighedUpEndDt");
            entity.Property(e => e.BrhbatchWeighedUpStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHBatchWeighedUpStartDt");
            entity.Property(e => e.Brhbr2productionDate)
                .HasColumnType("datetime")
                .HasColumnName("BRHBR2ProductionDate");
            entity.Property(e => e.Brhbr2productionFlag).HasColumnName("BRHBR2ProductionFlag");
            entity.Property(e => e.BrhcoatedQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRHCoatedQty");
            entity.Property(e => e.Brhcoating).HasColumnName("BRHCoating");
            entity.Property(e => e.BrhconvertedFromLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRHConvertedFromLotNumber");
            entity.Property(e => e.BrhdueDate).HasColumnName("BRHDueDate");
            entity.Property(e => e.BrhencapsulatedQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRHEncapsulatedQty");
            entity.Property(e => e.Brhenteric).HasColumnName("BRHEnteric");
            entity.Property(e => e.BrhgelMixing).HasColumnName("BRHGelMixing");
            entity.Property(e => e.BrhgelMixingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHGelMixingEndDt");
            entity.Property(e => e.BrhgelMixingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHGelMixingStartDt");
            entity.Property(e => e.BrhinspectedQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRHInspectedQty");
            entity.Property(e => e.BrhisShipmentStart).HasColumnName("BRHIsShipmentStart");
            entity.Property(e => e.BrhlatestProdStatus).HasColumnName("BRHLatestProdStatus");
            entity.Property(e => e.BrhlatestProdStatusDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHLatestProdStatusDt");
            entity.Property(e => e.BrhlotActualWeight).HasColumnName("BRHLotActualWeight");
            entity.Property(e => e.BrhlotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRHLotNumber");
            entity.Property(e => e.BrhlotNumberSortedKey)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRHLotNumberSortedKey");
            entity.Property(e => e.BrhlotSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRHLotSize");
            entity.Property(e => e.BrhlotTotalWeight).HasColumnName("BRHLotTotalWeight");
            entity.Property(e => e.BrhmanualCreated).HasColumnName("BRHManualCreated");
            entity.Property(e => e.BrhnewLotSize).HasColumnName("BRHNewLotSize");
            entity.Property(e => e.Brhnotes)
                .IsUnicode(false)
                .HasColumnName("BRHNotes");
            entity.Property(e => e.BrhpackagingCompleted).HasColumnName("BRHPackagingCompleted");
            entity.Property(e => e.BrhproductionCompleted).HasColumnName("BRHProductionCompleted");
            entity.Property(e => e.BrhproductionCompletedDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHProductionCompletedDt");
            entity.Property(e => e.BrhproductionPackedSize).HasColumnName("BRHProductionPackedSize");
            entity.Property(e => e.BrhproductionReleasedEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHProductionReleasedEndDt");
            entity.Property(e => e.BrhproductionReleasedFlag).HasColumnName("BRHProductionReleasedFlag");
            entity.Property(e => e.BrhproductionReleasedSize).HasColumnName("BRHProductionReleasedSize");
            entity.Property(e => e.BrhproductionReleasedStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHProductionReleasedStartDt");
            entity.Property(e => e.BrhproductionScheduled).HasColumnName("BRHProductionScheduled");
            entity.Property(e => e.BrhproductionScheduledEndDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHProductionScheduledEndDt");
            entity.Property(e => e.BrhproductionScheduledStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHProductionScheduledStartDt");
            entity.Property(e => e.BrhreclaimedQty).HasColumnName("BRHReclaimedQty");
            entity.Property(e => e.BrhshipmentSize).HasColumnName("BRHShipmentSize");
            entity.Property(e => e.BrhshipmentStartDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHShipmentStartDt");
            entity.Property(e => e.BrhsodetailNoFk).HasColumnName("BRHSODetailNo_FK");
            entity.Property(e => e.BrhsoheaderNoFk).HasColumnName("BRHSOHeaderNo_FK");
            entity.Property(e => e.BrhstatusNoFk).HasColumnName("BRHStatusNo_FK");
            entity.Property(e => e.BrhstockItem).HasColumnName("BRHStockItem");
            entity.Property(e => e.Bversion).HasColumnName("BVersion");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LotComment)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Lot_Comment");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.SpComment)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("SP_Comment");
        });

        modelBuilder.Entity<BrmasterBatchSize>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BRMasterBatchSize");

            entity.Property(e => e.BrmasterBatchSizePk)
                .ValueGeneratedOnAdd()
                .HasColumnName("BRMasterBatchSize_PK");
            entity.Property(e => e.BrmbatchSize)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("BRMBatchSize");
            entity.Property(e => e.Brmimver)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("BRMIMver");
            entity.Property(e => e.BrmmasterHdrFk).HasColumnName("BRMMasterHdr_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BrmasterBlendInstr>(entity =>
        {
            entity.HasKey(e => e.BrmasterBlendInstrPk);

            entity.ToTable("BRMasterBlendInstr");

            entity.Property(e => e.BrmasterBlendInstrPk).HasColumnName("BRMasterBlendInstr_PK");
            entity.Property(e => e.BrmbmasterHeaderFk).HasColumnName("BRMBMasterHeader_FK");
            entity.Property(e => e.BrmbproductTypeFk).HasColumnName("BRMBProductType_FK");
            entity.Property(e => e.BrmbstepInstr)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BRMBStepInstr");
            entity.Property(e => e.BrmbstepNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRMBStepNo");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");

            entity.HasOne(d => d.BrmbmasterHeaderFkNavigation).WithMany(p => p.BrmasterBlendInstrs)
                .HasForeignKey(d => d.BrmbmasterHeaderFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BRMasterBlendInstr_BRMasterHeader1");
        });

        modelBuilder.Entity<BrmasterCoatFml>(entity =>
        {
            entity.HasKey(e => e.BrmasterCoatFormulaPk);

            entity.ToTable("BRMasterCoatFml");

            entity.Property(e => e.BrmasterCoatFormulaPk).HasColumnName("BRMasterCoatFormula_PK");
            entity.Property(e => e.BrmcfitemCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMCFItemCode");
            entity.Property(e => e.BrmcfitemDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRMCFItemDesc");
            entity.Property(e => e.BrmcfitemFk).HasColumnName("BRMCFItem_FK");
            entity.Property(e => e.BrmcfitemNum)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("BRMCFItemNum");
            entity.Property(e => e.BrmcfmasterHeaderFk).HasColumnName("BRMCFMasterHeader_FK");
            entity.Property(e => e.BrmcforderSort).HasColumnName("BRMCFOrderSort");
            entity.Property(e => e.BrmcfunitWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRMCFUnitWt");
            entity.Property(e => e.BrmcoatFmlHdrFk).HasColumnName("BRMCoatFmlHdr_FK");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");

            entity.HasOne(d => d.BrmcfmasterHeaderFkNavigation).WithMany(p => p.BrmasterCoatFmls)
                .HasForeignKey(d => d.BrmcfmasterHeaderFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BRMasterCoatFml_BRMasterHeader");
        });

        modelBuilder.Entity<BrmasterCoatInstr>(entity =>
        {
            entity.HasKey(e => e.BrmasterCoatInstrPk).HasName("PK_BRMasterCoatInstr_1");

            entity.ToTable("BRMasterCoatInstr");

            entity.Property(e => e.BrmasterCoatInstrPk).HasColumnName("BRMasterCoatInstr_PK");
            entity.Property(e => e.BrmcmasterHeaderFk).HasColumnName("BRMCMasterHeader_FK");
            entity.Property(e => e.BrmcproductTypeFk).HasColumnName("BRMCProductType_FK");
            entity.Property(e => e.BrmcstepInstr)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BRMCStepInstr");
            entity.Property(e => e.BrmcstepNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRMCStepNo");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BrmasterCompoundingInstr>(entity =>
        {
            entity.HasKey(e => e.BrmasterCmpInstrPk);

            entity.ToTable("BRMasterCompoundingInstr");

            entity.Property(e => e.BrmasterCmpInstrPk).HasColumnName("BRMasterCmpInstr_PK");
            entity.Property(e => e.BrmcmpMasterHeaderFk).HasColumnName("BRMCmpMasterHeader_FK");
            entity.Property(e => e.BrmcmpProductTypeFk).HasColumnName("BRMCmpProductType_FK");
            entity.Property(e => e.BrmcmpStepInstr)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BRMCmpStepInstr");
            entity.Property(e => e.BrmcmpStepNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRMCmpStepNo");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BrmasterEncap>(entity =>
        {
            entity.HasKey(e => e.BrmasterEncPk);

            entity.ToTable("BRMasterEncap");

            entity.Property(e => e.BrmasterEncPk).HasColumnName("BRMasterEnc_PK");
            entity.Property(e => e.BrmencAlertMax).HasColumnName("BRMEncAlertMax");
            entity.Property(e => e.BrmencAlertMin).HasColumnName("BRMEncAlertMin");
            entity.Property(e => e.BrmencAlertRngType).HasColumnName("BRMEncAlertRngType");
            entity.Property(e => e.BrmencControlMax).HasColumnName("BRMEncControlMax");
            entity.Property(e => e.BrmencControlMin).HasColumnName("BRMEncControlMin");
            entity.Property(e => e.BrmencControlRngType).HasColumnName("BRMEncControlRngType");
            entity.Property(e => e.BrmencMasterHeaderFk).HasColumnName("BRMEncMasterHeader_FK");
            entity.Property(e => e.BrmencParamId).HasColumnName("BRMEncParamID");
            entity.Property(e => e.BrmencRange2Max).HasColumnName("BRMEncRange2Max");
            entity.Property(e => e.BrmencRange2Min).HasColumnName("BRMEncRange2Min");
            entity.Property(e => e.BrmencRange3Max).HasColumnName("BRMEncRange3Max");
            entity.Property(e => e.BrmencRange3Min).HasColumnName("BRMEncRange3Min");
            entity.Property(e => e.BrmencRangeMax).HasColumnName("BRMEncRangeMax");
            entity.Property(e => e.BrmencRangeMin).HasColumnName("BRMEncRangeMin");
            entity.Property(e => e.BrmencTarget).HasColumnName("BRMEncTarget");
            entity.Property(e => e.BrmencTarget2).HasColumnName("BRMEncTarget2");
            entity.Property(e => e.BrmencTarget3).HasColumnName("BRMEncTarget3");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BrmasterHeader>(entity =>
        {
            entity.HasKey(e => e.BrmasterHeaderNoPk);

            entity.ToTable("BRMasterHeader");

            entity.Property(e => e.BrmasterHeaderNoPk).HasColumnName("BRMasterHeaderNo_PK");
            entity.Property(e => e.Brmencremarks)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("BRMENCRemarks");
            entity.Property(e => e.BrmhalertPct).HasColumnName("BRMHAlertPct");
            entity.Property(e => e.BrmhalertTargetWt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHAlertTargetWt");
            entity.Property(e => e.BrmhbatchUomFk).HasColumnName("BRMHBatchUOM_FK");
            entity.Property(e => e.BrmhcapsuleCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHCapsuleCode");
            entity.Property(e => e.BrmhcoatCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHCoatCode");
            entity.Property(e => e.BrmhcoatWtGain)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRMHCoatWtGain");
            entity.Property(e => e.Brmhcoating)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHCoating");
            entity.Property(e => e.Brmhcolor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHColor");
            entity.Property(e => e.BrmhctrlPct).HasColumnName("BRMHCtrlPct");
            entity.Property(e => e.BrmhctrlTargetWt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHCtrlTargetWt");
            entity.Property(e => e.BrmhcustomerNoFk).HasColumnName("BRMHCustomerNo_FK");
            entity.Property(e => e.Brmhdisintegrate)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRMHDisintegrate");
            entity.Property(e => e.BrmhemptyCapsuleWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRMHEmptyCapsuleWt");
            entity.Property(e => e.BrmhfgitemMasterNoFk).HasColumnName("BRMHFGItemMasterNo_FK");
            entity.Property(e => e.BrmhfgitemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("BRMHFGItemMasterVer");
            entity.Property(e => e.BrmhformatVer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHFormatVer");
            entity.Property(e => e.BrmhgelColor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHGelColor");
            entity.Property(e => e.BrmhgelType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHGelType");
            entity.Property(e => e.Brmhhardness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHHardness");
            entity.Property(e => e.BrmhhardnessRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHHardnessRange");
            entity.Property(e => e.BrmhhardnessTarget)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHHardnessTarget");
            entity.Property(e => e.BrmhmachineSpeed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHMachineSpeed");
            entity.Property(e => e.Brmhpack).HasColumnName("BRMHPack");
            entity.Property(e => e.BrmhpillCavity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHPillCavity");
            entity.Property(e => e.BrmhpillCavitySize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHPillCavitySize");
            entity.Property(e => e.BrmhproductTypeNoFk).HasColumnName("BRMHProductTypeNo_FK");
            entity.Property(e => e.Brmhremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRMHRemarks");
            entity.Property(e => e.BrmhribbonRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHRibbonRange");
            entity.Property(e => e.BrmhribbonThickness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHRibbonThickness");
            entity.Property(e => e.BrmhsampledBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHSampledBy");
            entity.Property(e => e.BrmhsampledDate)
                .HasColumnType("datetime")
                .HasColumnName("BRMHSampledDate");
            entity.Property(e => e.BrmhservingSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRMHServingSize");
            entity.Property(e => e.Brmhshape)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHShape");
            entity.Property(e => e.Brmhsize)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRMHSize");
            entity.Property(e => e.BrmhstatusNoFk).HasColumnName("BRMHStatusNo_FK");
            entity.Property(e => e.Brmhthickness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHThickness");
            entity.Property(e => e.BrmhthicknessRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHThicknessRange");
            entity.Property(e => e.BrmhthicknessTarget)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMHThicknessTarget");
            entity.Property(e => e.BrmhunitWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRMHUnitWt");
            entity.Property(e => e.BrmhunitWtTarget)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRMHUnitWtTarget");
            entity.Property(e => e.Brmhversion)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("BRMHVersion");
            entity.Property(e => e.Brmqcsremarks)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("BRMQCSRemarks");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDcoat2FmlHdrFk).HasColumnName("RnDCoat2FmlHdr_FK");
            entity.Property(e => e.RnDcoat3FmlHdrFk).HasColumnName("RnDCoat3FmlHdr_FK");
            entity.Property(e => e.RnDcoatFmlHdrFk).HasColumnName("RnDCoatFmlHdr_FK");
            entity.Property(e => e.Uspproduct).HasColumnName("USPproduct");
        });

        modelBuilder.Entity<BrmasterInstr>(entity =>
        {
            entity.HasKey(e => e.BrmasterInstrPk);

            entity.ToTable("BRMasterInstr");

            entity.Property(e => e.BrmasterInstrPk).HasColumnName("BRMasterInstr_PK");
            entity.Property(e => e.BrminstrCategory)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRMInstrCategory");
            entity.Property(e => e.Brminstruction)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BRMInstruction");
            entity.Property(e => e.BrmproductTypeFk).HasColumnName("BRMProductType_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
        });

        modelBuilder.Entity<BrmasterSgwupInstr>(entity =>
        {
            entity.HasKey(e => e.BrmasterSgwupInstrPk);

            entity.ToTable("BRMasterSGWUpInstr");

            entity.Property(e => e.BrmasterSgwupInstrPk).HasColumnName("BRMasterSGWUpInstr_PK");
            entity.Property(e => e.BrmsgwupMasterHeaderFk).HasColumnName("BRMSGWUpMasterHeader_FK");
            entity.Property(e => e.BrmsgwupProductTypeFk).HasColumnName("BRMSGWUpProductType_FK");
            entity.Property(e => e.BrmsgwupStepInstr)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BRMSGWUpStepInstr");
            entity.Property(e => e.BrmsgwupStepNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRMSGWUpStepNo");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BrmasterWupInstr>(entity =>
        {
            entity.HasKey(e => e.BrmasterWupInstrPk);

            entity.ToTable("BRMasterWUpInstr");

            entity.Property(e => e.BrmasterWupInstrPk).HasColumnName("BRMasterWUpInstr_PK");
            entity.Property(e => e.BrmwupMasterHeaderFk).HasColumnName("BRMWUpMasterHeader_FK");
            entity.Property(e => e.BrmwupProductTypeFk).HasColumnName("BRMWUpProductType_FK");
            entity.Property(e => e.BrmwupStepInstr)
                .IsRequired()
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("BRMWUpStepInstr");
            entity.Property(e => e.BrmwupStepNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BRMWUpStepNo");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<BrprodRelease>(entity =>
        {
            entity.HasKey(e => e.BrrelPk);

            entity.ToTable("BRProdRelease");

            entity.Property(e => e.BrrelPk).HasColumnName("BRRel_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrprstatusFk).HasColumnName("BRPRStatus_FK");
            entity.Property(e => e.BrrelBrhFk).HasColumnName("BRRelBRH_FK");
            entity.Property(e => e.BrrelCustomerFk).HasColumnName("BRRelCustomer_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DefectiveQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MfgDate).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("PalletID");
            entity.Property(e => e.ProdQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QaverifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAVerifiedBy");
            entity.Property(e => e.QaverifiedDt)
                .HasColumnType("datetime")
                .HasColumnName("QAVerifiedDt");
            entity.Property(e => e.QtyPerBox).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.ReleaseQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ReleasedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BrproductionStatusLog>(entity =>
        {
            entity.HasKey(e => e.BrplnoPk).HasName("PK_ProductionStatusLog");

            entity.ToTable("BRProductionStatusLOG");

            entity.Property(e => e.BrplnoPk).HasColumnName("BRPLNo_PK");
            entity.Property(e => e.BrhplbrheaderNoFk).HasColumnName("BRHPLBRHeaderNo_FK");
            entity.Property(e => e.BrhplmanLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRHPLManLot");
            entity.Property(e => e.Brhplnotes).HasColumnName("BRHPLNotes");
            entity.Property(e => e.BrhpltaskCodeNoFk).HasColumnName("BRHPLTaskCodeNo_FK");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Carrier>(entity =>
        {
            entity.HasKey(e => e.CarrierCode)
                .HasName("PK_SCAC")
                .IsClustered(false);

            entity.ToTable("Carrier");

            entity.Property(e => e.CarrierCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierAddress1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CarrierAddress2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CarrierCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierCorporateEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierCountry)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierCreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CarrierFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierGeneralContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierLastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierLastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.CarrierName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierPrefix)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CarrierProCurrent)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CarrierProNoEnd)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CarrierProNoStart)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CarrierState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierStatusDt).HasColumnType("datetime");
            entity.Property(e => e.CarrierTypeEdi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CarrierTypeEDI");
            entity.Property(e => e.CarrierWebAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarrierZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Scac)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SCAC");
        });

        modelBuilder.Entity<CleanLabelTemplate>(entity =>
        {
            entity.HasKey(e => e.CleanLabelPk);

            entity.ToTable("CleanLabelTemplate");

            entity.Property(e => e.CleanLabelPk).HasColumnName("CleanLabel_PK");
            entity.Property(e => e.Cldesc)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("CLDesc");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CoaspecTemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("COASpecTemplate");

            entity.Property(e => e.Analysis)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Method).HasMaxLength(250);
            entity.Property(e => e.SectionId).HasColumnName("SectionID");
            entity.Property(e => e.SectionTitle)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Specification).HasMaxLength(250);
        });

        modelBuilder.Entity<CodeCategory>(entity =>
        {
            entity.HasKey(e => e.CodeCategoryPk).IsClustered(false);

            entity.ToTable("CodeCategory");

            entity.Property(e => e.CodeCategoryPk)
                .ValueGeneratedNever()
                .HasColumnName("CodeCategory_PK");
            entity.Property(e => e.CcatCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCatCreatedBy");
            entity.Property(e => e.CcatCreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("CCatCreatedDt");
            entity.Property(e => e.CcatDescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CCatDescription");
            entity.Property(e => e.CcatLastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCatLastUpdBy");
            entity.Property(e => e.CcatLastUpdDt)
                .HasColumnType("datetime")
                .HasColumnName("CCatLastUpdDt");
            entity.Property(e => e.CcatName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCatName");
            entity.Property(e => e.CcatStatusDt)
                .HasColumnType("datetime")
                .HasColumnName("CCatStatusDt");
            entity.Property(e => e.MsreplSynctranTs)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("msrepl_synctran_ts");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<CodeType>(entity =>
        {
            entity.HasKey(e => e.CodeTypeNoPk);

            entity.ToTable("CodeType");

            entity.Property(e => e.CodeTypeNoPk)
                .ValueGeneratedNever()
                .HasColumnName("CodeTypeNo_PK");
            entity.Property(e => e.CodeCategoryFk).HasColumnName("CodeCategory_FK");
            entity.Property(e => e.CtypeCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTypeCreatedBy");
            entity.Property(e => e.CtypeCreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("CTypeCreatedDt");
            entity.Property(e => e.CtypeDescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CTypeDescription");
            entity.Property(e => e.CtypeFg).HasColumnName("CTypeFG");
            entity.Property(e => e.CtypeLastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTypeLastUpdBy");
            entity.Property(e => e.CtypeLastUpdDt)
                .HasColumnType("datetime")
                .HasColumnName("CTypeLastUpdDt");
            entity.Property(e => e.CtypeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTypeName");
            entity.Property(e => e.CtypeRm).HasColumnName("CTypeRM");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<ColorCode>(entity =>
        {
            entity.HasKey(e => e.ColorCodeNoPk);

            entity.HasIndex(e => e.ColorCodeNoPk, "ColorCodes").IsUnique();

            entity.Property(e => e.ColorCodeNoPk).HasColumnName("ColorCodeNo_PK");
            entity.Property(e => e.Ccdescription)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CCDescription");
            entity.Property(e => e.Ccname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCName");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompanyIdPk).IsClustered(false);

            entity.ToTable("Company");

            entity.Property(e => e.CompanyIdPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyID_PK");
            entity.Property(e => e.CompanyAddr1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyAddr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillAddr1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillAttn)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillFax1)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillFax2)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillPhone1)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillPhone2)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillPhonex1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillPhonex2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyBillPostalCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBillZipCode)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CompanyBilladdr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyContactPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyFax1)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyGs1code)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyGS1Code");
            entity.Property(e => e.CompanyMonthlyPed)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyMonthlyPED");
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyPhone1)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyPhone2)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CompanyPostalCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvAddr1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvAddr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvAttention)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvPhone1Ext)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvPhone2Ext)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvScac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyRcvSCAC");
            entity.Property(e => e.CompanyRcvState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRcvZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanySpecialShippingInstruction)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CompanyState)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.CompanyUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyURL");
            entity.Property(e => e.CompanyWeeklyPed)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompanyWeeklyPED");
            entity.Property(e => e.CompanyWhsNoFk).HasColumnName("CompanyWhsNo_FK");
            entity.Property(e => e.CompanyZipCode)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Gln)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("GLN");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<CompanyLocation>(entity =>
        {
            entity.HasKey(e => e.RpaddrNoPk).HasName("PK_RPLocationAddress");

            entity.ToTable("CompanyLocation");

            entity.Property(e => e.RpaddrNoPk).HasColumnName("RPAddrNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Iprange)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IPRange");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Prefix)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Rpaddress1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPAddress1");
            entity.Property(e => e.Rpaddress2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPAddress2");
            entity.Property(e => e.Rpattn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPAttn");
            entity.Property(e => e.Rpcity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPCity");
            entity.Property(e => e.RpcorpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPCorpName");
            entity.Property(e => e.Rpcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPCountry");
            entity.Property(e => e.Rpemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RPEmail");
            entity.Property(e => e.Rpfax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPFax1");
            entity.Property(e => e.Rpfax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPFax2");
            entity.Property(e => e.Rploc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPLoc");
            entity.Property(e => e.Rpphone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPPhone1");
            entity.Property(e => e.Rpphone1Ext)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPPhone1Ext");
            entity.Property(e => e.Rpphone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPPhone2");
            entity.Property(e => e.RppostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPPostalCode");
            entity.Property(e => e.Rpstate)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPState");
            entity.Property(e => e.RpzipCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPZipCode");
        });

        modelBuilder.Entity<CostDetailBulkMatEstimate>(entity =>
        {
            entity.HasKey(e => e.CostDetaiBulkMatlNoPk);

            entity.ToTable("CostDetailBulkMatEstimate");

            entity.Property(e => e.CostDetaiBulkMatlNoPk).HasColumnName("CostDetaiBulkMatlNo_PK");
            entity.Property(e => e.CdbmcostHeaderNoFk).HasColumnName("CDBMCostHeaderNo_FK");
            entity.Property(e => e.CdbmcostPerKilogram).HasColumnName("CDBMCostPerKilogram");
            entity.Property(e => e.CdbmcostPerThousand).HasColumnName("CDBMCostPerThousand");
            entity.Property(e => e.CdbmrawMaterialNoFk).HasColumnName("CDBMRawMaterialNo_FK");
            entity.Property(e => e.CdbmrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDBMRMItemNumber");
            entity.Property(e => e.CdbmweightPerThousand).HasColumnName("CDBMWeightPerThousand");
            entity.Property(e => e.Cdrmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CDRMDescription");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Moqcharge)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("MOQCharge");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailBulkMatEstimateLog>(entity =>
        {
            entity.HasKey(e => e.CdbmlogPk);

            entity.ToTable("CostDetailBulkMatEstimateLOG");

            entity.Property(e => e.CdbmlogPk).HasColumnName("CDBMLog_PK");
            entity.Property(e => e.CdbmcostHeaderNoFk).HasColumnName("CDBMCostHeaderNo_FK");
            entity.Property(e => e.CdbmcostPerKilogram).HasColumnName("CDBMCostPerKilogram");
            entity.Property(e => e.CdbmcostPerThousand).HasColumnName("CDBMCostPerThousand");
            entity.Property(e => e.CdbmrawMaterialNoFk).HasColumnName("CDBMRawMaterialNo_FK");
            entity.Property(e => e.CdbmrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDBMRMItemNumber");
            entity.Property(e => e.CdbmweightPerThousand).HasColumnName("CDBMWeightPerThousand");
            entity.Property(e => e.Cdrmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CDRMDescription");
            entity.Property(e => e.CostDetaiBulkMatlNoPk).HasColumnName("CostDetaiBulkMatlNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailCapsuleMatEstimate>(entity =>
        {
            entity.HasKey(e => e.CostDetailCapsuleMatNoPk).HasName("PK_CostDetailCapsuleEstimate");

            entity.ToTable("CostDetailCapsuleMatEstimate");

            entity.Property(e => e.CostDetailCapsuleMatNoPk).HasColumnName("CostDetailCapsuleMatNo_PK");
            entity.Property(e => e.CdcmcapsulingNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDCMCapsulingNumber");
            entity.Property(e => e.CdcmcostHeaderNoFk).HasColumnName("CDCMCostHeaderNo_FK");
            entity.Property(e => e.CdcmextendedCost).HasColumnName("CDCMExtendedCost");
            entity.Property(e => e.CdcmitemMasterNoFk).HasColumnName("CDCMItemMasterNo_FK");
            entity.Property(e => e.CdcmquoteHeaderNoFk).HasColumnName("CDCMQuoteHeaderNo_FK");
            entity.Property(e => e.CdcmrawMaterialNoFk).HasColumnName("CDCMRawMaterialNo_FK");
            entity.Property(e => e.CdcmrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDCMRMItemNumber");
            entity.Property(e => e.Cdcmrmqty).HasColumnName("CDCMRMQty");
            entity.Property(e => e.CdcmshellItemMasterNoFk).HasColumnName("CDCMShellItemMasterNo_FK");
            entity.Property(e => e.CdcmsocapsulingNoFk).HasColumnName("CDCMSOCapsulingNo_FK");
            entity.Property(e => e.CdcmsoheaderNoFk).HasColumnName("CDCMSOHeaderNo_FK");
            entity.Property(e => e.CdcmunitCost).HasColumnName("CDCMUnitCost");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Moqcharge)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("MOQCharge");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailCoatingMatEstimate>(entity =>
        {
            entity.HasKey(e => e.CostDetailCoatingMatNoPk);

            entity.ToTable("CostDetailCoatingMatEstimate");

            entity.Property(e => e.CostDetailCoatingMatNoPk).HasColumnName("CostDetailCoatingMatNo_PK");
            entity.Property(e => e.CdcmcostHeaderNoFk).HasColumnName("CDCMCostHeaderNo_FK");
            entity.Property(e => e.CdcmextendedCost).HasColumnName("CDCMExtendedCost");
            entity.Property(e => e.CdcmitemMasterNoFk).HasColumnName("CDCMItemMasterNo_FK");
            entity.Property(e => e.CdcmquoteHeaderNoFk).HasColumnName("CDCMQuoteHeaderNo_FK");
            entity.Property(e => e.CdcmrawMaterialNoFk).HasColumnName("CDCMRawMaterialNo_FK");
            entity.Property(e => e.CdcmrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDCMRMItemNumber");
            entity.Property(e => e.Cdcmrmqty).HasColumnName("CDCMRMQty");
            entity.Property(e => e.CdcmshellItemMasterNoFk).HasColumnName("CDCMShellItemMasterNo_FK");
            entity.Property(e => e.CdcmsoheaderNoFk).HasColumnName("CDCMSOHeaderNo_FK");
            entity.Property(e => e.CdcmunitCost).HasColumnName("CDCMUnitCost");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Moqcharge)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("MOQCharge");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailGelatinMatEstimate>(entity =>
        {
            entity.HasKey(e => e.CostDetailGelatinMatNoPk).HasName("PK_CostDetailGeletingMatEstimate");

            entity.ToTable("CostDetailGelatinMatEstimate");

            entity.Property(e => e.CostDetailGelatinMatNoPk).HasColumnName("CostDetailGelatinMatNo_PK");
            entity.Property(e => e.CdgmcostHeaderNoFk).HasColumnName("CDGMCostHeaderNo_FK");
            entity.Property(e => e.CdgmextendedCost).HasColumnName("CDGMExtendedCost");
            entity.Property(e => e.CdgmitemMasterNoFk).HasColumnName("CDGMItemMasterNo_FK");
            entity.Property(e => e.CdgmpercentageQtyPerKg).HasColumnName("CDGMPercentageQtyPerKG");
            entity.Property(e => e.CdgmquoteHeaderNoFk).HasColumnName("CDGMQuoteHeaderNo_FK");
            entity.Property(e => e.CdgmrawMaterialNoFk).HasColumnName("CDGMRawMaterialNo_FK");
            entity.Property(e => e.CdgmrmcostPerKg).HasColumnName("CDGMRMCostPerKG");
            entity.Property(e => e.CdgmrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDGMRMItemNumber");
            entity.Property(e => e.CdgmrmqtyPerHourPerKg).HasColumnName("CDGMRMQtyPerHourPerKG");
            entity.Property(e => e.CdgmsogelatingNoFk).HasColumnName("CDGMSOGelatingNo_FK");
            entity.Property(e => e.CdgmsoheaderNoFk).HasColumnName("CDGMSOHeaderNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Moqcharge)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("MOQCharge");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailGelatinUsedEstimate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CostDetailGelatinUsedEstimate");

            entity.Property(e => e.GelThickness).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MachineType)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PctGelLost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Rpm)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("RPM");
            entity.Property(e => e.RunKgPerHour).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<CostDetailLaborActual>(entity =>
        {
            entity.HasKey(e => e.ActualLaborNoPk);

            entity.ToTable("CostDetailLaborActual");

            entity.Property(e => e.ActualLaborNoPk).HasColumnName("ActualLaborNo_PK");
            entity.Property(e => e.ActualHeaderNoFk).HasColumnName("ActualHeaderNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LaborCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LaborHrs).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LaborRates).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MachineCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MachineHrs).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.MachineRates).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.WorkTaskCategoryNoFk).HasColumnName("WorkTaskCategoryNo_FK");
            entity.Property(e => e.WorkTaskName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkTypeNoFk).HasColumnName("WorkTypeNo_FK");

            entity.HasOne(d => d.ActualHeaderNoFkNavigation).WithMany(p => p.CostDetailLaborActuals)
                .HasForeignKey(d => d.ActualHeaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CostDetailLaborActual_CostHeaderActual");
        });

        modelBuilder.Entity<CostDetailLaborEstimate>(entity =>
        {
            entity.HasKey(e => e.CostDetailLaborNoPk);

            entity.ToTable("CostDetailLaborEstimate");

            entity.Property(e => e.CostDetailLaborNoPk).HasColumnName("CostDetailLaborNo_PK");
            entity.Property(e => e.CdlcostHeaderNoFk).HasColumnName("CDLCostHeaderNo_FK");
            entity.Property(e => e.CdllaborCost).HasColumnName("CDLLaborCost");
            entity.Property(e => e.CdllaborHrs).HasColumnName("CDLLaborHrs");
            entity.Property(e => e.CdllaborRates).HasColumnName("CDLLaborRates");
            entity.Property(e => e.CdlmachineCost).HasColumnName("CDLMachineCost");
            entity.Property(e => e.CdlmachineHrs).HasColumnName("CDLMachineHrs");
            entity.Property(e => e.CdlmachineRates).HasColumnName("CDLMachineRates");
            entity.Property(e => e.CdlworkTaskCategoryNoFk).HasColumnName("CDLWorkTaskCategoryNo_FK");
            entity.Property(e => e.CdlworkTaskName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDLWorkTaskName");
            entity.Property(e => e.CdlworkTypeNoFk).HasColumnName("CDLWorkTypeNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailOverHeadActual>(entity =>
        {
            entity.HasKey(e => e.ActualOverHeadNoPk);

            entity.ToTable("CostDetailOverHeadActual");

            entity.Property(e => e.ActualOverHeadNoPk).HasColumnName("ActualOverHeadNo_PK");
            entity.Property(e => e.ActualHeaderNoFk).HasColumnName("ActualHeaderNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MetaDataName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PercentOfBulkCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RatesPer1000).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).IsUnicode(false);

            entity.HasOne(d => d.ActualHeaderNoFkNavigation).WithMany(p => p.CostDetailOverHeadActuals)
                .HasForeignKey(d => d.ActualHeaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CostDetailOverHeadActual_CostHeaderActual");
        });

        modelBuilder.Entity<CostDetailOverHeadEstimate>(entity =>
        {
            entity.HasKey(e => e.CostDetailOverHeadNoPk);

            entity.ToTable("CostDetailOverHeadEstimate");

            entity.Property(e => e.CostDetailOverHeadNoPk).HasColumnName("CostDetailOverHeadNo_PK");
            entity.Property(e => e.CdohcostHeaderNoFk).HasColumnName("CDOHCostHeaderNo_FK");
            entity.Property(e => e.CdohdirectFlag).HasColumnName("CDOHDirectFlag");
            entity.Property(e => e.CdohmetaDataName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDOHMetaDataName");
            entity.Property(e => e.CdohorderEntry)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CDOHOrderEntry");
            entity.Property(e => e.CdohpercentOfBulkCost).HasColumnName("CDOHPercentOfBulkCost");
            entity.Property(e => e.CdohratesPer1000).HasColumnName("CDOHRatesPer1000");
            entity.Property(e => e.CdohratesPerKg).HasColumnName("CDOHRatesPerKg");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CostDetailPackagingEstimateLogRemove>(entity =>
        {
            entity.HasKey(e => e.CostDetaiPkgLogPk).HasName("PK_CostDetailPackagingEstimateLOG");

            entity.ToTable("CostDetailPackagingEstimateLOG-REMOVE");

            entity.Property(e => e.CostDetaiPkgLogPk).HasColumnName("CostDetaiPkgLOG_PK");
            entity.Property(e => e.CdbulkCostPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDBulkCostPerPkgUnit");
            entity.Property(e => e.CdcountPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDCountPerPkgUnit");
            entity.Property(e => e.CdcpnCostPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDCpnCostPerPkgUnit");
            entity.Property(e => e.CdestNumPkgUnit).HasColumnName("CDEstNumPkgUnit");
            entity.Property(e => e.CdextraCostPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDExtraCostPerPkgUnit");
            entity.Property(e => e.CdpcostHeaderNoFk).HasColumnName("CDPCostHeaderNo_FK");
            entity.Property(e => e.CdpkgCodeTypeNoFk).HasColumnName("CDPkgCodeTypeNo_FK");
            entity.Property(e => e.CdpkgUnitDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CDPkgUnitDesc");
            entity.Property(e => e.CostDetaiPkgNoPk).HasColumnName("CostDetaiPkgNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
        });

        modelBuilder.Entity<CostDetailPackagingEstimateRemove>(entity =>
        {
            entity.HasKey(e => e.CostDetaiPkgNoPk).HasName("PK_CostDetailPackagingEstimate");

            entity.ToTable("CostDetailPackagingEstimate-REMOVE");

            entity.Property(e => e.CostDetaiPkgNoPk).HasColumnName("CostDetaiPkgNo_PK");
            entity.Property(e => e.CdbulkCostPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDBulkCostPerPkgUnit");
            entity.Property(e => e.CdcostHeaderNoFk).HasColumnName("CDCostHeaderNo_FK");
            entity.Property(e => e.CdcountPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDCountPerPkgUnit");
            entity.Property(e => e.CdcpnCostPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDCpnCostPerPkgUnit");
            entity.Property(e => e.CdestNumPkgUnit).HasColumnName("CDEstNumPkgUnit");
            entity.Property(e => e.CdextraCostPerPkgUnit)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("CDExtraCostPerPkgUnit");
            entity.Property(e => e.CdpkgCodeTypeNoFk).HasColumnName("CDPkgCodeTypeNo_FK");
            entity.Property(e => e.CdpkgUnitDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CDPkgUnitDesc");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);

            entity.HasOne(d => d.CdcostHeaderNoFkNavigation).WithMany(p => p.CostDetailPackagingEstimateRemoves)
                .HasForeignKey(d => d.CdcostHeaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CostDetailPackagingEstimate_CostHeaderEstimate");
        });

        modelBuilder.Entity<CostDetailPkgTemplateRemove>(entity =>
        {
            entity.HasKey(e => e.CostDetailPkgEstPk).HasName("PK_CostDetailPkgTemplate");

            entity.ToTable("CostDetailPkgTemplate-REMOVE");

            entity.Property(e => e.CostDetailPkgEstPk).HasColumnName("CostDetailPkgEst_PK");
            entity.Property(e => e.PkgCodeTypeNoFk).HasColumnName("PkgCodeTypeNo_FK");
            entity.Property(e => e.PkgCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.PkgDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CostHeaderActual>(entity =>
        {
            entity.HasKey(e => e.ActualHdrPk);

            entity.ToTable("CostHeaderActual");

            entity.Property(e => e.ActualHdrPk).HasColumnName("ActualHdr_PK");
            entity.Property(e => e.ActBulkLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActBulkOvrHdPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActBulkPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActBulkYieldPct).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActCoatLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActCoatPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActEmptyCapLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActEmptyCapPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActGelLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActGelPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EstBulkLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstBulkOvrHdPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstBulkPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstCoatLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstCoatPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstEmptyCapLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstEmptyCapPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstGelLaborPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstGelPerThousand).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<CostHeaderEstimate>(entity =>
        {
            entity.HasKey(e => e.CostHeaderNoPk);

            entity.ToTable("CostHeaderEstimate");

            entity.Property(e => e.CostHeaderNoPk)
                .ValueGeneratedNever()
                .HasColumnName("CostHeaderNo_PK");
            entity.Property(e => e.ChblisterLevelLaborCost).HasColumnName("CHBlisterLevelLaborCost");
            entity.Property(e => e.ChblisterLevelOhcost).HasColumnName("CHBlisterLevelOHCost");
            entity.Property(e => e.ChblisterLevelPkgCompCost).HasColumnName("CHBlisterLevelPkgCompCost");
            entity.Property(e => e.ChblisterLevelShrinkageCost).HasColumnName("CHBlisterLevelShrinkageCost");
            entity.Property(e => e.ChblisterLevelShrinkagePercent).HasColumnName("CHBlisterLevelShrinkagePercent");
            entity.Property(e => e.ChblisterLevelTotalCost).HasColumnName("CHBlisterLevelTotalCost");
            entity.Property(e => e.ChblisterLevelTotalCostAdd2TotalCost).HasColumnName("CHBlisterLevelTotalCostAdd2TotalCost");
            entity.Property(e => e.ChbottlingLevelLaborCost).HasColumnName("CHBottlingLevelLaborCost");
            entity.Property(e => e.ChbottlingLevelOhcost).HasColumnName("CHBottlingLevelOHCost");
            entity.Property(e => e.ChbottlingLevelPkgCompCost).HasColumnName("CHBottlingLevelPkgCompCost");
            entity.Property(e => e.ChbottlingLevelShrinkageCost).HasColumnName("CHBottlingLevelShrinkageCost");
            entity.Property(e => e.ChbottlingLevelShrinkagePercent).HasColumnName("CHBottlingLevelShrinkagePercent");
            entity.Property(e => e.ChbottlingLevelTotalCost).HasColumnName("CHBottlingLevelTotalCost");
            entity.Property(e => e.ChbottlingLevelTotalCostAdd2TotalCost).HasColumnName("CHBottlingLevelTotalCostAdd2TotalCost");
            entity.Property(e => e.ChbulkLevelLaborCost).HasColumnName("CHBulkLevelLaborCost");
            entity.Property(e => e.ChbulkLevelOhcost).HasColumnName("CHBulkLevelOHCost");
            entity.Property(e => e.ChbulkLevelRmcost).HasColumnName("CHBulkLevelRMCost");
            entity.Property(e => e.ChbulkLevelTotalCost).HasColumnName("CHBulkLevelTotalCost");
            entity.Property(e => e.ChbulkLevelYieldPercent).HasColumnName("CHBulkLevelYieldPercent");
            entity.Property(e => e.ChbulkLevelYieldShrinkageCost).HasColumnName("CHBulkLevelYieldShrinkageCost");
            entity.Property(e => e.ChcapsulingLevelLaborCost).HasColumnName("CHCapsulingLevelLaborCost");
            entity.Property(e => e.ChcapsulingLevelOhcost).HasColumnName("CHCapsulingLevelOHCost");
            entity.Property(e => e.ChcapsulingLevelPkgCompCost).HasColumnName("CHCapsulingLevelPkgCompCost");
            entity.Property(e => e.ChcapsulingLevelShrinkageCost).HasColumnName("CHCapsulingLevelShrinkageCost");
            entity.Property(e => e.ChcapsulingLevelShrinkagePercent).HasColumnName("CHCapsulingLevelShrinkagePercent");
            entity.Property(e => e.ChcapsulingLevelTotalCost).HasColumnName("CHCapsulingLevelTotalCost");
            entity.Property(e => e.ChcapsulingLevelTotalCostAdd2TotalCost).HasColumnName("CHCapsulingLevelTotalCostAdd2TotalCost");
            entity.Property(e => e.ChchosenMarginLevel).HasColumnName("CHChosenMarginLevel");
            entity.Property(e => e.ChcoatingLevelCoatingRmcost).HasColumnName("CHCoatingLevelCoatingRMCost");
            entity.Property(e => e.ChcoatingLevelLaborCost).HasColumnName("CHCoatingLevelLaborCost");
            entity.Property(e => e.ChcoatingLevelOhcost).HasColumnName("CHCoatingLevelOHCost");
            entity.Property(e => e.ChcoatingLevelShrinkageCost).HasColumnName("CHCoatingLevelShrinkageCost");
            entity.Property(e => e.ChcoatingLevelShrinkagePercent).HasColumnName("CHCoatingLevelShrinkagePercent");
            entity.Property(e => e.ChcoatingLevelTotalCost).HasColumnName("CHCoatingLevelTotalCost");
            entity.Property(e => e.ChcoatingLevelTotalCostAdd2TotalCost).HasColumnName("CHCoatingLevelTotalCostAdd2TotalCost");
            entity.Property(e => e.ChgelThickness)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CHGelThickness");
            entity.Property(e => e.ChgelatinLevelGelatinRmcost).HasColumnName("CHGelatinLevelGelatinRMCost");
            entity.Property(e => e.ChgelatinLevelLaborCost).HasColumnName("CHGelatinLevelLaborCost");
            entity.Property(e => e.ChgelatinLevelOhcost).HasColumnName("CHGelatinLevelOHCost");
            entity.Property(e => e.ChgelatinLevelShrinkageCost).HasColumnName("CHGelatinLevelShrinkageCost");
            entity.Property(e => e.ChgelatinLevelShrinkagePercent).HasColumnName("CHGelatinLevelShrinkagePercent");
            entity.Property(e => e.ChgelatinLevelTotalCost).HasColumnName("CHGelatinLevelTotalCost");
            entity.Property(e => e.ChgelatinLevelTotalCostAdd2TotalCost).HasColumnName("CHGelatinLevelTotalCostAdd2TotalCost");
            entity.Property(e => e.ChgelatinRpm).HasColumnName("CHGelatinRPM");
            entity.Property(e => e.ChhandCartoningLaborCost).HasColumnName("CHHandCartoningLaborCost");
            entity.Property(e => e.ChhandCartoningTotalCost).HasColumnName("CHHandCartoningTotalCost");
            entity.Property(e => e.ChhandCartoningTotalCostAdd2TotalCost).HasColumnName("CHHandCartoningTotalCostAdd2TotalCost");
            entity.Property(e => e.ChitemMasterNoFk).HasColumnName("CHItemMasterNo_FK");
            entity.Property(e => e.ChitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CHItemNumber");
            entity.Property(e => e.ChpkgLevelLaborCost).HasColumnName("CHPkgLevelLaborCost");
            entity.Property(e => e.ChpkgLevelOhcost).HasColumnName("CHPkgLevelOHCost");
            entity.Property(e => e.ChpkgLevelPkgCompCost).HasColumnName("CHPkgLevelPkgCompCost");
            entity.Property(e => e.ChpkgLevelTotalCost).HasColumnName("CHPkgLevelTotalCost");
            entity.Property(e => e.ChpkgLevelTotalCostAdd2TotalCost).HasColumnName("CHPkgLevelTotalCostAdd2TotalCost");
            entity.Property(e => e.ChquoteHeaderNoFk).HasColumnName("CHQuoteHeaderNo_FK");
            entity.Property(e => e.ChsoheaderNoFk).HasColumnName("CHSOHeaderNo_FK");
            entity.Property(e => e.ChtotalCostMargin1Percent).HasColumnName("CHTotalCostMargin1Percent");
            entity.Property(e => e.ChtotalCostMargin2Percent).HasColumnName("CHTotalCostMargin2Percent");
            entity.Property(e => e.ChtotalCostMargin3Percent).HasColumnName("CHTotalCostMargin3Percent");
            entity.Property(e => e.ChtotalCostPerThousand).HasColumnName("CHTotalCostPerThousand");
            entity.Property(e => e.ChtotalCostPlusBlisterCard).HasColumnName("CHTotalCostPlusBlisterCard");
            entity.Property(e => e.ChtotalCostPlusBottling).HasColumnName("CHTotalCostPlusBottling");
            entity.Property(e => e.ChtotalCostPlusCapsuling).HasColumnName("CHTotalCostPlusCapsuling");
            entity.Property(e => e.ChtotalCostPlusCoating).HasColumnName("CHTotalCostPlusCoating");
            entity.Property(e => e.ChtotalCostPlusGelatin).HasColumnName("CHTotalCostPlusGelatin");
            entity.Property(e => e.ChtotalCostPlusHandCartoning).HasColumnName("CHTotalCostPlusHandCartoning");
            entity.Property(e => e.ChtotalCostPlusMargin1).HasColumnName("CHTotalCostPlusMargin1");
            entity.Property(e => e.ChtotalCostPlusMargin2).HasColumnName("CHTotalCostPlusMargin2");
            entity.Property(e => e.ChtotalCostPlusMargin3).HasColumnName("CHTotalCostPlusMargin3");
            entity.Property(e => e.ChtotalCostPlusMarginPerThousand).HasColumnName("CHTotalCostPlusMarginPerThousand");
            entity.Property(e => e.ChtotalCostPlusPackaging).HasColumnName("CHTotalCostPlusPackaging");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CountryCode>(entity =>
        {
            entity.HasKey(e => e.CountryCodePk);

            entity.Property(e => e.CountryCodePk)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CountryCode_PK");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<CpnCategory>(entity =>
        {
            entity.ToTable("CpnCategory");

            entity.Property(e => e.Bomrequired).HasColumnName("BOMrequired");
            entity.Property(e => e.CpnCategory1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CpnCategory");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerNoPk);

            entity.ToTable("Customer");

            entity.HasIndex(e => e.CustomerName, "IX_CustomerName");

            entity.HasIndex(e => new { e.CustomerNoPk, e.CustomerName }, "_dta_index_Customer_7_288772136__K1_K5");

            entity.Property(e => e.CustomerNoPk)
                .HasMaxLength(50)
                .HasColumnName("CustomerNo_PK");
            entity.Property(e => e.Akacustomer)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AKACustomer");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Csrep)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CSRep");
            entity.Property(e => e.CustEdiDuns)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustEDI_DUNS");
            entity.Property(e => e.CustEdiVendorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustEDI_VendorID");
            entity.Property(e => e.CustomerAccountQb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerAccountQB");
            entity.Property(e => e.CustomerAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerAddr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillAttn)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillEmail)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBilladdr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBusTypeFk).HasColumnName("CustomerBusType_FK");
            entity.Property(e => e.CustomerCarrierAcctNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerContactEmail)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CustomerContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCreditLimit).HasColumnType("money");
            entity.Property(e => e.CustomerEdiId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CustomerEDI_ID");
            entity.Property(e => e.CustomerEmail)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFedTaxId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerFedTaxID");
            entity.Property(e => e.CustomerManufactureNumber)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerMonthlyPed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerMonthlyPED");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerNameQb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerNameQB");
            entity.Property(e => e.CustomerPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToAddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToAddress2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToAttention)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToEmail)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToScac)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerSortedKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerSource)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerSpecialShippingInstruction).HasMaxLength(2500);
            entity.Property(e => e.CustomerState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerURL");
            entity.Property(e => e.CustomerWeeklyPed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerWeeklyPED");
            entity.Property(e => e.CustomerZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LeadCodeFk)
                .HasMaxLength(10)
                .HasColumnName("LeadCode_FK");
            entity.Property(e => e.Phone1Ext)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Phone2Ext)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProdLabel)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.SalesRep)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalesRep2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TempCsrep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TempCSRep");
            entity.Property(e => e.TempCsrepExpFromDt).HasColumnName("TempCSRepExpFromDt");
            entity.Property(e => e.TempCsrepExpToDt).HasColumnName("TempCSRepExpToDt");
            entity.Property(e => e.WebName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.WebPassword)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerCarrier>(entity =>
        {
            entity.HasKey(e => e.CustomerCarrierNoPk);

            entity.Property(e => e.CustomerCarrierNoPk).HasColumnName("CustomerCarrierNo_PK");
            entity.Property(e => e.CcaccountNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCAccountNo");
            entity.Property(e => e.CccustomerNoFk).HasColumnName("CCCustomerNo_FK");
            entity.Property(e => e.CcscacnoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CCSCACNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CustomerDoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk);

            entity.ToTable("CustomerDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerNoFk).HasColumnName("CustomerNo_FK");
            entity.Property(e => e.ItemDocDirectory)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerGtin>(entity =>
        {
            entity.ToTable("CustomerGTIN");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.Address4).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.Dc).HasColumnName("DC");
            entity.Property(e => e.Duns)
                .HasMaxLength(255)
                .HasColumnName("DUNS");
            entity.Property(e => e.Gln)
                .HasMaxLength(255)
                .HasColumnName("GLN");
            entity.Property(e => e.Manager).HasMaxLength(255);
            entity.Property(e => e.Phone).HasMaxLength(255);
            entity.Property(e => e.State).HasMaxLength(255);
            entity.Property(e => e.StoreName).HasMaxLength(255);
            entity.Property(e => e.StoreNo).HasMaxLength(255);
            entity.Property(e => e.StoreType).HasMaxLength(255);
            entity.Property(e => e.Zip).HasMaxLength(255);
        });

        modelBuilder.Entity<CustomerLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CustomerLOG");

            entity.Property(e => e.Akacustomer)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("AKACustomer");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Csrep)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CSRep");
            entity.Property(e => e.CustEdiDuns)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustEDI_DUNS");
            entity.Property(e => e.CustEdiVendorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustEDI_VendorID");
            entity.Property(e => e.CustomerAccountQb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerAccountQB");
            entity.Property(e => e.CustomerAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerAddr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillAttn)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBillZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBilladdr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBusTypeFk).HasColumnName("CustomerBusType_FK");
            entity.Property(e => e.CustomerCarrierAcctNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerContactEmail)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CustomerContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCreditLimit).HasColumnType("money");
            entity.Property(e => e.CustomerEdiId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CustomerEDI_ID");
            entity.Property(e => e.CustomerEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerFedTaxId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerFedTaxID");
            entity.Property(e => e.CustomerManufactureNumber)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerMonthlyPed)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerMonthlyPED");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerNameQb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerNameQB");
            entity.Property(e => e.CustomerNoPk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerNo_PK");
            entity.Property(e => e.CustomerPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToAddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToAddress2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToAttention)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToScac)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerShipToZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerSortedKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerSource)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerSpecialShippingInstruction).HasColumnType("ntext");
            entity.Property(e => e.CustomerState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerURL");
            entity.Property(e => e.CustomerWeeklyPed)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustomerWeeklyPED");
            entity.Property(e => e.CustomerZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LeadCodeFk)
                .HasMaxLength(10)
                .HasColumnName("LeadCode_FK");
            entity.Property(e => e.Phone1Ext)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Phone2Ext)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProdLabel)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.SalesRep)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalesRep2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WebName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.WebPassword)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerLogBookDetail>(entity =>
        {
            entity.HasKey(e => e.CustLogDetailNoPk);

            entity.ToTable("CustomerLogBookDetail");

            entity.Property(e => e.CustLogDetailNoPk).HasColumnName("CustLogDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustLogHdrFk).HasColumnName("CustLogHdr_FK");
            entity.Property(e => e.DlogDate)
                .HasColumnType("datetime")
                .HasColumnName("DLogDate");
            entity.Property(e => e.DlogNote)
                .IsRequired()
                .HasColumnType("ntext")
                .HasColumnName("DLogNote");
            entity.Property(e => e.DlogUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DLogUser");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");

            entity.HasOne(d => d.CustLogHdrFkNavigation).WithMany(p => p.CustomerLogBookDetails)
                .HasForeignKey(d => d.CustLogHdrFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerLogBookDetail_CustomerLogBookHeader");
        });

        modelBuilder.Entity<CustomerLogBookHeader>(entity =>
        {
            entity.HasKey(e => e.CustLogHeaderNoPk).HasName("PK_CustomerLogBook");

            entity.ToTable("CustomerLogBookHeader");

            entity.Property(e => e.CustLogHeaderNoPk).HasColumnName("CustLogHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("CustomerNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LogDate).HasColumnType("datetime");
            entity.Property(e => e.LogNote)
                .IsRequired()
                .HasColumnType("ntext");
            entity.Property(e => e.LogUser)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");

            entity.HasOne(d => d.CustomerNoFkNavigation).WithMany(p => p.CustomerLogBookHeaders)
                .HasForeignKey(d => d.CustomerNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerLogBook_CustomerLogBook");
        });

        modelBuilder.Entity<CustomerQuote>(entity =>
        {
            entity.HasKey(e => e.CustQuoteNoPk);

            entity.ToTable("CustomerQuote");

            entity.Property(e => e.CustQuoteNoPk)
                .ValueGeneratedNever()
                .HasColumnName("CustQuoteNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerNoFk).HasColumnName("CustomerNo_FK");
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.Formulas)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.SaleRep)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerRef>(entity =>
        {
            entity.HasKey(e => e.CustRefNoPk);

            entity.ToTable("CustomerRef");

            entity.Property(e => e.CustRefNoPk).HasColumnName("CustRefNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustRefAcct)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefAddr)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CustRefCustomerNoFk).HasColumnName("CustRefCustomerNo_FK");
            entity.Property(e => e.CustRefFax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefTypeNoFk).HasColumnName("CustRefTypeNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<CustomerRefLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CustomerRefLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustRefAcct)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefAddr)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CustRefCustomerNoFk).HasColumnName("CustRefCustomerNo_FK");
            entity.Property(e => e.CustRefFax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefNoPk).HasColumnName("CustRefNo_PK");
            entity.Property(e => e.CustRefPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustRefTypeNoFk).HasColumnName("CustRefTypeNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepartmentNoPk);

            entity.Property(e => e.DepartmentNoPk).HasColumnName("DepartmentNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DeptDescription)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DeptEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DeptName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsForPo).HasColumnName("isForPO");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Device>(entity =>
        {
            entity.HasKey(e => e.Sku);

            entity.ToTable("Device");

            entity.Property(e => e.Sku)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Compatibility)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DeviceName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DeviceOhqty).HasColumnName("DeviceOHQty");
            entity.Property(e => e.DeviceType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Memory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MfgName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Processor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StorageGb)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("StorageGB");
        });

        modelBuilder.Entity<DevicePhyInvByLocation>(entity =>
        {
            entity.HasKey(e => e.DeviceLocNoPk);

            entity.ToTable("DevicePhyInvByLocation");

            entity.Property(e => e.DeviceLocNoPk).HasColumnName("DeviceLocNo_PK");
            entity.Property(e => e.AssetNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Location)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.Sku)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<DocTemplate>(entity =>
        {
            entity.ToTable("DocTemplate");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocCategory)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.DocCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
        });

        modelBuilder.Entity<Dtproperty>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.Property }).HasName("pk_dtproperties");

            entity.ToTable("dtproperties");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Property)
                .HasMaxLength(64)
                .IsUnicode(false)
                .HasColumnName("property");
            entity.Property(e => e.Lvalue)
                .HasColumnType("image")
                .HasColumnName("lvalue");
            entity.Property(e => e.Objectid).HasColumnName("objectid");
            entity.Property(e => e.Uvalue)
                .HasMaxLength(255)
                .HasColumnName("uvalue");
            entity.Property(e => e.Value)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("value");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<Edipartner>(entity =>
        {
            entity.HasKey(e => e.PartnerPk);

            entity.ToTable("EDIPartners");

            entity.Property(e => e.PartnerPk).HasColumnName("Partner_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PartnerId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PartnerID");
            entity.Property(e => e.PartnerName)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.UseSscc).HasColumnName("UseSSCC");
        });

        modelBuilder.Entity<EmailQueue>(entity =>
        {
            entity.ToTable("EmailQueue");

            entity.Property(e => e.CcRecipients)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Cc_recipients");
            entity.Property(e => e.EmailBody)
                .IsUnicode(false)
                .HasColumnName("Email_body");
            entity.Property(e => e.EmailSubject)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Email_Subject");
            entity.Property(e => e.QueueTime).HasColumnType("datetime");
            entity.Property(e => e.Recipients)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SentTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmailWhitelist>(entity =>
        {
            entity.HasKey(e => e.EmailPk);

            entity.ToTable("EmailWhitelist");

            entity.Property(e => e.EmailPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Email_PK");
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerNoFk).HasColumnName("CustomerNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Technician)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VendorNoFk).HasColumnName("VendorNo_FK");
        });

        modelBuilder.Entity<Fgcoa>(entity =>
        {
            entity.HasKey(e => e.FgcoaPk);

            entity.ToTable("FGCOA");

            entity.Property(e => e.FgcoaPk).HasColumnName("FGCoa_PK");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgcoaFolder)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGCoaFolder");
            entity.Property(e => e.FgcoaItemFk).HasColumnName("FGCoaItem_FK");
            entity.Property(e => e.FgcoaItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGCoaItemID");
            entity.Property(e => e.FgcoaLotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGCoaLotNumber");
            entity.Property(e => e.FgdocumentType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGDocumentType");
            entity.Property(e => e.ItemDocDirectory).HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<Fgcoadetail>(entity =>
        {
            entity.HasKey(e => e.FgcoadetailPk).HasName("PK_FinishGoodCOADetail");

            entity.ToTable("FGCOADetail");

            entity.Property(e => e.FgcoadetailPk).HasColumnName("FGCOADetail_PK");
            entity.Property(e => e.Analysis)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgcoaheaderFk).HasColumnName("FGCOAHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Method)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Reference)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.Result)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.RmcodeFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode_FK");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
            entity.Property(e => e.Specification)
                .HasMaxLength(2500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgcoadetailLog>(entity =>
        {
            entity.HasKey(e => e.FgcoadetailLogPk).HasName("PK_FGCOADetailLog");

            entity.ToTable("FGCOADetailLOG");

            entity.Property(e => e.FgcoadetailLogPk).HasColumnName("FGCOADetailLog_PK");
            entity.Property(e => e.Analysis)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgcoadetailPk).HasColumnName("FGCOADetail_PK");
            entity.Property(e => e.FgcoaheaderFk).HasColumnName("FGCOAHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Method)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Reference)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.Result)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.RmcodeFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode_FK");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
            entity.Property(e => e.Specification)
                .HasMaxLength(2500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fgcoaformula>(entity =>
        {
            entity.HasKey(e => e.FgcoaformulaPk).HasName("PK_FinishGoodCOAFormula");

            entity.ToTable("FGCOAFormula");

            entity.Property(e => e.FgcoaformulaPk).HasColumnName("FGCOAFormula_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgcoaheaderFk).HasColumnName("FGCOAHeader_FK");
            entity.Property(e => e.Label)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PctOver).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.UnitWt).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<FgcoaformulaLog>(entity =>
        {
            entity.HasKey(e => e.FgcoaformulaLogPk).HasName("PK_FGCOAFormulaLog");

            entity.ToTable("FGCOAFormulaLOG");

            entity.Property(e => e.FgcoaformulaLogPk).HasColumnName("FGCOAFormulaLog_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgcoaformulaPk).HasColumnName("FGCOAFormula_PK");
            entity.Property(e => e.FgcoaheaderFk).HasColumnName("FGCOAHeader_FK");
            entity.Property(e => e.Label)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PercentOver).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.UnitWt).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<Fgcoaheader>(entity =>
        {
            entity.HasKey(e => e.FgcoaheaderPk).HasName("PK_FinishGoodCOAHeader");

            entity.ToTable("FGCOAHeader");

            entity.Property(e => e.FgcoaheaderPk).HasColumnName("FGCOAHeader_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CoaissueDate)
                .HasColumnType("datetime")
                .HasColumnName("COAIssueDate");
            entity.Property(e => e.Coaversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COAversion");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustCode).HasMaxLength(250);
            entity.Property(e => e.ExpiredIn).HasMaxLength(50);
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imcolor)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMcolor");
            entity.Property(e => e.Imdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.ImgelColor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMGelColor");
            entity.Property(e => e.Imsize)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMsize");
            entity.Property(e => e.Imversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMVersion");
            entity.Property(e => e.IntlDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PkgBatch).HasMaxLength(50);
            entity.Property(e => e.PkgDate).HasMaxLength(50);
            entity.Property(e => e.ProdExpDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProdMfgDate).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.ServingSize).HasMaxLength(50);
        });

        modelBuilder.Entity<FgcoaheaderLog>(entity =>
        {
            entity.HasKey(e => e.FgcoaheaderLogPk).HasName("PK_FGCOAHeaderLog");

            entity.ToTable("FGCOAHeaderLOG");

            entity.Property(e => e.FgcoaheaderLogPk).HasColumnName("FGCOAHeaderLog_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CoaissueDate)
                .HasColumnType("datetime")
                .HasColumnName("COAIssueDate");
            entity.Property(e => e.Coaversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("COAversion");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustCode).HasMaxLength(250);
            entity.Property(e => e.ExpiredIn).HasMaxLength(50);
            entity.Property(e => e.FgcoaheaderPk).HasColumnName("FGCOAHeader_PK");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imcolor)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMcolor");
            entity.Property(e => e.Imdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.ImgelColor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMGelColor");
            entity.Property(e => e.Imsize)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMsize");
            entity.Property(e => e.Imversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMVersion");
            entity.Property(e => e.IntlDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PkgBatch).HasMaxLength(50);
            entity.Property(e => e.PkgDate).HasMaxLength(50);
            entity.Property(e => e.ProdExpDate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProdMfgDate).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.ServingSize).HasMaxLength(50);
        });

        modelBuilder.Entity<Fgcoatemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGCOATemplate");

            entity.Property(e => e.Analysis)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Method).HasMaxLength(250);
            entity.Property(e => e.SectionId).HasColumnName("SectionID");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
            entity.Property(e => e.Specification).HasMaxLength(250);
        });

        modelBuilder.Entity<FgcoatemplateRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGCOATemplate-REMOVE");

            entity.Property(e => e.Analysis)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Method).HasMaxLength(250);
            entity.Property(e => e.Specification).HasMaxLength(250);
        });

        modelBuilder.Entity<Fgformula>(entity =>
        {
            entity.HasKey(e => e.FormulaNoPk).HasName("PK_IMRelationShip");

            entity.ToTable("FGFormula");

            entity.Property(e => e.FormulaNoPk).HasColumnName("FormulaNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FormulaItemMasterNoFk).HasColumnName("FormulaItemMasterNo_FK");
            entity.Property(e => e.FormulaLabelClaim)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FormulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormulaRawMaterialNoFk).HasColumnName("FormulaRawMaterialNo_FK");
            entity.Property(e => e.FormulaRmcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormulaRMCustomerNo_FK");
            entity.Property(e => e.FormulaRmqty).HasColumnName("FormulaRMQty");
            entity.Property(e => e.FormulaUomnoFk).HasColumnName("FormulaUOMNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(2500);
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.RmitemNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNo");
            entity.Property(e => e.ShellItemMasterNoFk).HasColumnName("ShellItemMasterNo_FK");
        });

        modelBuilder.Entity<FgformulaLog>(entity =>
        {
            entity.HasKey(e => e.FglformulaPk).HasName("PK_FGFormulaLog");

            entity.ToTable("FGFormulaLOG");

            entity.Property(e => e.FglformulaPk).HasColumnName("FGLFormula_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FormulaEntryOrdered)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.FormulaItemMasterNoFk).HasColumnName("FormulaItemMasterNo_FK");
            entity.Property(e => e.FormulaLabelClaim)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FormulaNoPk).HasColumnName("FormulaNo_PK");
            entity.Property(e => e.FormulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormulaRawMaterialNoFk).HasColumnName("FormulaRawMaterialNo_FK");
            entity.Property(e => e.FormulaRmcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormulaRMCustomerNo_FK");
            entity.Property(e => e.FormulaRmqty).HasColumnName("FormulaRMQty");
            entity.Property(e => e.FormulaUomnoFk).HasColumnName("FormulaUOMNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.RmitemNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNo");
            entity.Property(e => e.ShellItemMasterNoFk).HasColumnName("ShellItemMasterNo_FK");
        });

        modelBuilder.Entity<Fggelatin>(entity =>
        {
            entity.HasKey(e => e.GelatinNoPk).HasName("PK_FGGeletin");

            entity.ToTable("FGGelatin");

            entity.Property(e => e.GelatinNoPk).HasColumnName("GelatinNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GelatinEntryOrdered)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.GelatinGelItemItemMasterNoFk).HasColumnName("GelatinGelItemItemMasterNo_FK");
            entity.Property(e => e.GelatinItemMasterNoFk).HasColumnName("GelatinItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDgelFormulaHeaderFk).HasColumnName("RnDGelFormulaHeader_FK");
        });

        modelBuilder.Entity<FggelatinLog>(entity =>
        {
            entity.HasKey(e => e.GelatinLogNoPk);

            entity.ToTable("FGGelatinLog");

            entity.Property(e => e.GelatinLogNoPk).HasColumnName("GelatinLogNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GelatinGelItemItemMasterNoFk).HasColumnName("GelatinGelItemItemMasterNo_FK");
            entity.Property(e => e.GelatinNoPk).HasColumnName("GelatinNo_PK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDgelFormulaHeaderFk).HasColumnName("RnDGelFormulaHeader_FK");
        });

        modelBuilder.Entity<FgitemMaster>(entity =>
        {
            entity.HasKey(e => e.ItemMasterNoPk).HasName("PK_ItemMaster");

            entity.ToTable("FGItemMaster", tb =>
                {
                    tb.HasTrigger("trigger_FGItemMaster_Insert");
                    tb.HasTrigger("trigger_FGItemMaster_Update");
                });

            entity.HasIndex(e => e.ImitemId, "IX1FGItemMaster");

            entity.HasIndex(e => e.EdimassMarketItem, "IX2FGItemMaster");

            entity.HasIndex(e => e.ImcomboIdFk, "IX3FGItemMaster");

            entity.HasIndex(e => e.ImfgitemMasterBulkIdFk, "IX4FGItemMaster");

            entity.HasIndex(e => e.ImcustItemId, "IX_CustItemId");

            entity.HasIndex(e => e.ImcustomerNoFk, "IX_FGItemMaster");

            entity.HasIndex(e => e.ImproductTypeFk, "IX_ProductType");

            entity.HasIndex(e => e.ImitemId, "ItemID").IsUnique();

            entity.HasIndex(e => new { e.ItemMasterNoPk, e.ImcolorCodeFk, e.Imdescription, e.ImitemId }, "_dta_index_FGItemMaster_7_1047062866__K1_K19_K9_K7");

            entity.HasIndex(e => new { e.ItemMasterNoPk, e.Imdescription, e.ImitemId }, "_dta_index_FGItemMaster_7_1047062866__K1_K9_K7");

            entity.Property(e => e.ItemMasterNoPk).HasColumnName("ItemMasterNo_PK");
            entity.Property(e => e.CaseUnitImFk).HasColumnName("CaseUnitIM_FK");
            entity.Property(e => e.ComboIm).HasColumnName("ComboIM");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EdimassMarketItem).HasColumnName("EDIMassMarketItem");
            entity.Property(e => e.EntericIm).HasColumnName("EntericIM");
            entity.Property(e => e.ImactualCost).HasColumnName("IMActualCost");
            entity.Property(e => e.ImactualCostDt)
                .HasColumnType("datetime")
                .HasColumnName("IMActualCostDt");
            entity.Property(e => e.ImavgCost).HasColumnName("IMAvgCost");
            entity.Property(e => e.ImavgCostDt)
                .HasColumnType("datetime")
                .HasColumnName("IMAvgCostDt");
            entity.Property(e => e.ImbookValue).HasColumnName("IMBookValue");
            entity.Property(e => e.ImcapsuleNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMCapsuleNotes");
            entity.Property(e => e.ImcapsuleRmFk).HasColumnName("IMCapsuleRM_FK");
            entity.Property(e => e.ImcaseQty).HasColumnName("IMCaseQty");
            entity.Property(e => e.ImcoatType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCoatType");
            entity.Property(e => e.ImcoatingNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMCoatingNotes");
            entity.Property(e => e.ImcolorCodeFk).HasColumnName("IMColorCode_FK");
            entity.Property(e => e.ImcomboIdFk).HasColumnName("IMComboID_FK");
            entity.Property(e => e.Imcost).HasColumnName("IMCost");
            entity.Property(e => e.ImcustItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCustItem_ID");
            entity.Property(e => e.ImcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("IMCustomerNo_FK");
            entity.Property(e => e.Imdescription)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDescription");
            entity.Property(e => e.ImfgitemMasterBulkIdFk).HasColumnName("IMFGItemMasterBulkID_FK");
            entity.Property(e => e.ImformulaNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMFormulaNotes");
            entity.Property(e => e.ImgelType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMGelType");
            entity.Property(e => e.ImgelatinNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMGelatinNotes");
            entity.Property(e => e.ImgeneralNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMGeneralNotes");
            entity.Property(e => e.ImglcostAcctNoFk).HasColumnName("IMGLCostAcctNo_FK");
            entity.Property(e => e.ImglcostCenterNoFk).HasColumnName("IMGLCostCenterNo_FK");
            entity.Property(e => e.ImglrevAccountNoFk).HasColumnName("IMGLRevAccountNo_FK");
            entity.Property(e => e.ImglrevSubAccountNoFk).HasColumnName("IMGLRevSubAccountNo_FK");
            entity.Property(e => e.ImgrossWeight).HasColumnName("IMGrossWeight");
            entity.Property(e => e.Imheight).HasColumnName("IMHeight");
            entity.Property(e => e.ImitemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMItem_ID");
            entity.Property(e => e.ImitemId6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMItem_ID_6");
            entity.Property(e => e.ImlastPrice).HasColumnName("IMLastPrice");
            entity.Property(e => e.ImlastPriceDt)
                .HasColumnType("datetime")
                .HasColumnName("IMLastPriceDt");
            entity.Property(e => e.Imlength).HasColumnName("IMLength");
            entity.Property(e => e.ImnetWeight).HasColumnName("IMNetWeight");
            entity.Property(e => e.ImnumberOfSiblings).HasColumnName("IMNumberOfSiblings");
            entity.Property(e => e.Impack).HasColumnName("IMPack");
            entity.Property(e => e.ImpackType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPackType");
            entity.Property(e => e.ImpackagingNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMPackagingNotes");
            entity.Property(e => e.ImpalBaseX).HasColumnName("IMPalBaseX");
            entity.Property(e => e.ImpalBaseY).HasColumnName("IMPalBaseY");
            entity.Property(e => e.ImpalHeight).HasColumnName("IMPalHeight");
            entity.Property(e => e.ImparentLinkFk).HasColumnName("IMParentLink_FK");
            entity.Property(e => e.ImphysicalInventoryQtyOh).HasColumnName("IMPhysicalInventoryQtyOH");
            entity.Property(e => e.Impicture).HasColumnName("IMPicture");
            entity.Property(e => e.ImpillDiceCavityNoFk).HasColumnName("IMPillDiceCavityNo_FK");
            entity.Property(e => e.ImpillSizeNoFk).HasColumnName("IMPillSizeNo_FK");
            entity.Property(e => e.ImproductClassFk).HasColumnName("IMProductClass_FK");
            entity.Property(e => e.ImproductTypeFk).HasColumnName("IMProductType_FK");
            entity.Property(e => e.ImqtyAllocated)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("IMQtyAllocated");
            entity.Property(e => e.ImqtyBackOrdered).HasColumnName("IMQtyBackOrdered");
            entity.Property(e => e.ImqtyInPackaging).HasColumnName("IMQtyInPackaging");
            entity.Property(e => e.ImqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMQtyInQCInspection");
            entity.Property(e => e.ImqtyOh)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("IMQtyOH");
            entity.Property(e => e.ImqtyOrdered)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("IMQtyOrdered");
            entity.Property(e => e.ImqtyReceived).HasColumnName("IMQtyReceived");
            entity.Property(e => e.ImqtyShipped).HasColumnName("IMQtyShipped");
            entity.Property(e => e.ImqtyWeighedUp).HasColumnName("IMQtyWeighedUp");
            entity.Property(e => e.ImshapeCodeFk).HasColumnName("IMShapeCode_FK");
            entity.Property(e => e.ImsiblingRootId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMSiblingRootID");
            entity.Property(e => e.ImstdCost).HasColumnName("IMStdCost");
            entity.Property(e => e.ImstdCostDt)
                .HasColumnType("datetime")
                .HasColumnName("IMStdCostDt");
            entity.Property(e => e.ImstdPrice).HasColumnName("IMStdPrice");
            entity.Property(e => e.ImstdPriceDt)
                .HasColumnType("datetime")
                .HasColumnName("IMStdPriceDt");
            entity.Property(e => e.ImuomFk).HasColumnName("IMUOM_FK");
            entity.Property(e => e.Imupc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUPC");
            entity.Property(e => e.Imvolume).HasColumnName("IMVolume");
            entity.Property(e => e.Imweight).HasColumnName("IMWeight");
            entity.Property(e => e.Imwidth).HasColumnName("IMWidth");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MixIm).HasColumnName("MixIM");
            entity.Property(e => e.PilotIm).HasColumnName("PilotIM");
            entity.Property(e => e.PurchaseOrMakeIm).HasColumnName("PurchaseOrMakeIM");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.HasOne(d => d.ImcolorCodeFkNavigation).WithMany(p => p.FgitemMasters)
                .HasForeignKey(d => d.ImcolorCodeFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FGItemMaster_ColorCodes");

            entity.HasOne(d => d.ImcustomerNoFkNavigation).WithMany(p => p.FgitemMasters)
                .HasForeignKey(d => d.ImcustomerNoFk)
                .HasConstraintName("FK_FGItemMaster_Customer");

            entity.HasOne(d => d.ImpillSizeNoFkNavigation).WithMany(p => p.FgitemMasters)
                .HasForeignKey(d => d.ImpillSizeNoFk)
                .HasConstraintName("FK_FGItemMaster_PillSize");

            entity.HasOne(d => d.ImshapeCodeFkNavigation).WithMany(p => p.FgitemMasters)
                .HasForeignKey(d => d.ImshapeCodeFk)
                .HasConstraintName("FK_FGItemMaster_ShapeCodes");
        });

        modelBuilder.Entity<FgitemMasterBulkId>(entity =>
        {
            entity.HasKey(e => e.ImbulkIdheaderPk);

            entity.ToTable("FGItemMasterBulkID");

            entity.HasIndex(e => e.ImbulkIdfgitemMasterFk, "IX1FGItemMasterBulkID");

            entity.HasIndex(e => e.RecStatusNoFk, "IX2FGItemMasterBulkID");

            entity.Property(e => e.ImbulkIdheaderPk).HasColumnName("IMBulkIDHeader_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ImbulkIdcoatFmlItemMasterFk).HasColumnName("IMBulkIDCoatFmlItemMaster_FK");
            entity.Property(e => e.ImbulkIdfgformulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMBulkIDFGFormulaNumber");
            entity.Property(e => e.ImbulkIdfgitemMasterFk).HasColumnName("IMBulkIDFGItemMaster_FK");
            entity.Property(e => e.ImbulkIdfgitemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("IMBulkIDFGItemMasterVer");
            entity.Property(e => e.ImbulkIdgelFmlItemMasterFk).HasColumnName("IMBulkIDGelFmlItemMaster_FK");
            entity.Property(e => e.ImbulkIdrnDfmlRootId).HasColumnName("IMBulkIDRnDFmlRootID");
            entity.Property(e => e.ImbulkIdrnDheaderFk).HasColumnName("IMBulkIDRnDHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgitemMasterBulkIdlogRemove>(entity =>
        {
            entity.HasKey(e => e.ImbulkIdhdrLogPk).HasName("PK_FGItemMasterBulkIDLOG");

            entity.ToTable("FGItemMasterBulkIDLOG-REMOVE");

            entity.Property(e => e.ImbulkIdhdrLogPk).HasColumnName("IMBulkIDHdrLOG_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ImbulkIdcoatFmlItemMasterFk).HasColumnName("IMBulkIDCoatFmlItemMaster_FK");
            entity.Property(e => e.ImbulkIdfgformulaNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMBulkIDFGFormulaNumber");
            entity.Property(e => e.ImbulkIdfgitemMasterFk).HasColumnName("IMBulkIDFGItemMaster_FK");
            entity.Property(e => e.ImbulkIdfgitemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("IMBulkIDFGItemMasterVer");
            entity.Property(e => e.ImbulkIdgelFmlItemMasterFk).HasColumnName("IMBulkIDGelFmlItemMaster_FK");
            entity.Property(e => e.ImbulkIdheaderPk).HasColumnName("IMBulkIDHeader_PK");
            entity.Property(e => e.ImbulkIdrnDfmlRootId).HasColumnName("IMBulkIDRnDFmlRootID");
            entity.Property(e => e.ImbulkIdrnDheaderFk).HasColumnName("IMBulkIDRnDHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgitemMasterByLot>(entity =>
        {
            entity.HasKey(e => e.ImbyLotPk).HasName("PK_FGItemMasterByLot_bak");

            entity.ToTable("FGItemMasterByLot");

            entity.Property(e => e.ImbyLotPk).HasColumnName("IMbyLot_PK");
            entity.Property(e => e.Brlot)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.ImlotAllocQty).HasColumnName("IMLotAllocQty");
            entity.Property(e => e.ImlotOnHandQty).HasColumnName("IMLotOnHandQty");
            entity.Property(e => e.ImlotOnOrderQty).HasColumnName("IMLotOnOrderQty");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OldBrlot)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OldBRLot");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.Sonum).HasColumnName("SONum");
        });

        modelBuilder.Entity<FgitemMasterComboId>(entity =>
        {
            entity.HasKey(e => e.ImcomboIdPk);

            entity.ToTable("FGItemMasterComboID");

            entity.HasIndex(e => e.Im10Fk, "IX10FGItemMasterComboID");

            entity.HasIndex(e => e.FgcitemMasterFk, "IX11FGItemMasterComboID");

            entity.HasIndex(e => e.RecStatusNoFk, "IX12FGItemMasterComboID");

            entity.HasIndex(e => e.Im1Fk, "IX1FGItemMasterComboID");

            entity.HasIndex(e => e.Im2Fk, "IX2FGItemMasterComboID");

            entity.HasIndex(e => e.Im3Fk, "IX3FGItemMasterComboID");

            entity.HasIndex(e => e.Im4Fk, "IX4FGItemMasterComboID");

            entity.HasIndex(e => e.Im5Fk, "IX5FGItemMasterComboID");

            entity.HasIndex(e => e.Im6Fk, "IX6FGItemMasterComboID");

            entity.HasIndex(e => e.Im7Fk, "IX7FGItemMasterComboID");

            entity.HasIndex(e => e.Im8Fk, "IX8FGItemMasterComboID");

            entity.HasIndex(e => e.Im9Fk, "IX9FGItemMasterComboID");

            entity.Property(e => e.ImcomboIdPk).HasColumnName("IMComboID_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgcitemMasterFk).HasColumnName("FGCItemMaster_FK");
            entity.Property(e => e.Im10Fk).HasColumnName("IM10_FK");
            entity.Property(e => e.Im1Fk).HasColumnName("IM1_FK");
            entity.Property(e => e.Im2Fk).HasColumnName("IM2_FK");
            entity.Property(e => e.Im3Fk).HasColumnName("IM3_FK");
            entity.Property(e => e.Im4Fk).HasColumnName("IM4_FK");
            entity.Property(e => e.Im5Fk).HasColumnName("IM5_FK");
            entity.Property(e => e.Im6Fk).HasColumnName("IM6_FK");
            entity.Property(e => e.Im7Fk).HasColumnName("IM7_FK");
            entity.Property(e => e.Im8Fk).HasColumnName("IM8_FK");
            entity.Property(e => e.Im9Fk).HasColumnName("IM9_FK");
            entity.Property(e => e.ImcomboCodes)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMComboCodes");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<FgitemMasterLog>(entity =>
        {
            entity.HasKey(e => e.FgimlPk).HasName("PK_FGItemMasterLog");

            entity.ToTable("FGItemMasterLOG");

            entity.Property(e => e.FgimlPk).HasColumnName("FGIML_PK");
            entity.Property(e => e.CaseUnitImFk).HasColumnName("CaseUnitIM_FK");
            entity.Property(e => e.ComboIm).HasColumnName("ComboIM");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EdimassMarketItem).HasColumnName("EDIMassMarketItem");
            entity.Property(e => e.EntericIm).HasColumnName("EntericIM");
            entity.Property(e => e.ImactualCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMActualCost");
            entity.Property(e => e.ImactualCostDt)
                .HasColumnType("datetime")
                .HasColumnName("IMActualCostDt");
            entity.Property(e => e.ImavgCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMAvgCost");
            entity.Property(e => e.ImavgCostDt)
                .HasColumnType("datetime")
                .HasColumnName("IMAvgCostDt");
            entity.Property(e => e.ImbookValue).HasColumnName("IMBookValue");
            entity.Property(e => e.ImcapsuleNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMCapsuleNotes");
            entity.Property(e => e.ImcapsuleRmFk).HasColumnName("IMCapsuleRM_FK");
            entity.Property(e => e.ImcaseQty).HasColumnName("IMCaseQty");
            entity.Property(e => e.ImcoatType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCoatType");
            entity.Property(e => e.ImcoatingNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMCoatingNotes");
            entity.Property(e => e.ImcolorCodeFk).HasColumnName("IMColorCode_FK");
            entity.Property(e => e.ImcomboIdFk).HasColumnName("IMComboID_FK");
            entity.Property(e => e.Imcost).HasColumnName("IMCost");
            entity.Property(e => e.ImcustItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCustItem_ID");
            entity.Property(e => e.ImcustomerNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCustomerNo_FK");
            entity.Property(e => e.Imdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDescription");
            entity.Property(e => e.ImfgitemMasterBulkIdFk).HasColumnName("IMFGItemMasterBulkID_FK");
            entity.Property(e => e.ImformulaNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMFormulaNotes");
            entity.Property(e => e.ImgelType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMGelType");
            entity.Property(e => e.ImgelatinNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMGelatinNotes");
            entity.Property(e => e.ImgeneralNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMGeneralNotes");
            entity.Property(e => e.ImglcostAcctNoFk).HasColumnName("IMGLCostAcctNo_FK");
            entity.Property(e => e.ImglcostCenterNoFk).HasColumnName("IMGLCostCenterNo_FK");
            entity.Property(e => e.ImglrevAccountNoFk).HasColumnName("IMGLRevAccountNo_FK");
            entity.Property(e => e.ImglrevSubAccountNoFk).HasColumnName("IMGLRevSubAccountNo_FK");
            entity.Property(e => e.ImgrossWeight).HasColumnName("IMGrossWeight");
            entity.Property(e => e.Imheight).HasColumnName("IMHeight");
            entity.Property(e => e.ImitemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMItem_ID");
            entity.Property(e => e.ImitemId6)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMItem_ID_6");
            entity.Property(e => e.ImlastPrice).HasColumnName("IMLastPrice");
            entity.Property(e => e.ImlastPriceDt)
                .HasColumnType("datetime")
                .HasColumnName("IMLastPriceDt");
            entity.Property(e => e.Imlength).HasColumnName("IMLength");
            entity.Property(e => e.ImnetWeight).HasColumnName("IMNetWeight");
            entity.Property(e => e.ImnumberOfSiblings).HasColumnName("IMNumberOfSiblings");
            entity.Property(e => e.Impack).HasColumnName("IMPack");
            entity.Property(e => e.ImpackType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPackType");
            entity.Property(e => e.ImpackagingNotes)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("IMPackagingNotes");
            entity.Property(e => e.ImpalBaseX).HasColumnName("IMPalBaseX");
            entity.Property(e => e.ImpalBaseY).HasColumnName("IMPalBaseY");
            entity.Property(e => e.ImpalHeight).HasColumnName("IMPalHeight");
            entity.Property(e => e.ImparentLinkFk).HasColumnName("IMParentLink_FK");
            entity.Property(e => e.ImphysicalInventoryQtyOh).HasColumnName("IMPhysicalInventoryQtyOH");
            entity.Property(e => e.Impicture).HasColumnName("IMPicture");
            entity.Property(e => e.ImpillDiceCavityNoFk).HasColumnName("IMPillDiceCavityNo_FK");
            entity.Property(e => e.ImpillSizeNoFk).HasColumnName("IMPillSizeNo_FK");
            entity.Property(e => e.ImproductClassFk).HasColumnName("IMProductClass_FK");
            entity.Property(e => e.ImproductTypeFk).HasColumnName("IMProductType_FK");
            entity.Property(e => e.ImqtyAllocated).HasColumnName("IMQtyAllocated");
            entity.Property(e => e.ImqtyBackOrdered).HasColumnName("IMQtyBackOrdered");
            entity.Property(e => e.ImqtyInPackaging).HasColumnName("IMQtyInPackaging");
            entity.Property(e => e.ImqtyInQcinspection).HasColumnName("IMQtyInQCInspection");
            entity.Property(e => e.ImqtyOh).HasColumnName("IMQtyOH");
            entity.Property(e => e.ImqtyOrdered).HasColumnName("IMQtyOrdered");
            entity.Property(e => e.ImqtyReceived).HasColumnName("IMQtyReceived");
            entity.Property(e => e.ImqtyShipped).HasColumnName("IMQtyShipped");
            entity.Property(e => e.ImqtyWeighedUp).HasColumnName("IMQtyWeighedUp");
            entity.Property(e => e.ImshapeCodeFk).HasColumnName("IMShapeCode_FK");
            entity.Property(e => e.ImsiblingRootId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMSiblingRootID");
            entity.Property(e => e.ImstdCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMStdCost");
            entity.Property(e => e.ImstdCostDt)
                .HasColumnType("datetime")
                .HasColumnName("IMStdCostDt");
            entity.Property(e => e.ImstdPrice)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMStdPrice");
            entity.Property(e => e.ImstdPriceDt)
                .HasColumnType("datetime")
                .HasColumnName("IMStdPriceDt");
            entity.Property(e => e.ImuomFk).HasColumnName("IMUOM_FK");
            entity.Property(e => e.Imupc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IMUPC");
            entity.Property(e => e.Imvolume).HasColumnName("IMVolume");
            entity.Property(e => e.Imweight).HasColumnName("IMWeight");
            entity.Property(e => e.Imwidth).HasColumnName("IMWidth");
            entity.Property(e => e.ItemMasterNoPk).HasColumnName("ItemMasterNo_PK");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MixIm).HasColumnName("MixIM");
            entity.Property(e => e.PilotIm).HasColumnName("PilotIM");
            entity.Property(e => e.PurchaseOrMakeIm).HasColumnName("PurchaseOrMakeIM");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Fglabel>(entity =>
        {
            entity.HasKey(e => e.FglabelNoPk);

            entity.ToTable("FGLabel");

            entity.Property(e => e.FglabelNoPk).HasColumnName("FGLabelNo_PK");
            entity.Property(e => e.BulkVersion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ComponentCode)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerItem)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPart)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerProductName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CustomerUpcbarCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CustomerUPCBarCode");
            entity.Property(e => e.CustomerVer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FglabelStatus).HasColumnName("FGLabelStatus");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.Imdesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.LabelVersion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FglabelComment>(entity =>
        {
            entity.HasKey(e => e.FglabelCommentNoPk).HasName("PK_FGComment");

            entity.ToTable("FGLabelComment");

            entity.Property(e => e.FglabelCommentNoPk).HasColumnName("FGLabelCommentNo_PK");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FglabelNoPk).HasColumnName("FGLabelNo_PK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<FgpackInstruction>(entity =>
        {
            entity.HasKey(e => e.FgpkgInstrNoPk);

            entity.ToTable("FGPackInstruction");

            entity.Property(e => e.FgpkgInstrNoPk).HasColumnName("FGpkgInstrNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ImcodeFk).HasColumnName("IMCode_FK");
            entity.Property(e => e.Instruction).IsRequired();
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.SectionId)
                .HasMaxLength(10)
                .HasColumnName("SectionID");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
        });

        modelBuilder.Entity<Fgpackaging>(entity =>
        {
            entity.HasKey(e => e.PackagingNoPk).HasName("PK_Packaging");

            entity.ToTable("FGPackaging");

            entity.Property(e => e.PackagingNoPk).HasColumnName("PackagingNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PackagingCustomerNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PackagingCustomerNo_FK");
            entity.Property(e => e.PackagingEntryOrdered)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PackagingItemMasterNoFk).HasColumnName("PackagingItemMasterNo_FK");
            entity.Property(e => e.PackagingItemQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.PackagingNotes).HasColumnType("ntext");
            entity.Property(e => e.PackagingNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PackagingRawMaterialNoFk).HasColumnName("PackagingRawMaterialNo_FK");
            entity.Property(e => e.PackagingRmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PackagingRMCode");
            entity.Property(e => e.PackagingRmdesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("PackagingRMDesc");
            entity.Property(e => e.PackagingRmproductTypeNoFk).HasColumnName("PackagingRMProductTypeNo_FK");
            entity.Property(e => e.PackagingRmqtyPer1000).HasColumnName("PackagingRMQtyPer1000");
            entity.Property(e => e.PackagingTypeNoFk).HasColumnName("PackagingTypeNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<FgpackagingLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGPackagingLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgplcustomerNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPLCustomerNo_FK");
            entity.Property(e => e.FgplentryOrdered)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("FGPLEntryOrdered");
            entity.Property(e => e.FgplitemMasterNoFk).HasColumnName("FGPLItemMasterNo_FK");
            entity.Property(e => e.Fgplnotes)
                .HasColumnType("ntext")
                .HasColumnName("FGPLNotes");
            entity.Property(e => e.FgplpackagingNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPLPackagingNumber");
            entity.Property(e => e.FgplrawMaterialNoFk).HasColumnName("FGPLRawMaterialNo_FK");
            entity.Property(e => e.Fgplrmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPLRMCode");
            entity.Property(e => e.Fgplrmdesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("FGPLRMDesc");
            entity.Property(e => e.FgplrmproductTypeNoFk).HasColumnName("FGPLRMProductTypeNo_FK");
            entity.Property(e => e.FgplrmqtyPer1000).HasColumnName("FGPLRMQtyPer1000");
            entity.Property(e => e.FgpltypeNoFk).HasColumnName("FGPLTypeNo_FK");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PackagingItemQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgphyInvByLocation>(entity =>
        {
            entity.HasKey(e => e.FgitemByLocNoPk);

            entity.ToTable("FGPhyInvByLocation");

            entity.Property(e => e.FgitemByLocNoPk).HasColumnName("FGItemByLocNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgbyLocNotes)
                .HasColumnType("ntext")
                .HasColumnName("FGByLocNotes");
            entity.Property(e => e.FgitemByLocConversionPieces).HasColumnName("FGItemByLocConversionPieces");
            entity.Property(e => e.FgitemByLocConversionQty).HasColumnName("FGItemByLocConversionQty");
            entity.Property(e => e.FgitemByLocCustomerNoFk).HasColumnName("FGItemByLocCustomerNo_FK");
            entity.Property(e => e.FgitemByLocItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocItemDesc");
            entity.Property(e => e.FgitemByLocItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocItem_ID");
            entity.Property(e => e.FgitemByLocItemMasterNoFk).HasColumnName("FGItemByLocItemMasterNo_FK");
            entity.Property(e => e.FgitemByLocItemPack)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FGItemByLocItemPack");
            entity.Property(e => e.FgitemByLocManLot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocManLot");
            entity.Property(e => e.FgitemByLocNumBox).HasColumnName("FGItemByLocNumBox");
            entity.Property(e => e.FgitemByLocQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FGItemByLocQty");
            entity.Property(e => e.FgitemByLocQtyPerBox)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FGItemByLocQtyPerBox");
            entity.Property(e => e.FgitemByLocReason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocReason");
            entity.Property(e => e.FgitemByLocUom)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocUOM");
            entity.Property(e => e.FgitemByLocWhsLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocWhsLocation");
            entity.Property(e => e.FgitemByLocWhsLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocWhsLot");
            entity.Property(e => e.FgitemByLocations)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGItemByLocations");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.PkgReturnWhsQty).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<FgphyInvByLocationLog>(entity =>
        {
            entity.HasKey(e => e.FgphyInvTransNoPk).HasName("PK_PhyInvTrans");

            entity.ToTable("FGPhyInvByLocationLOG");

            entity.Property(e => e.FgphyInvTransNoPk).HasColumnName("FGPhyInvTransNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgphyInvLogCustomerNoFk).HasColumnName("FGPhyInvLogCustomerNo_FK");
            entity.Property(e => e.FgphyInvLogFromLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogFromLocation");
            entity.Property(e => e.FgphyInvLogItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogItemDesc");
            entity.Property(e => e.FgphyInvLogItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogItem_ID");
            entity.Property(e => e.FgphyInvLogItemKeyNoFk).HasColumnName("FGPhyInvLogItemKeyNo_FK");
            entity.Property(e => e.FgphyInvLogItemPack)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FGPhyInvLogItemPack");
            entity.Property(e => e.FgphyInvLogManLot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogManLot");
            entity.Property(e => e.FgphyInvLogNotes)
                .HasColumnType("ntext")
                .HasColumnName("FGPhyInvLogNotes");
            entity.Property(e => e.FgphyInvLogNumBox).HasColumnName("FGPhyInvLogNumBox");
            entity.Property(e => e.FgphyInvLogOperation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogOperation");
            entity.Property(e => e.FgphyInvLogProductTypeClass).HasColumnName("FGPhyInvLogProductType_Class");
            entity.Property(e => e.FgphyInvLogQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FGPhyInvLogQty");
            entity.Property(e => e.FgphyInvLogQtyPerBox)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("FGPhyInvLogQtyPerBox");
            entity.Property(e => e.FgphyInvLogReason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogReason");
            entity.Property(e => e.FgphyInvLogToLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogToLocation");
            entity.Property(e => e.FgphyInvLogUom)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogUOM");
            entity.Property(e => e.FgphyInvLogVendorId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogVendorID");
            entity.Property(e => e.FgphyInvLogWhsLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogWhsLocation");
            entity.Property(e => e.FgphyInvLogWhsLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGPhyInvLogWhsLot");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.PkgReturnWhsQty).HasColumnType("decimal(10, 3)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<FgpkgComponent>(entity =>
        {
            entity.HasKey(e => e.FgpkgCpnNoPk);

            entity.ToTable("FGPkgComponent");

            entity.Property(e => e.FgpkgCpnNoPk).HasColumnName("FGPkgCpnNo_PK");
            entity.Property(e => e.CpnCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CpnDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("isFG");
            entity.Property(e => e.ItemMasterNoFk).HasColumnName("ItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");

            entity.HasOne(d => d.ItemMasterNoFkNavigation).WithMany(p => p.FgpkgComponents)
                .HasForeignKey(d => d.ItemMasterNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FGPkgComponent_FGItemMaster");
        });

        modelBuilder.Entity<FgpkgComponentLog>(entity =>
        {
            entity.HasKey(e => e.FgpkgCpnLognoPk);

            entity.ToTable("FGPkgComponentLOG");

            entity.Property(e => e.FgpkgCpnLognoPk).HasColumnName("FGPkgCpnLOGNo_PK");
            entity.Property(e => e.CnpQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CpnCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CpnDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgpkgCpnNoPk).HasColumnName("FGPkgCpnNo_PK");
            entity.Property(e => e.IsFg).HasColumnName("isFG");
            entity.Property(e => e.ItemMasterNoFk).HasColumnName("ItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<FgreturnDetail>(entity =>
        {
            entity.HasKey(e => e.FgreturnDetailNoPk);

            entity.ToTable("FGReturnDetail");

            entity.Property(e => e.FgreturnDetailNoPk).HasColumnName("FGReturnDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgrdcustPonum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRDCustPONum");
            entity.Property(e => e.FgrdisWhrecv).HasColumnName("FGRDIsWHRecv");
            entity.Property(e => e.FgrditemCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRDItemCode");
            entity.Property(e => e.FgrditemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGRDItemDesc");
            entity.Property(e => e.FgrdlotNum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRDLotNum");
            entity.Property(e => e.Fgrdpack).HasColumnName("FGRDPack");
            entity.Property(e => e.FgrdqtyProduced).HasColumnName("FGRDQtyProduced");
            entity.Property(e => e.FgrdqtyRtrnBox).HasColumnName("FGRDQtyRtrnBox");
            entity.Property(e => e.FgrdqtyRtrnPerBox).HasColumnName("FGRDQtyRtrnPerBox");
            entity.Property(e => e.FgrdqtyRtrnTotal).HasColumnName("FGRDQtyRtrnTotal");
            entity.Property(e => e.FgrdreturnHeaderNoFk).HasColumnName("FGRDReturnHeaderNo_FK");
            entity.Property(e => e.FgrdrtrnComment)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("FGRDRtrnComment");
            entity.Property(e => e.FgrdrtrnReasonCode)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGRDRtrnReasonCode");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.HasOne(d => d.FgrdreturnHeaderNoFkNavigation).WithMany(p => p.FgreturnDetails)
                .HasForeignKey(d => d.FgrdreturnHeaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FGReturnDetail_FGReturnHeader");
        });

        modelBuilder.Entity<FgreturnHeader>(entity =>
        {
            entity.HasKey(e => e.FgreturnHeaderNoPk);

            entity.ToTable("FGReturnHeader");

            entity.Property(e => e.FgreturnHeaderNoPk).HasColumnName("FGReturnHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgrhcustNumFk).HasColumnName("FGRHCustNum_FK");
            entity.Property(e => e.Fgrhfreight)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHFreight");
            entity.Property(e => e.FgrhfreightPayBy)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FGRHFreightPayBy");
            entity.Property(e => e.Fgrhnotes)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("FGRHNotes");
            entity.Property(e => e.FgrhorgShipDate)
                .HasColumnType("datetime")
                .HasColumnName("FGRHOrgShipDate");
            entity.Property(e => e.FgrhreturnDate)
                .HasColumnType("datetime")
                .HasColumnName("FGRHReturnDate");
            entity.Property(e => e.FgrhrtrnAuthzNum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHRtrnAuthzNum");
            entity.Property(e => e.FgrhsfstrAddress1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrAddress1");
            entity.Property(e => e.FgrhsfstrAddress2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrAddress2");
            entity.Property(e => e.FgrhsfstrAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrAttn");
            entity.Property(e => e.FgrhsfstrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrCity");
            entity.Property(e => e.FgrhsfstrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrCountry");
            entity.Property(e => e.FgrhsfstrEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrEmail");
            entity.Property(e => e.FgrhsfstrFax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrFax1");
            entity.Property(e => e.FgrhsfstrFax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrFax2");
            entity.Property(e => e.FgrhsfstrName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrName");
            entity.Property(e => e.FgrhsfstrPhone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrPhone2");
            entity.Property(e => e.FgrhsfstrPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrPhoneExt");
            entity.Property(e => e.FgrhsfstrPostal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrPostal");
            entity.Property(e => e.FgrhsfstrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrState");
            entity.Property(e => e.FgrhsfstrZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSFstrZip");
            entity.Property(e => e.FgrhstatusNoFk).HasColumnName("FGRHStatusNo_FK");
            entity.Property(e => e.FgrhstfstrPhone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FGRHSTFstrPhone1");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<FgspecAnalysList>(entity =>
        {
            entity.HasKey(e => e.AnalysId);

            entity.ToTable("FGSpec_AnalysList");

            entity.Property(e => e.AnalysId).HasColumnName("AnalysID");
            entity.Property(e => e.AnalysName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsersIdFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsersID_FK");
        });

        modelBuilder.Entity<FgspecDetail>(entity =>
        {
            entity.HasKey(e => e.FgspecDetailPk);

            entity.ToTable("FGSpecDetail");

            entity.Property(e => e.FgspecDetailPk).HasColumnName("FGSpecDetail_PK");
            entity.Property(e => e.Analysis)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Comments)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecHeaderFk).HasColumnName("FGSpecHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Method)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
            entity.Property(e => e.Specification)
                .HasMaxLength(2500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgspecDetailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpecDetailLOG");

            entity.Property(e => e.Analysis)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Comments)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecDetailPk).HasColumnName("FGSpecDetail_PK");
            entity.Property(e => e.FgspecHeaderFk).HasColumnName("FGSpecHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Method)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
            entity.Property(e => e.Specification)
                .HasMaxLength(2500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgspecDigitalPrint>(entity =>
        {
            entity.HasKey(e => e.FgspecHeaderNoFk);

            entity.ToTable("FGSpecDigitalPrint");

            entity.Property(e => e.FgspecHeaderNoFk)
                .ValueGeneratedNever()
                .HasColumnName("FGSpecHeaderNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecFile)
                .IsRequired()
                .HasColumnName("FGSpecFile");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.UserList)
                .IsRequired()
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.UserModified)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgspecDoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk);

            entity.ToTable("FGSpecDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItemDocDirectory)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgspecFormula>(entity =>
        {
            entity.HasKey(e => e.FgspecFormulaPk);

            entity.ToTable("FGSpecFormula");

            entity.Property(e => e.FgspecFormulaPk).HasColumnName("FGSpecFormula_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecHeaderFk).HasColumnName("FGSpecHeader_FK");
            entity.Property(e => e.Label)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PctOver).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.UnitWt).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<FgspecFormulaLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpecFormulaLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecFormulaPk).HasColumnName("FGSpecFormula_PK");
            entity.Property(e => e.FgspecHeaderFk).HasColumnName("FGSpecHeader_FK");
            entity.Property(e => e.Label)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PctOver).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.UnitWt).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<FgspecGelFormula>(entity =>
        {
            entity.HasKey(e => e.FgspecGelFormulaPk);

            entity.ToTable("FGSpecGelFormula");

            entity.Property(e => e.FgspecGelFormulaPk).HasColumnName("FGSpecGelFormula_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecHeaderFk).HasColumnName("FGSpecHeader_FK");
            entity.Property(e => e.GelCoatCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.UnitPct).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.UnitWt).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<FgspecGelFormulaLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpecGelFormulaLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecGelFormulaPk).HasColumnName("FGSpecGelFormula_PK");
            entity.Property(e => e.FgspecHeaderFk).HasColumnName("FGSpecHeader_FK");
            entity.Property(e => e.GelCoatCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.UnitPct).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.UnitWt).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<FgspecHeader>(entity =>
        {
            entity.HasKey(e => e.FgspecHeaderPk);

            entity.ToTable("FGSpecHeader");

            entity.Property(e => e.FgspecHeaderPk).HasColumnName("FGSpecHeader_PK");
            entity.Property(e => e.AdditionalReqs)
                .HasMaxLength(750)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DisintegrationRate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ExpiredIn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FgspecIdFk).HasColumnName("FGSpecID_FK");
            entity.Property(e => e.FgspecStatus).HasColumnName("FGSpecStatus");
            entity.Property(e => e.FillWeight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormulaCode).HasMaxLength(50);
            entity.Property(e => e.FormulaVer).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imcolor)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("IMcolor");
            entity.Property(e => e.Imdesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Imsize)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("IMsize");
            entity.Property(e => e.Imversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMVersion");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(750)
                .IsUnicode(false);
            entity.Property(e => e.ServingSize)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShipToCountry)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpecIssueDate).HasColumnType("datetime");
            entity.Property(e => e.Specversion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalCapsuleWeight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UbxbeenReviewed).HasColumnName("UBXBeenReviewed");
            entity.Property(e => e.UbxhasLabel).HasColumnName("UBXHasLabel");
            entity.Property(e => e.UbxneedReview).HasColumnName("UBXNeedReview");
            entity.Property(e => e.WeightVariation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgspecHeaderLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpecHeaderLOG");

            entity.Property(e => e.AdditionalReqs)
                .HasMaxLength(750)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DisintegrationRate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ExpiredIn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FgspecHeaderPk).HasColumnName("FGSpecHeader_PK");
            entity.Property(e => e.FgspecIdFk).HasColumnName("FGSpecID_FK");
            entity.Property(e => e.FgspecStatus).HasColumnName("FGSpecStatus");
            entity.Property(e => e.FillWeight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormulaCode).HasMaxLength(50);
            entity.Property(e => e.FormulaVer).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imcolor)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("IMcolor");
            entity.Property(e => e.Imdesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Imsize)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("IMsize");
            entity.Property(e => e.Imversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMVersion");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(750)
                .IsUnicode(false);
            entity.Property(e => e.ServingSize)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShipToCountry)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpecIssueDate).HasColumnType("datetime");
            entity.Property(e => e.Specversion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalCapsuleWeight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UbxbeenReviewed).HasColumnName("UBXBeenReviewed");
            entity.Property(e => e.UbxhasLabel).HasColumnName("UBXHasLabel");
            entity.Property(e => e.UbxneedReview).HasColumnName("UBXNeedReview");
            entity.Property(e => e.WeightVariation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FgspecImtemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpec_IMTemplate");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.TestAnalysis).HasMaxLength(250);
            entity.Property(e => e.TestSpec).HasMaxLength(1000);
        });

        modelBuilder.Entity<FgspecImtrackingDetail>(entity =>
        {
            entity.HasKey(e => e.SpecTestIdPk).HasName("PK_FGSpec_ProdTestDetail");

            entity.ToTable("FGSpec_IMTrackingDetail");

            entity.Property(e => e.SpecTestIdPk).HasColumnName("SpecTestID_PK");
            entity.Property(e => e.Analysis)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Comments).HasMaxLength(1000);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Method).HasMaxLength(250);
            entity.Property(e => e.SpecIdFk).HasColumnName("SpecID_FK");
            entity.Property(e => e.Specification).HasMaxLength(500);

            entity.HasOne(d => d.SpecIdFkNavigation).WithMany(p => p.FgspecImtrackingDetails)
                .HasForeignKey(d => d.SpecIdFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FGSpec_IMTrackingDetail_FGSpec_IMTrackingDetail");
        });

        modelBuilder.Entity<FgspecImtrackingDetailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpec_IMTrackingDetailLOG");

            entity.Property(e => e.Analysis)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Comments).HasMaxLength(4000);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Method).HasMaxLength(250);
            entity.Property(e => e.SpecIdFk).HasColumnName("SpecID_FK");
            entity.Property(e => e.SpecTestIdPk).HasColumnName("SpecTestID_PK");
            entity.Property(e => e.Specification).HasMaxLength(500);
        });

        modelBuilder.Entity<FgspecImtrackingHdr>(entity =>
        {
            entity.HasKey(e => e.SpecIdPk).HasName("PK_FGSpec_TestHdr");

            entity.ToTable("FGSpec_IMTrackingHdr");

            entity.Property(e => e.SpecIdPk).HasColumnName("SpecID_PK");
            entity.Property(e => e.ApproveBy).HasMaxLength(50);
            entity.Property(e => e.ApproveDt).HasColumnType("datetime");
            entity.Property(e => e.Comments).HasMaxLength(1000);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("IMCode");
            entity.Property(e => e.Imdesc)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Imver)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IMVer");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
        });

        modelBuilder.Entity<FgspecImtrackingHdrLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpec_IMTrackingHdrLOG");

            entity.Property(e => e.ApproveBy).HasMaxLength(50);
            entity.Property(e => e.ApproveDt).HasColumnType("datetime");
            entity.Property(e => e.Comments).HasMaxLength(1000);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("IMCode");
            entity.Property(e => e.Imdesc)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Imver)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IMVer");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.SpecIdPk).HasColumnName("SpecID_PK");
        });

        modelBuilder.Entity<FgspecLotTrackingDetail>(entity =>
        {
            entity.HasKey(e => e.LotTestIdPk);

            entity.ToTable("FGSpec_LotTrackingDetail");

            entity.Property(e => e.LotTestIdPk).HasColumnName("LotTestID_PK");
            entity.Property(e => e.BookNpage)
                .HasMaxLength(250)
                .HasColumnName("BookNPage");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.SpecTestIdFk).HasColumnName("SpecTestID_FK");
            entity.Property(e => e.TestBy).HasMaxLength(50);
            entity.Property(e => e.TestDate).HasColumnType("datetime");
            entity.Property(e => e.TestResult).HasMaxLength(250);

            entity.HasOne(d => d.BrlotNavigation).WithMany(p => p.FgspecLotTrackingDetails)
                .HasPrincipalKey(p => p.Brlot)
                .HasForeignKey(d => d.Brlot)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FGSpec_LotTrackingDetail_FGSpec_LotTrackingHdr");
        });

        modelBuilder.Entity<FgspecLotTrackingHdr>(entity =>
        {
            entity.HasKey(e => e.LotIdPk);

            entity.ToTable("FGSpec_LotTrackingHdr");

            entity.HasIndex(e => e.Brlot, "IX_FGSpec_LotTrackingHdr").IsUnique();

            entity.Property(e => e.LotIdPk).HasColumnName("LotID_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(25)
                .HasColumnName("BRLot");
            entity.Property(e => e.Comments).HasMaxLength(1000);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MfgDate).HasColumnType("datetime");
            entity.Property(e => e.SpecIdFk).HasColumnName("SpecID_FK");

            entity.HasOne(d => d.SpecIdFkNavigation).WithMany(p => p.FgspecLotTrackingHdrs)
                .HasForeignKey(d => d.SpecIdFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FGSpec_LotTrackingHdr_FGSpec_IMTrackingHdr");
        });

        modelBuilder.Entity<FgspecPkg>(entity =>
        {
            entity.HasKey(e => e.FgspecPkgNoPk);

            entity.ToTable("FGSpecPkg");

            entity.Property(e => e.FgspecPkgNoPk).HasColumnName("FGSpecPkgNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecHeaderNoFk).HasColumnName("FGSpecHeaderNo_FK");
            entity.Property(e => e.FieldSpec)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FormField)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<FgspecPkgLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FGSpecPkgLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FgspecHeaderNoFk).HasColumnName("FGSpecHeaderNo_FK");
            entity.Property(e => e.FgspecPkgNoPk).HasColumnName("FGSpecPkgNo_PK");
            entity.Property(e => e.FieldSpec)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FormField)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<FgspecPkgTemplate>(entity =>
        {
            entity.HasKey(e => e.FgcoapkgTemplateNoPk).HasName("PK_FGPackagingTemplate");

            entity.ToTable("FGSpecPkgTemplate");

            entity.Property(e => e.FgcoapkgTemplateNoPk).HasColumnName("FGCOAPkgTemplateNo_PK");
            entity.Property(e => e.FormField)
                .IsRequired()
                .HasMaxLength(75)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Foformula>(entity =>
        {
            entity.HasKey(e => e.FoformulaNoPk);

            entity.ToTable("FOFormula");

            entity.Property(e => e.FoformulaNoPk).HasColumnName("FOFormulaNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FodetailNoFk).HasColumnName("FODetailNo_FK");
            entity.Property(e => e.FoformulaNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FOFormulaNotes");
            entity.Property(e => e.FoheaderNoFk).HasColumnName("FOHeaderNo_FK");
            entity.Property(e => e.Formdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FORMDescription");
            entity.Property(e => e.FormitemNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FORMItemNo");
            entity.Property(e => e.FormulaItemMasterNoFk).HasColumnName("FormulaItemMasterNo_FK");
            entity.Property(e => e.FormulaLabelClaim)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FormulaRawMaterialNoFk).HasColumnName("FormulaRawMaterialNo_FK");
            entity.Property(e => e.FormulaRmcustomerNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormulaRMCustomerNo_FK");
            entity.Property(e => e.FormulaRmqty).HasColumnName("FormulaRMQty");
            entity.Property(e => e.FormulaUomnoFk).HasColumnName("FormulaUOMNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QuoteDetailNoFk).HasColumnName("QuoteDetailNo_FK");
            entity.Property(e => e.QuoteHeaderNumberFk).HasColumnName("QuoteHeaderNumber_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.ShellItemMasterNoFk).HasColumnName("ShellItemMasterNo_FK");
        });

        modelBuilder.Entity<Foheader>(entity =>
        {
            entity.HasKey(e => e.FoheaderNoPk).HasName("PK_FOHeader2");

            entity.ToTable("FOHeader");

            entity.Property(e => e.FoheaderNoPk).HasColumnName("FOHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FoconfirmBy)
                .HasMaxLength(50)
                .HasColumnName("FOconfirmBy");
            entity.Property(e => e.FoconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("FOconfirmDt");
            entity.Property(e => e.FohbillToNoFk).HasColumnName("FOHBillToNo_FK");
            entity.Property(e => e.Fohbomcreated).HasColumnName("FOHBOMCreated");
            entity.Property(e => e.FohbomcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("FOHBOMCreatedDt");
            entity.Property(e => e.Fohbrcreated).HasColumnName("FOHBRCreated");
            entity.Property(e => e.FohbrcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("FOHBRCreatedDt");
            entity.Property(e => e.FohcustNotes)
                .HasMaxLength(4000)
                .HasColumnName("FOHCustNotes");
            entity.Property(e => e.FohcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOHCustomerNo_FK");
            entity.Property(e => e.FohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("FOHDueDate");
            entity.Property(e => e.FohfoclosedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOHFOClosedBy");
            entity.Property(e => e.FohfoclosedDt)
                .HasColumnType("datetime")
                .HasColumnName("FOHFOClosedDt");
            entity.Property(e => e.FohfovoidedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOHFOVoidedBy");
            entity.Property(e => e.FohfovoidedDt)
                .HasColumnType("datetime")
                .HasColumnName("FOHFOVoidedDt");
            entity.Property(e => e.Fohnotes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("FOHNotes");
            entity.Property(e => e.FohpkgBomcreated).HasColumnName("FOHPkgBOMCreated");
            entity.Property(e => e.FohpkgBomcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("FOHPkgBOMCreatedDt");
            entity.Property(e => e.FohquoteHeaderNoFk).HasColumnName("FOHQuoteHeaderNo_FK");
            entity.Property(e => e.Fohremarks)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("FOHRemarks");
            entity.Property(e => e.Fohrep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOHRep");
            entity.Property(e => e.FohsalesRep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOHSalesRep");
            entity.Property(e => e.FohsalesRep2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOHSalesRep2");
            entity.Property(e => e.FohshipToNoFk).HasColumnName("FOHShipToNo_FK");
            entity.Property(e => e.FohstatusNoFk).HasColumnName("FOHStatusNo_FK");
            entity.Property(e => e.FohtermNoFk).HasColumnName("FOHTermNo_FK");
            entity.Property(e => e.FopkgConfirmBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FOPkgConfirmBy");
            entity.Property(e => e.FopkgConfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("FOPkgConfirmDt");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<Fopodetail>(entity =>
        {
            entity.HasKey(e => e.FopodetailNoPk);

            entity.ToTable("FOPODetail");

            entity.Property(e => e.FopodetailNoPk).HasColumnName("FOPODetailNo_PK");
            entity.Property(e => e.Bomcreated).HasColumnName("BOMCreated");
            entity.Property(e => e.BomcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("BOMCreatedDt");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FoheaderNoFk)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FOHeaderNo_FK");
            entity.Property(e => e.ImcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCustomerNo_FK");
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_ID");
            entity.Property(e => e.ItemMasterVer)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(150)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.ToTable("Form");

            entity.Property(e => e.Id)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
        });

        modelBuilder.Entity<FormRequest>(entity =>
        {
            entity.ToTable("FormRequest");

            entity.Property(e => e.Id)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Brlot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FmlCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FmlVersion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FormStatusNoFk).HasColumnName("FormStatusNo_FK");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.Imdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDescription");
            entity.Property(e => e.Imversion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("IMVersion");
            entity.Property(e => e.ItemDocDirectory)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MfrName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.MfrNoFk).HasColumnName("MfrNo_FK");
            entity.Property(e => e.Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rtvkey).HasColumnName("RTVKey");
            entity.Property(e => e.Sonumber).HasColumnName("SONumber");
            entity.Property(e => e.TemplateId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserList)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.UserModified)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorNoFk).HasColumnName("VendorNo_FK");
            entity.Property(e => e.WhsLot)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GelBatchHeader>(entity =>
        {
            entity.HasKey(e => e.GbheaderPk);

            entity.ToTable("GelBatchHeader");

            entity.Property(e => e.GbheaderPk).HasColumnName("GBHeader_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Gbroom)
                .HasMaxLength(50)
                .HasColumnName("GBRoom");
            entity.Property(e => e.Gbstatus).HasColumnName("GBStatus");
            entity.Property(e => e.GelBatchLot).HasMaxLength(50);
            entity.Property(e => e.GelColorImcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GelColorIMCode");
            entity.Property(e => e.GelColorImdesc)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("GelColorIMDesc");
            entity.Property(e => e.GelCookEndDt).HasColumnType("datetime");
            entity.Property(e => e.GelCookQty).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.GelCookStartDt).HasColumnType("datetime");
            entity.Property(e => e.GelMassCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.GelSource).HasMaxLength(250);
            entity.Property(e => e.GelVer).HasColumnType("decimal(4, 2)");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("IMCode");
            entity.Property(e => e.Imdesc)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Imver)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("IMVer");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<GelBatchInstructTemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GelBatchInstructTemplate");

            entity.Property(e => e.Instruction).IsRequired();
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
        });

        modelBuilder.Entity<GelBatchInstruction>(entity =>
        {
            entity.HasKey(e => e.GbinoPk);

            entity.ToTable("GelBatchInstruction");

            entity.Property(e => e.GbinoPk).HasColumnName("GBINo_PK");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GbhdrNoFk).HasColumnName("GBHdrNo_FK");
            entity.Property(e => e.Instruction).IsRequired();
            entity.Property(e => e.LastUpdBy).HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(500);

            entity.HasOne(d => d.GbhdrNoFkNavigation).WithMany(p => p.InverseGbhdrNoFkNavigation)
                .HasForeignKey(d => d.GbhdrNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GelBatchInstruction_GelBatchInstruction");
        });

        modelBuilder.Entity<GelatinSchedule>(entity =>
        {
            entity.HasKey(e => e.GelSchedNoPk);

            entity.ToTable("GelatinSchedule");

            entity.Property(e => e.GelSchedNoPk).HasColumnName("GelSchedNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Gblot)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("GBLot");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MachineName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<GelatinSource>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GelatinSource");

            entity.Property(e => e.GelSourceName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.GelSourcePk)
                .ValueGeneratedOnAdd()
                .HasColumnName("GelSource_PK");
        });

        modelBuilder.Entity<GenCodeType>(entity =>
        {
            entity.HasKey(e => e.CodeName);

            entity.ToTable("GenCodeType");

            entity.HasIndex(e => e.CodeInt, "CodeInt_Index");

            entity.Property(e => e.CodeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GeneralCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("GeneralCode");

            entity.Property(e => e.CodeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<GlcostAccount>(entity =>
        {
            entity.HasKey(e => new { e.GlcostAcctNoPk, e.GlcostCtrNoFk });

            entity.ToTable("GLCostAccounts");

            entity.Property(e => e.GlcostAcctNoPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCostAcctNo_PK");
            entity.Property(e => e.GlcostCtrNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCostCtrNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GlcostAcctName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCostAcctName");
            entity.Property(e => e.GlcostAcctProdClass).HasColumnName("GLCostAcctProdClass");
            entity.Property(e => e.GlcostAcctProdType).HasColumnName("GLCostAcctProdType");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<GlcostCenter>(entity =>
        {
            entity.HasKey(e => e.GlcostCtrNoPk);

            entity.ToTable("GLCostCenters");

            entity.Property(e => e.GlcostCtrNoPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCostCtrNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GlcostCtrName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCostCtrName");
            entity.Property(e => e.GlcostCtrProdClassNoFk).HasColumnName("GLCostCtrProdClassNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<GlrevenueAccount>(entity =>
        {
            entity.HasKey(e => e.GlrevAcctNoPk);

            entity.ToTable("GLRevenueAccounts");

            entity.Property(e => e.GlrevAcctNoPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLRevAcctNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GlrevAcctName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLRevAcctName");
            entity.Property(e => e.GlrevAcctProdClassNoFk).HasColumnName("GLRevAcctProdClassNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<GlrevenueSubAccount>(entity =>
        {
            entity.HasKey(e => e.GlrevSubAcctNoPk);

            entity.ToTable("GLRevenueSubAccounts");

            entity.Property(e => e.GlrevSubAcctNoPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLRevSubAcctNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GlrevAcctNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLRevAcctNo_FK");
            entity.Property(e => e.GlrevSubAcctName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLRevSubAcctName");
            entity.Property(e => e.GlrevSubAcctProdTypeNoFk).HasColumnName("GLRevSubAcctProdTypeNo_FK");
            entity.Property(e => e.GlrevSubAcctProductClassNoFk).HasColumnName("GLRevSubAcctProductClassNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Hierarchy>(entity =>
        {
            entity.HasKey(e => e.TitleId);

            entity.ToTable("Hierarchy");

            entity.Property(e => e.TitleId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TitleID");
            entity.Property(e => e.Department)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManagerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ManagerID");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Iminfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IMInfo");

            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FgcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("FGCreatedDt");
            entity.Property(e => e.ImbulkIdfgitemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("IMBulkIDFGItemMasterVer");
            entity.Property(e => e.ImcomboCodes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMComboCodes");
            entity.Property(e => e.ImcustItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCustItem_ID");
            entity.Property(e => e.Imdescription)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDescription");
            entity.Property(e => e.ImitemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMItem_ID");
            entity.Property(e => e.Impack).HasColumnName("IMPack");
            entity.Property(e => e.ImpackType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMPackType");
            entity.Property(e => e.ImproductTypeFk).HasColumnName("IMProductType_FK");
            entity.Property(e => e.ItemMasterNoPk).HasColumnName("ItemMasterNo_PK");
            entity.Property(e => e.Ptname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTName");
            entity.Property(e => e.RnDfhcolor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHColor");
            entity.Property(e => e.RnDfhformulaCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHFormulaCode");
            entity.Property(e => e.RnDfhgelType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelType");
            entity.Property(e => e.RnDfhhardness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHHardness");
            entity.Property(e => e.RnDfhpillCavity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHPillCavity");
            entity.Property(e => e.RnDfhpillCavitySize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHPillCavitySize");
            entity.Property(e => e.RnDfhshape)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHShape");
            entity.Property(e => e.RnDfhsize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHSize");
            entity.Property(e => e.RnDfhthickness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHThickness");
            entity.Property(e => e.RnDfhversion)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("RnDFHVersion");
        });

        modelBuilder.Entity<ImlabelDoc>(entity =>
        {
            entity.HasKey(e => e.ImlabelDocPk);

            entity.ToTable("IMLabelDoc");

            entity.Property(e => e.ImlabelDocPk).HasColumnName("IMLabelDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FormRequestNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormRequestNo_FK");
            entity.Property(e => e.ImlabelDocName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMLabelDocName");
            entity.Property(e => e.ImlabelDocType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMLabelDocType");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<Inspection>(entity =>
        {
            entity.ToTable("Inspection");

            entity.Property(e => e.InspectionId).HasColumnName("InspectionID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.InspectionComment)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.InspectionDate).HasColumnType("datetime");
            entity.Property(e => e.InspectionDefect)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InspectionInspector)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InspectionLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InspectionTeam)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<InventoryAging>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Inventory_Aging");

            entity.Property(e => e.AllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRlot");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ExpDt).HasColumnType("datetime");
            entity.Property(e => e.ItemClass)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Itemcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RcvQty).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.RemainQty).HasColumnType("decimal(20, 8)");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.WhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InventoryTransHistory>(entity =>
        {
            entity.HasKey(e => e.InvTransHisId).HasName("PK_InventoryTransHistory1");

            entity.ToTable("InventoryTransHistory");

            entity.Property(e => e.InvTransHisId).HasColumnName("InvTransHisID");
            entity.Property(e => e.Brlot)
                .HasMaxLength(250)
                .HasColumnName("BRLot");
            entity.Property(e => e.CurAllocQty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curAllocQty");
            entity.Property(e => e.CurExpiredQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("curExpiredQty");
            entity.Property(e => e.CurOhqty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curOHQty");
            entity.Property(e => e.CurOnOrderQty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curOnOrderQty");
            entity.Property(e => e.CurQcqty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curQCQty");
            entity.Property(e => e.CurShipQty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curShipQty");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .HasColumnName("IMcode");
            entity.Property(e => e.IssueAllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IssueByUser)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.IssueExpiredQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IssueFrom)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.IssueOhqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IssueOHQty");
            entity.Property(e => e.IssueOnOrderQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IssueQcqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IssueQCQty");
            entity.Property(e => e.IssueShipQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Ponum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONum");
            entity.Property(e => e.Reason).HasMaxLength(500);
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .HasColumnName("RMcode");
            entity.Property(e => e.Sonum).HasColumnName("SONum");
            entity.Property(e => e.Source).HasMaxLength(250);
            entity.Property(e => e.WhsLot).HasMaxLength(50);
        });

        modelBuilder.Entity<InvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.InvDetailNoPk);

            entity.ToTable("InvoiceDetail");

            entity.Property(e => e.InvDetailNoPk).HasColumnName("InvDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.InvNumber)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IsBl).HasColumnName("isBL");
            entity.Property(e => e.ItemName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.UnitCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<InvoiceHeader>(entity =>
        {
            entity.HasKey(e => e.InvHdrNoPk);

            entity.ToTable("InvoiceHeader");

            entity.HasIndex(e => e.InvNumber, "UQ__InvoiceH__E89295D8BED4EEFE").IsUnique();

            entity.Property(e => e.InvHdrNoPk).HasColumnName("InvHdrNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.InvAmount).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.InvBlheaderNoFk).HasColumnName("InvBLHeaderNo_FK");
            entity.Property(e => e.InvComission).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNumber)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.InvPayment).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.InvShipDate).HasColumnType("datetime");
            entity.Property(e => e.InvSonumber).HasColumnName("InvSONumber");
            entity.Property(e => e.InvStatusNoFk).HasColumnName("InvStatusNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<InvoicePayment>(entity =>
        {
            entity.HasKey(e => e.InvPaymentNoPk);

            entity.ToTable("InvoicePayment");

            entity.Property(e => e.InvPaymentNoPk).HasColumnName("InvPaymentNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.InvNumber)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.InvPayAmount).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.InvPayCheck).HasMaxLength(50);
            entity.Property(e => e.InvPayDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<InvoiceTerm>(entity =>
        {
            entity.HasKey(e => e.InvTermsNoPk);

            entity.Property(e => e.InvTermsNoPk).HasColumnName("InvTermsNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Itdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITDescription");
            entity.Property(e => e.ItinvoiceTerms).HasColumnName("ITInvoiceTerms");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<LogicalInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Logical_Inventory");

            entity.Property(e => e.ItemClass)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Ohqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("OHQty");
            entity.Property(e => e.PhyQty).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.RmqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyAllocated");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.WhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Manufacturer>(entity =>
        {
            entity.HasKey(e => e.MfrPk);

            entity.ToTable("Manufacturer");

            entity.Property(e => e.MfrPk).HasColumnName("Mfr_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MfrAddr1).HasMaxLength(250);
            entity.Property(e => e.MfrAddr2).HasMaxLength(250);
            entity.Property(e => e.MfrCity).HasMaxLength(50);
            entity.Property(e => e.MfrContactEmail).HasMaxLength(250);
            entity.Property(e => e.MfrContactName).HasMaxLength(50);
            entity.Property(e => e.MfrContactPhone).HasMaxLength(50);
            entity.Property(e => e.MfrCorpEmail).HasMaxLength(250);
            entity.Property(e => e.MfrCountry).HasMaxLength(50);
            entity.Property(e => e.MfrFax1).HasMaxLength(50);
            entity.Property(e => e.MfrFax2).HasMaxLength(50);
            entity.Property(e => e.MfrName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MfrPhone1).HasMaxLength(50);
            entity.Property(e => e.MfrPhone2).HasMaxLength(50);
            entity.Property(e => e.MfrPhoneExt1).HasMaxLength(50);
            entity.Property(e => e.MfrPhoneExt2).HasMaxLength(50);
            entity.Property(e => e.MfrState).HasMaxLength(50);
            entity.Property(e => e.MfrUrl)
                .HasMaxLength(250)
                .HasColumnName("MfrURL");
            entity.Property(e => e.MfrZipCode).HasMaxLength(50);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<ManufacturerDoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk);

            entity.ToTable("ManufacturerDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.FormRequestNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormRequestNo_FK");
            entity.Property(e => e.ItemDocName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<MarketingLead>(entity =>
        {
            entity.HasKey(e => e.LeadCode);

            entity.ToTable("MarketingLead");

            entity.Property(e => e.LeadCode).HasMaxLength(10);
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DeptGroup).HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LeadDesc)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Notes).HasMaxLength(2500);
            entity.Property(e => e.State).HasMaxLength(100);
        });

        modelBuilder.Entity<MetaDataOverHead>(entity =>
        {
            entity.HasKey(e => e.MdoverheadNoPk);

            entity.ToTable("MetaDataOverHead");

            entity.Property(e => e.MdoverheadNoPk).HasColumnName("MDOverheadNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MdohdirectOverhead).HasColumnName("MDOHDirectOverhead");
            entity.Property(e => e.Mdohname)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MDOHName");
            entity.Property(e => e.MdohorderEntry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MDOHOrderEntry");
            entity.Property(e => e.MdohpercentOfBulkCost).HasColumnName("MDOHPercentOfBulkCost");
            entity.Property(e => e.OhcatergoryFk).HasColumnName("OHCatergory_FK");
            entity.Property(e => e.OhtypeFk).HasColumnName("OHType_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<Mfschedule>(entity =>
        {
            entity.HasKey(e => e.MfschedNoPk);

            entity.ToTable("MFSchedule");

            entity.Property(e => e.MfschedNoPk).HasColumnName("MFSchedNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.Fonumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FONumber");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.Imversion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMVersion");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<MmSamDc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MM_SAM_DC");

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.Address4).HasMaxLength(255);
            entity.Property(e => e.AddressType).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(40);
            entity.Property(e => e.Country).HasMaxLength(20);
            entity.Property(e => e.Division).HasMaxLength(20);
            entity.Property(e => e.Duns)
                .HasMaxLength(30)
                .HasColumnName("DUNS");
            entity.Property(e => e.EffectiveDate).HasMaxLength(20);
            entity.Property(e => e.ExpirationDate).HasMaxLength(20);
            entity.Property(e => e.Extension).HasMaxLength(20);
            entity.Property(e => e.Gln)
                .HasMaxLength(30)
                .HasColumnName("GLN");
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.State).HasMaxLength(20);
            entity.Property(e => e.StoreNo).HasMaxLength(20);
            entity.Property(e => e.VendorCountry).HasMaxLength(20);
            entity.Property(e => e.VendorState).HasMaxLength(20);
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<MmSamStore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MM_SAM_STORE");

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(40);
            entity.Property(e => e.Duns)
                .HasMaxLength(30)
                .HasColumnName("DUNS");
            entity.Property(e => e.Gln)
                .HasMaxLength(30)
                .HasColumnName("GLN");
            entity.Property(e => e.Manager).HasMaxLength(40);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.ReceivingPhone).HasMaxLength(20);
            entity.Property(e => e.State).HasMaxLength(20);
            entity.Property(e => e.StoreNo).HasMaxLength(20);
            entity.Property(e => e.Zip)
                .HasMaxLength(10)
                .HasColumnName("ZIP");
        });

        modelBuilder.Entity<MmWmDc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MM_WM_DC");

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Address3).HasMaxLength(255);
            entity.Property(e => e.Address4).HasMaxLength(255);
            entity.Property(e => e.AddressType).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(40);
            entity.Property(e => e.Country).HasMaxLength(40);
            entity.Property(e => e.Division).HasMaxLength(20);
            entity.Property(e => e.Duns)
                .HasMaxLength(30)
                .HasColumnName("DUNS");
            entity.Property(e => e.EffectiveDate).HasMaxLength(20);
            entity.Property(e => e.ExpirationDate).HasMaxLength(20);
            entity.Property(e => e.Extension).HasMaxLength(20);
            entity.Property(e => e.Gln)
                .HasMaxLength(30)
                .HasColumnName("GLN");
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.State).HasMaxLength(20);
            entity.Property(e => e.StoreNo).HasMaxLength(20);
            entity.Property(e => e.VendorCountry).HasMaxLength(40);
            entity.Property(e => e.VendorState).HasMaxLength(20);
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<MmWmStore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MM_WM_STORE");

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(40);
            entity.Property(e => e.DryGroceryDc)
                .HasMaxLength(20)
                .HasColumnName("DryGroceryDC");
            entity.Property(e => e.Duns)
                .HasMaxLength(30)
                .HasColumnName("DUNS");
            entity.Property(e => e.Gln)
                .HasMaxLength(30)
                .HasColumnName("GLN");
            entity.Property(e => e.MailingAddress).HasMaxLength(255);
            entity.Property(e => e.MailingCity).HasMaxLength(40);
            entity.Property(e => e.MailingState).HasMaxLength(20);
            entity.Property(e => e.MailingZip).HasMaxLength(10);
            entity.Property(e => e.OpenDate).HasMaxLength(20);
            entity.Property(e => e.PerishableDc)
                .HasMaxLength(20)
                .HasColumnName("PerishableDC");
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.RegionalDc)
                .HasMaxLength(20)
                .HasColumnName("RegionalDC");
            entity.Property(e => e.Size).HasMaxLength(20);
            entity.Property(e => e.SpecialtyDc)
                .HasMaxLength(20)
                .HasColumnName("SpecialtyDC");
            entity.Property(e => e.State).HasMaxLength(20);
            entity.Property(e => e.StoreName).HasMaxLength(50);
            entity.Property(e => e.StoreNo).HasMaxLength(20);
            entity.Property(e => e.StoreType).HasMaxLength(20);
            entity.Property(e => e.Zip).HasMaxLength(10);
        });

        modelBuilder.Entity<NextApponumber>(entity =>
        {
            entity.HasKey(e => e.NextApponumber1);

            entity.ToTable("NextAPPONumber");

            entity.Property(e => e.NextApponumber1)
                .ValueGeneratedNever()
                .HasColumnName("NextAPPONumber");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(50);
        });

        modelBuilder.Entity<NextCoatingFormulaNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextCoatingFormulaNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextCustomerNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextCustomerNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextFormulaNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextFormulaNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<NextGelMassNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextGelMassNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<NextImsiblingNum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NextIMSiblingNum");

            entity.Property(e => e.AlphaDecimal)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextInvoiceNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextInvoiceNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(50);
        });

        modelBuilder.Entity<NextItemMasterNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextItemMasterNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PilotIm).HasColumnName("PilotIM");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextLotWhsNumber>(entity =>
        {
            entity.HasKey(e => e.LotNextNumber);

            entity.ToTable("NextLotWhsNumber");

            entity.Property(e => e.LotNextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<NextMfgLotNumber>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NextMfgLotNumber");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextPalletNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextPalletNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextRmanumber>(entity =>
        {
            entity.HasKey(e => e.NextRmanumber1);

            entity.ToTable("NextRMANumber");

            entity.Property(e => e.NextRmanumber1)
                .ValueGeneratedNever()
                .HasColumnName("NextRMAnumber");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(50);
        });

        modelBuilder.Entity<NextRnDformulaNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextRnDFormulaNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<NextVoucherNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextVoucherNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NextWeighUpBatchNumber>(entity =>
        {
            entity.HasKey(e => e.NextNumber);

            entity.ToTable("NextWeighUpBatchNumber");

            entity.Property(e => e.NextNumber).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.ToTable("Notification");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(2500);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Url)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("URL");
            entity.Property(e => e.Value).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationTemplate>(entity =>
        {
            entity.HasKey(e => e.NotifTemplateNoPk);

            entity.ToTable("NotificationTemplate");

            entity.Property(e => e.NotifTemplateNoPk).HasColumnName("NotifTemplateNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.NotifTemplateMessage)
                .IsRequired()
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.NotifTemplateType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NotifTemplateValue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Url)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("URL");
        });

        modelBuilder.Entity<NotificationTemplateUser>(entity =>
        {
            entity.HasKey(e => e.NotifTemplateUserNoPk);

            entity.Property(e => e.NotifTemplateUserNoPk).HasColumnName("NotifTemplateUserNo_PK");
            entity.Property(e => e.NotifTemplateNoFk).HasColumnName("NotifTemplateNo_FK");
            entity.Property(e => e.NotifTemplateUsersId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<NotificationUser>(entity =>
        {
            entity.HasKey(e => e.NotifUsersNoPk);

            entity.Property(e => e.NotifUsersNoPk).HasColumnName("NotifUsersNo_PK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.NotifUsersId)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PackagingType>(entity =>
        {
            entity.HasKey(e => e.PackagingNoPk).HasName("PK_PackagingType");

            entity.Property(e => e.PackagingNoPk).HasColumnName("PackagingNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Pkgtype).HasColumnName("PKGType");
            entity.Property(e => e.PkgtypeDesc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PKGTypeDesc");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
        });

        modelBuilder.Entity<PackagingUsageBrdetail>(entity =>
        {
            entity.HasKey(e => e.PkgUsedBrdetailNoPk);

            entity.ToTable("PackagingUsageBRDetail");

            entity.Property(e => e.PkgUsedBrdetailNoPk).HasColumnName("PkgUsedBRDetailNo_PK");
            entity.Property(e => e.BlisterLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BrheaderNoFk).HasColumnName("BRHeaderNo_FK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BulkUnitQty).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MixLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PackQty).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PkgUsedBrheaderNoFk).HasColumnName("PkgUsedBRHeaderNo_FK");
            entity.Property(e => e.PostPacked).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PostSample).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PostStatusNoFk).HasColumnName("PostStatusNo_FK");

            entity.HasOne(d => d.PkgUsedBrheaderNoFkNavigation).WithMany(p => p.PackagingUsageBrdetails)
                .HasForeignKey(d => d.PkgUsedBrheaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackagingUsageBRDetail_PackagingUsageHeader");
        });

        modelBuilder.Entity<PackagingUsageBrpdflog>(entity =>
        {
            entity.HasKey(e => e.PkgBrpdfNoPk);

            entity.ToTable("PackagingUsageBRPDFLog");

            entity.Property(e => e.PkgBrpdfNoPk).HasColumnName("PkgBRpdfNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PkgUsedHeaderNoFk).HasColumnName("PkgUsedHeaderNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.UserIdnoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserIDNo_FK");
        });

        modelBuilder.Entity<PackagingUsageHeader>(entity =>
        {
            entity.HasKey(e => e.PkgUsedHeaderNoPk);

            entity.ToTable("PackagingUsageHeader");

            entity.Property(e => e.PkgUsedHeaderNoPk).HasColumnName("PkgUsedHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerNoFk).HasColumnName("CustomerNo_FK");
            entity.Property(e => e.ExpireDt).HasColumnType("datetime");
            entity.Property(e => e.ImorderQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMOrderQty");
            entity.Property(e => e.ItemMasterNoFk).HasColumnName("ItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.PkgBrfile).HasColumnName("PkgBRFile");
            entity.Property(e => e.PkgPostStatusFk).HasColumnName("PkgPostStatus_FK");
            entity.Property(e => e.PkgSchedReadyBy).HasMaxLength(50);
            entity.Property(e => e.PkgSchedReadyDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedRecvBy).HasMaxLength(50);
            entity.Property(e => e.PkgSchedRecvDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedRoom).HasMaxLength(50);
            entity.Property(e => e.PkgStatusNoFk).HasColumnName("PkgStatusNo_FK");
            entity.Property(e => e.Ponum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POnum");
            entity.Property(e => e.PostDt).HasColumnType("datetime");
            entity.Property(e => e.Postby)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pversion).HasColumnName("PVersion");
            entity.Property(e => e.QcapproveDt)
                .HasColumnType("datetime")
                .HasColumnName("QCApproveDt");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Sonum).HasColumnName("SOnum");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WhsLoc).HasMaxLength(50);
        });

        modelBuilder.Entity<PackagingUsageInstruction>(entity =>
        {
            entity.HasKey(e => e.PkgInstrNoPk);

            entity.ToTable("PackagingUsageInstruction");

            entity.Property(e => e.PkgInstrNoPk).HasColumnName("PkgInstrNo_PK");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Instruction).IsRequired();
            entity.Property(e => e.LastUpdBy).HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.PkgHdrNoFk).HasColumnName("PKgHdrNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.SectionId)
                .HasMaxLength(10)
                .HasColumnName("SectionID");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
        });

        modelBuilder.Entity<PackagingUsageRmdetail>(entity =>
        {
            entity.HasKey(e => e.PkgUsedRmdetailNoPk);

            entity.ToTable("PackagingUsageRMDetail");

            entity.Property(e => e.PkgUsedRmdetailNoPk).HasColumnName("PkgUsedRMDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PkgInvTransNoFk).HasColumnName("PkgInvTransNo_FK");
            entity.Property(e => e.PkgRawMaterialNoFk).HasColumnName("PkgRawMaterialNo_FK");
            entity.Property(e => e.PkgRmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PkgRMCode");
            entity.Property(e => e.PkgRmdesc)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("PkgRMDesc");
            entity.Property(e => e.PkgUsedRmheaderNoFk).HasColumnName("PkgUsedRMHeaderNo_FK");
            entity.Property(e => e.QtyActualUsed).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QtyDestroyed).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QtyRemain).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QtyRequested).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QtyTotalUsed).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RequiredQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RmwhsLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMWhsLotNumber");
            entity.Property(e => e.UnitQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.VendorLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorNoFk).HasColumnName("VendorNo_FK");

            entity.HasOne(d => d.PkgUsedRmheaderNoFkNavigation).WithMany(p => p.PackagingUsageRmdetails)
                .HasForeignKey(d => d.PkgUsedRmheaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackagingUsageHeader_PackagingUsageRMDetail");
        });

        modelBuilder.Entity<PalletInfo>(entity =>
        {
            entity.HasKey(e => e.PalletInfoPk);

            entity.ToTable("PalletInfo");

            entity.Property(e => e.PalletInfoPk).HasColumnName("PalletInfo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustPonum)
                .HasMaxLength(50)
                .HasColumnName("CustPONum");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<PhyBinMaster>(entity =>
        {
            entity.HasKey(e => e.PhyBinMasterPk);

            entity.ToTable("PhyBinMaster");

            entity.Property(e => e.PhyBinMasterPk).HasColumnName("PhyBinMaster_PK");
            entity.Property(e => e.BinDesc)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.BinLoc)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.WhsLoc).HasMaxLength(50);
        });

        modelBuilder.Entity<PhyTransferBatchDetail>(entity =>
        {
            entity.HasKey(e => e.BatchDetailPk);

            entity.ToTable("PhyTransferBatchDetail");

            entity.Property(e => e.BatchDetailPk).HasColumnName("BatchDetail_PK");
            entity.Property(e => e.BatchHeaderFk).HasColumnName("BatchHeader_FK");
            entity.Property(e => e.Item)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Lot).IsRequired();
            entity.Property(e => e.PalletId)
                .HasMaxLength(20)
                .HasColumnName("PalletID");
            entity.Property(e => e.QtyPerBox).HasColumnType("decimal(18, 6)");

            entity.HasOne(d => d.BatchHeaderFkNavigation).WithMany(p => p.PhyTransferBatchDetails)
                .HasForeignKey(d => d.BatchHeaderFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PhyTransferBatchDetail_PhyTransferBatchHeader1");
        });

        modelBuilder.Entity<PhyTransferBatchHeader>(entity =>
        {
            entity.HasKey(e => e.BatchPk).HasName("PK_PhyInvBatchHeader");

            entity.ToTable("PhyTransferBatchHeader");

            entity.Property(e => e.BatchPk).HasColumnName("Batch_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItemType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsLoc)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PhysicalInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Physical_Inventory");

            entity.Property(e => e.CustCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.ItemClass)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PalletId)
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.PhyInvDate).HasColumnType("datetime");
            entity.Property(e => e.QtyperBox).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RackLoc)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RcvDate).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RmlastCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMLastCost");
            entity.Property(e => e.Rmsource)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("RMSource");
            entity.Property(e => e.RmstandardCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMStandardCost");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.VendorLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.WhsLoc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PickTicketBinLocation>(entity =>
        {
            entity.HasKey(e => new { e.WhsLot, e.PtdhdrNoFk, e.BinLocation }).HasName("PK_PickTicketBinLocation_1");

            entity.ToTable("PickTicketBinLocation");

            entity.Property(e => e.WhsLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PtdhdrNoFk).HasColumnName("PTDHdrNo_FK");
            entity.Property(e => e.BinLocation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BinQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QtyPerBox).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<PickTicketDetail>(entity =>
        {
            entity.HasKey(e => e.PtdnoPk).HasName("PK_PickTicketDetail_1");

            entity.ToTable("PickTicketDetail");

            entity.Property(e => e.PtdnoPk).HasColumnName("PTDNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LockWhsLotBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LockWhsLotDt).HasColumnType("datetime");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.PtdhdrNoFk).HasColumnName("PTDHdrNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.UseQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PickTicketHeader>(entity =>
        {
            entity.HasKey(e => e.PthnoPk);

            entity.ToTable("PickTicketHeader");

            entity.Property(e => e.PthnoPk).HasColumnName("PTHNo_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.LabelClaim).HasMaxLength(255);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MgPerUnit).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.PthstatusNoFk).HasColumnName("PTHStatusNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmnotes)
                .IsUnicode(false)
                .HasColumnName("RMNotes");
            entity.Property(e => e.RmreqQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMReqQty");
            entity.Property(e => e.RmuseQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMUseQty");
            entity.Property(e => e.ShellItemMasterNoFk).HasColumnName("ShellItemMasterNo_FK");
        });

        modelBuilder.Entity<PillDiceCavity>(entity =>
        {
            entity.HasKey(e => e.PillDiceCavityNoPk);

            entity.ToTable("PillDiceCavity");

            entity.HasIndex(e => e.ShapeType, "ShapeType").IsUnique();

            entity.Property(e => e.PillDiceCavityNoPk).HasColumnName("PillDiceCavityNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PdccavitiesPerRound).HasColumnName("PDCCavitiesPerRound");
            entity.Property(e => e.PdcroundPerDice).HasColumnName("PDCRoundPerDice");
            entity.Property(e => e.PdcsortedX)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PDCSortedX");
            entity.Property(e => e.PdcsortedY)
                .IsRequired()
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("PDCSortedY");
            entity.Property(e => e.ReMarks).HasColumnType("ntext");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.ShapeCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShapeType)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PillSize>(entity =>
        {
            entity.HasKey(e => e.PillSizeNoPk);

            entity.ToTable("PillSize");

            entity.Property(e => e.PillSizeNoPk).HasColumnName("PillSizeNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PscavityPerRound).HasColumnName("PSCavityPerRound");
            entity.Property(e => e.PsdefaultedSize).HasColumnName("PSDefaultedSize");
            entity.Property(e => e.PsproductTypeNoFk).HasColumnName("PSProductTypeNo_FK");
            entity.Property(e => e.PsroundPerDice).HasColumnName("PSRoundPerDice");
            entity.Property(e => e.Pssize)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSSize");
            entity.Property(e => e.PssortedKey)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSSortedKey");
            entity.Property(e => e.ReMarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<PkgPlanningCache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PkgPlanning_Cache");

            entity.Property(e => e.BatchItemAdjAllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BatchItemRequiredQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BatchItemUsedQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BatchNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BatchQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Pversion).HasColumnName("PVersion");
            entity.Property(e => e.RemainOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainOH");
            entity.Property(e => e.RemainPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainPO");
            entity.Property(e => e.RemainQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainQC");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
        });

        modelBuilder.Entity<PkgSafetyStockItem>(entity =>
        {
            entity.HasKey(e => e.ItemCode);

            entity.ToTable("PkgSafetyStockItem");

            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<PkgSoStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Pkg_SO_Status");

            entity.Property(e => e.BrblendDt)
                .HasColumnType("datetime")
                .HasColumnName("BRBlendDt");
            entity.Property(e => e.Brlot)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BulkConfirmDt).HasColumnType("datetime");
            entity.Property(e => e.Csrep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CSrep");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Imqty).HasColumnName("IMQty");
            entity.Property(e => e.PackWhsLoc).HasMaxLength(50);
            entity.Property(e => e.PkgBomdt)
                .HasColumnType("datetime")
                .HasColumnName("PkgBOMDt");
            entity.Property(e => e.PkgConfirmDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedReadyDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedRecvDt).HasColumnType("datetime");
            entity.Property(e => e.Ponum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POnum");
            entity.Property(e => e.PostDate).HasColumnType("datetime");
            entity.Property(e => e.PostQty).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PostStatus)
                .IsRequired()
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.RemainQty).HasColumnName("remainQty");
            entity.Property(e => e.ReqDate).HasColumnType("datetime");
            entity.Property(e => e.Sodate)
                .HasColumnType("datetime")
                .HasColumnName("SODate");
            entity.Property(e => e.SodueDt)
                .HasColumnType("datetime")
                .HasColumnName("SODueDt");
            entity.Property(e => e.SohstockItem).HasColumnName("SOHStockItem");
            entity.Property(e => e.Sonum).HasColumnName("SONum");
            entity.Property(e => e.Sostatus)
                .IsRequired()
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SOstatus");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<PoStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PO_Status");

            entity.Property(e => e.Accepted).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.Aphpodate)
                .HasColumnType("datetime")
                .HasColumnName("APHPODate");
            entity.Property(e => e.Aptapponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTAPPONumber");
            entity.Property(e => e.AptconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("APTConfirmDt");
            entity.Property(e => e.AptdeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("APTDeliveryDate");
            entity.Property(e => e.AptrmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APTRMItemNumber");
            entity.Property(e => e.Dep)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ItemClass)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ItemNote).HasMaxLength(2000);
            entity.Property(e => e.Poqty).HasColumnName("POQty");
            entity.Property(e => e.Postatus1).HasColumnName("POStatus");
            entity.Property(e => e.Qcdate)
                .HasColumnType("datetime")
                .HasColumnName("QCDate");
            entity.Property(e => e.RcvHaptransNoFk).HasColumnName("RcvHAPTransNo_FK");
            entity.Property(e => e.RcvHeaderNoPk).HasColumnName("RcvHeaderNo_PK");
            entity.Property(e => e.RcvHisFullReceived).HasColumnName("RcvHIsFullReceived");
            entity.Property(e => e.Received).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.ReceivedDate).HasColumnType("datetime");
            entity.Property(e => e.Rejected).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.Returned).HasColumnType("decimal(38, 8)");
            entity.Property(e => e.ReturnedDate).HasColumnType("datetime");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.WhsLot)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WupQty)
                .HasColumnType("decimal(38, 6)")
                .HasColumnName("WUpQty");
        });

        modelBuilder.Entity<ProdMachine>(entity =>
        {
            entity.HasKey(e => e.MachineName).HasName("PK_ProdMachineA");

            entity.ToTable("ProdMachine");

            entity.Property(e => e.MachineName).HasMaxLength(250);
            entity.Property(e => e.MachineDesc).HasMaxLength(2500);
            entity.Property(e => e.MachineToolId)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("MachineTool_ID");
            entity.Property(e => e.Notes).HasMaxLength(2000);
            entity.Property(e => e.OutputAvgPerHr).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.ProdDept).HasMaxLength(50);
            entity.Property(e => e.ProdLocation).HasMaxLength(50);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rpm)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RPM");
            entity.Property(e => e.ToolSize).HasMaxLength(200);
        });

        modelBuilder.Entity<ProdMachineTool>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProdMachineTool");

            entity.Property(e => e.MachineToolId)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("MachineTool_ID");
            entity.Property(e => e.OutputAvgPerHr).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.ToolSize)
                .IsRequired()
                .HasMaxLength(10);
        });

        modelBuilder.Entity<ProdSchedule>(entity =>
        {
            entity.HasKey(e => e.ProdSchedNoPk);

            entity.ToTable("ProdSchedule");

            entity.Property(e => e.ProdSchedNoPk).HasColumnName("ProdSchedNo_PK");
            entity.Property(e => e.BrorPkgLot)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("BRorPkgLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DieSerial)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EncapQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MachineName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.SchedType).HasMaxLength(10);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.CatergoryPk);

            entity.ToTable("ProductCategory");

            entity.Property(e => e.CatergoryPk).HasColumnName("Catergory_PK");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductClassFk).HasColumnName("ProductClass_FK");
        });

        modelBuilder.Entity<ProductType>(entity =>
        {
            entity.HasKey(e => new { e.ProductTypePk, e.ProductClassFk });

            entity.Property(e => e.ProductTypePk).HasColumnName("ProductType_PK");
            entity.Property(e => e.ProductClassFk).HasColumnName("ProductClass_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsDisplay).HasColumnName("isDisplay");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Ptdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTDescription");
            entity.Property(e => e.Ptname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PTName");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<ProductionCode>(entity =>
        {
            entity.HasKey(e => e.ProductionCodeNoPk);

            entity.ToTable("ProductionCode");

            entity.Property(e => e.ProductionCodeNoPk)
                .ValueGeneratedNever()
                .HasColumnName("ProductionCodeNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ProductionCodeCategoryNoPk).HasColumnName("ProductionCodeCategoryNo_PK");
            entity.Property(e => e.ProductionCodeDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProductionCodeName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<Qbaccount>(entity =>
        {
            entity.HasKey(e => e.Qbaid);

            entity.ToTable("QBAccounts");

            entity.Property(e => e.Qbaid).HasColumnName("QBAID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QbaaccountDescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QBAAccountDescription");
            entity.Property(e => e.QbaaccountName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QBAAccountName");
            entity.Property(e => e.QbaaccountType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QBAAccountType");
            entity.Property(e => e.QbaaccountTypeShort)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QBAAccountTypeShort");
            entity.Property(e => e.QbarefNum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QBARefNum");
        });

        modelBuilder.Entity<QbexpSetup>(entity =>
        {
            entity.HasKey(e => e.Qbeid);

            entity.ToTable("QBExpSetup");

            entity.Property(e => e.Qbeid).HasColumnName("QBEID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QbelistFile)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("QBEListFile");
            entity.Property(e => e.QbeoutFile)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("QBEOutFile");
        });

        modelBuilder.Entity<Qbitem>(entity =>
        {
            entity.HasKey(e => e.Qbiid);

            entity.ToTable("QBItems");

            entity.Property(e => e.Qbiid).HasColumnName("QBIID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Qbiaccount).HasColumnName("QBIAccount");
            entity.Property(e => e.QbiitemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("QBIItemName");
            entity.Property(e => e.QbiitemType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QBIItemType");
            entity.Property(e => e.QbirefNum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QBIRefNum");
        });

        modelBuilder.Entity<Qbmapping>(entity =>
        {
            entity.ToTable("QBMapping");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Qbitem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QBItem");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rpitem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RPItem");
        });

        modelBuilder.Entity<QuoteDetail>(entity =>
        {
            entity.HasKey(e => e.QuoteDetailNoPk);

            entity.ToTable("QuoteDetail");

            entity.Property(e => e.QuoteDetailNoPk).HasColumnName("QuoteDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QaverifyBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAVerifyBy");
            entity.Property(e => e.QaverifyDt)
                .HasColumnType("datetime")
                .HasColumnName("QAVerifyDt");
            entity.Property(e => e.QaverifyStatus).HasColumnName("QAVerifyStatus");
            entity.Property(e => e.QdcostPerThousand).HasColumnName("QDCostPerThousand");
            entity.Property(e => e.QdcustomerItemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDCustomerItemNumber");
            entity.Property(e => e.QdcustomerOrderQty).HasColumnName("QDCustomerOrderQty");
            entity.Property(e => e.QddeliveryDate)
                .HasColumnType("datetime")
                .HasColumnName("QDDeliveryDate");
            entity.Property(e => e.QdextCost).HasColumnName("QDExtCost");
            entity.Property(e => e.QdextPrice).HasColumnName("QDExtPrice");
            entity.Property(e => e.QdfillWtPerUnit).HasColumnName("QDFillWtPerUnit");
            entity.Property(e => e.QdformulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDFormulaNumber");
            entity.Property(e => e.QdheaderNoFk).HasColumnName("QDHeaderNo_FK");
            entity.Property(e => e.QdimcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDIMCustomerNo_FK");
            entity.Property(e => e.QdimitemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDIMItem_ID");
            entity.Property(e => e.Qdimpack).HasColumnName("QDIMPack");
            entity.Property(e => e.QdimspecNoFk).HasColumnName("QDIMSpecNo_FK");
            entity.Property(e => e.QdimspecVersion)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("QDIMSpecVersion");
            entity.Property(e => e.QditemDescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QDItemDescription");
            entity.Property(e => e.QditemMasterNoFk).HasColumnName("QDItemMasterNo_FK");
            entity.Property(e => e.QditemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("QDItemMasterVer");
            entity.Property(e => e.Qdnotes).HasColumnName("QDNotes");
            entity.Property(e => e.QdorderedUom).HasColumnName("QDOrderedUOM");
            entity.Property(e => e.QdpricePerThousand).HasColumnName("QDPricePerThousand");
            entity.Property(e => e.QdproductionQty).HasColumnName("QDProductionQty");
            entity.Property(e => e.QdrnDfmlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDRnDFmlCode");
            entity.Property(e => e.QdrnDfmlCodeVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("QDRnDFmlCodeVer");
            entity.Property(e => e.QdrnDfmlNoFk).HasColumnName("QDRnDFmlNo_FK");
            entity.Property(e => e.QdstatusNoFk).HasColumnName("QDStatusNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDverifyBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDVerifyBy");
            entity.Property(e => e.RnDverifyDt)
                .HasColumnType("datetime")
                .HasColumnName("RnDVerifyDt");
            entity.Property(e => e.RnDverifyStatus).HasColumnName("RnDVerifyStatus");
        });

        modelBuilder.Entity<QuoteDetailFormula>(entity =>
        {
            entity.HasKey(e => e.QuoteFormulaNoPk);

            entity.ToTable("QuoteDetailFormula");

            entity.Property(e => e.QuoteFormulaNoPk).HasColumnName("QuoteFormulaNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QfformulaGelatin).HasColumnName("QFFormulaGelatin");
            entity.Property(e => e.QfgelFormulaNoFk).HasColumnName("QFGelFormulaNo_FK");
            entity.Property(e => e.QfgelItemMasterNoFk).HasColumnName("QFGelItemMasterNo_FK");
            entity.Property(e => e.QfitemMasterCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QFItemMasterCode");
            entity.Property(e => e.QfitemMasterDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QFItemMasterDesc");
            entity.Property(e => e.QfitemMasterNoFk).HasColumnName("QFItemMasterNo_FK");
            entity.Property(e => e.QfitemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("QFItemMasterVer");
            entity.Property(e => e.QflabelClaim)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasColumnName("QFLabelClaim");
            entity.Property(e => e.Qfmethod)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QFMethod");
            entity.Property(e => e.QfmlSortId).HasColumnName("QFmlSortID");
            entity.Property(e => e.QfpctOver).HasColumnName("QFPctOver");
            entity.Property(e => e.QfquoteDetailNoFk).HasColumnName("QFQuoteDetailNo_FK");
            entity.Property(e => e.QfquoteHeaderNoFk).HasColumnName("QFQuoteHeaderNo_FK");
            entity.Property(e => e.Qfrmdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QFRMDesc");
            entity.Property(e => e.QfrmitemCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QFRMItemCode");
            entity.Property(e => e.QfrmitemNoFk).HasColumnName("QFRMItemNo_FK");
            entity.Property(e => e.QfrmtotalWt).HasColumnName("QFRMTotalWt");
            entity.Property(e => e.QfrnDformulaCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QFRnDFormulaCode");
            entity.Property(e => e.QfrnDformulaCodeVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("QFRnDFormulaCodeVer");
            entity.Property(e => e.QfrnDformulaNoFk).HasColumnName("QFRnDFormulaNo_FK");
            entity.Property(e => e.Qfspec)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QFSpec");
            entity.Property(e => e.QfunitRmwt).HasColumnName("QFUnitRMWt");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuoteDetailLog>(entity =>
        {
            entity.HasKey(e => e.QuoteDetailLogNoPk).HasName("PK_QuoteDetailLog");

            entity.ToTable("QuoteDetailLOG");

            entity.Property(e => e.QuoteDetailLogNoPk).HasColumnName("QuoteDetailLogNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Qdldate)
                .HasColumnType("datetime")
                .HasColumnName("QDLDate");
            entity.Property(e => e.Qdlnotes)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("QDLNotes");
            entity.Property(e => e.QdlquoteHeaderNoFk).HasColumnName("QDLQuoteHeaderNo_FK");
            entity.Property(e => e.QdlsoheaderNoFk).HasColumnName("QDLSOHeaderNo_FK");
            entity.Property(e => e.QdluserIdFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QDLUserID_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<QuoteHeader>(entity =>
        {
            entity.HasKey(e => e.QuoteHeaderNoPk).HasName("PK_Quotations");

            entity.ToTable("QuoteHeader");

            entity.Property(e => e.QuoteHeaderNoPk).HasColumnName("QuoteHeaderNo_PK");
            entity.Property(e => e.BatchSize).HasMaxLength(50);
            entity.Property(e => e.Coating).HasMaxLength(50);
            entity.Property(e => e.Color).HasMaxLength(50);
            entity.Property(e => e.ColorType).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Csrep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CSRep");
            entity.Property(e => e.CustPonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustPOnum");
            entity.Property(e => e.CustPorecvDt)
                .HasColumnType("datetime")
                .HasColumnName("CustPORecvDt");
            entity.Property(e => e.DestinationCountry).HasMaxLength(50);
            entity.Property(e => e.EstAnnualVolume).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.ExistsFmlNver)
                .HasMaxLength(50)
                .HasColumnName("ExistsFmlNVer");
            entity.Property(e => e.Flavor).HasMaxLength(50);
            entity.Property(e => e.Flexibility).HasMaxLength(50);
            entity.Property(e => e.Formulator).HasMaxLength(50);
            entity.Property(e => e.GelType).HasMaxLength(50);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LeadCodeFk)
                .HasMaxLength(50)
                .HasColumnName("LeadCode_FK");
            entity.Property(e => e.NeedMatching).HasMaxLength(50);
            entity.Property(e => e.NonGmo).HasColumnName("NonGMO");
            entity.Property(e => e.Nsfsport).HasColumnName("NSFSport");
            entity.Property(e => e.ProductDesc).HasMaxLength(500);
            entity.Property(e => e.ProductTypeFk).HasColumnName("ProductType_FK");
            entity.Property(e => e.ProjectedServingSize).HasMaxLength(50);
            entity.Property(e => e.QhapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHApprovedBy");
            entity.Property(e => e.QhapprovedDate)
                .HasColumnType("datetime")
                .HasColumnName("QHApprovedDate");
            entity.Property(e => e.QhattnEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHAttnEmail");
            entity.Property(e => e.QhattnFax)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHAttnFax");
            entity.Property(e => e.QhattnName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHAttnName");
            entity.Property(e => e.QhattnPhone)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHAttnPhone");
            entity.Property(e => e.QhattnTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHAttnTitle");
            entity.Property(e => e.QhcostStructureModified).HasColumnName("QHCostStructureModified");
            entity.Property(e => e.QhcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHCustomerNo_FK");
            entity.Property(e => e.QhexpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("QHExpirationDate");
            entity.Property(e => e.QhisItemMaster).HasColumnName("QHIsItemMaster");
            entity.Property(e => e.Qhnotes).HasColumnName("QHNotes");
            entity.Property(e => e.QhpreparedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHPreparedBy");
            entity.Property(e => e.QhquoteDate)
                .HasColumnType("datetime")
                .HasColumnName("QHQuoteDate");
            entity.Property(e => e.Qhremarks)
                .HasColumnType("ntext")
                .HasColumnName("QHRemarks");
            entity.Property(e => e.QhsoheaderNoFk).HasColumnName("QHSOHeaderNo_FK");
            entity.Property(e => e.QhsortedKey)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("QHSortedKey");
            entity.Property(e => e.QhstatusNoFk).HasColumnName("QHStatusNo_FK");
            entity.Property(e => e.QhvoidedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHVoidedBy");
            entity.Property(e => e.QhvoidedDate)
                .HasColumnType("datetime")
                .HasColumnName("QHVoidedDate");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rfqno)
                .HasMaxLength(50)
                .HasColumnName("RFQNo");
            entity.Property(e => e.RfqreadyToSign).HasColumnName("RFQReadyToSign");
            entity.Property(e => e.Rfqrequest)
                .HasMaxLength(50)
                .HasColumnName("RFQRequest");
            entity.Property(e => e.Rfqstatus)
                .HasMaxLength(50)
                .HasColumnName("RFQStatus");
            entity.Property(e => e.SaleRep)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SizeShape).HasMaxLength(50);
            entity.Property(e => e.TypeOfChange).HasMaxLength(50);
        });

        modelBuilder.Entity<QuotePkgCostDetailEstimate>(entity =>
        {
            entity.HasKey(e => e.QpcostDetailPk);

            entity.ToTable("QuotePkgCostDetailEstimate");

            entity.Property(e => e.QpcostDetailPk).HasColumnName("QPCostDetail_PK");
            entity.Property(e => e.BulkCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CpnCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ProfitPct).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QpcostHdrFk).HasColumnName("QPCostHdr_FK");
            entity.Property(e => e.QuoteBulkHdrFk).HasColumnName("QuoteBulkHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.YieldPct).HasColumnType("decimal(18, 6)");

            entity.HasOne(d => d.QpcostHdrFkNavigation).WithMany(p => p.QuotePkgCostDetailEstimates)
                .HasForeignKey(d => d.QpcostHdrFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuotePkgCostDetailEstimate_QuotePkgHeader");
        });

        modelBuilder.Entity<QuotePkgCostDetailEstimateLog>(entity =>
        {
            entity.HasKey(e => e.QpcostDetailLogPk);

            entity.ToTable("QuotePkgCostDetailEstimateLOG");

            entity.Property(e => e.QpcostDetailLogPk).HasColumnName("QPCostDetailLOG_PK");
            entity.Property(e => e.BulkCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CpnCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ProfitPct).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QpcostDetailPk).HasColumnName("QPCostDetail_PK");
            entity.Property(e => e.QpcostHdrFk).HasColumnName("QPCostHdr_FK");
            entity.Property(e => e.QuoteBulkHdrFk).HasColumnName("QuoteBulkHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.YieldPct).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<QuotePkgCostDetailEstimateRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuotePkgCostDetailEstimate-REMOVE");

            entity.Property(e => e.BulkCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CpnCost).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ProfitPct).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.QpcostDetailPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("QPCostDetail_PK");
            entity.Property(e => e.QpcostHdrFk).HasColumnName("QPCostHdr_FK");
            entity.Property(e => e.QuoteBulkHdrFk).HasColumnName("QuoteBulkHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark).HasMaxLength(500);
            entity.Property(e => e.YieldPct).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<QuotePkgCpnDetailEstimate>(entity =>
        {
            entity.HasKey(e => e.QpcomponentDetailPk);

            entity.ToTable("QuotePkgCpnDetailEstimate");

            entity.Property(e => e.QpcomponentDetailPk).HasColumnName("QPComponentDetail_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QpcpnHdrFk).HasColumnName("QPCpnHdr_FK");
            entity.Property(e => e.QuoteBulkFk).HasColumnName("QuoteBulk_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmitemFk).HasColumnName("RMItem_FK");
            entity.Property(e => e.Rmqty)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RMQty");
            entity.Property(e => e.RmunitCost)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RMUnitCost");

            entity.HasOne(d => d.QpcpnHdrFkNavigation).WithMany(p => p.QuotePkgCpnDetailEstimates)
                .HasForeignKey(d => d.QpcpnHdrFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuotePkgCpnDetailEstimate_QuotePkgHeader");
        });

        modelBuilder.Entity<QuotePkgCpnDetailEstimateLog>(entity =>
        {
            entity.HasKey(e => e.QpcomponentDetailLogPk);

            entity.ToTable("QuotePkgCpnDetailEstimateLOG");

            entity.Property(e => e.QpcomponentDetailLogPk).HasColumnName("QPComponentDetailLOG_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QpcomponentDetailPk).HasColumnName("QPComponentDetail_PK");
            entity.Property(e => e.QpcpnHdrFk).HasColumnName("QPCpnHdr_FK");
            entity.Property(e => e.QuoteBulkFk).HasColumnName("QuoteBulk_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmitemFk).HasColumnName("RMItem_FK");
            entity.Property(e => e.Rmqty)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RMQty");
            entity.Property(e => e.RmunitCost)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RMUnitCost");
        });

        modelBuilder.Entity<QuotePkgHeader>(entity =>
        {
            entity.HasKey(e => e.QpheaderPk);

            entity.ToTable("QuotePkgHeader", tb => tb.HasTrigger("trigger_QuotePkgHeader"));

            entity.Property(e => e.QpheaderPk).HasColumnName("QPHeader_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerFk).HasColumnName("Customer_FK");
            entity.Property(e => e.ItemMasterNoFk).HasColumnName("ItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QhapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHApprovedBy");
            entity.Property(e => e.QhapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("QHApprovedDt");
            entity.Property(e => e.QuoteBulkHdrFk).HasColumnName("QuoteBulkHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDfmlNoFk).HasColumnName("RnDFmlNo_FK");
        });

        modelBuilder.Entity<QuotePkgHeaderLog>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("QuotePkgHeaderLOG");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustomerFk).HasColumnName("Customer_FK");
            entity.Property(e => e.ItemMasterNoFk).HasColumnName("ItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QhapprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHApprovedBy");
            entity.Property(e => e.QhapprovedDt)
                .HasColumnType("datetime")
                .HasColumnName("QHApprovedDt");
            entity.Property(e => e.QpheaderPk).HasColumnName("QPHeader_PK");
            entity.Property(e => e.QuoteBulkHdrFk).HasColumnName("QuoteBulkHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDfmlNoFk).HasColumnName("RnDFmlNo_FK");
        });

        modelBuilder.Entity<QuotePkgLaborDetailEstimate>(entity =>
        {
            entity.HasKey(e => e.QplaborDetailPk);

            entity.ToTable("QuotePkgLaborDetailEstimate");

            entity.Property(e => e.QplaborDetailPk).HasColumnName("QPLaborDetail_PK");
            entity.Property(e => e.CostPerHour).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Hours).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QplaborHdrFk).HasColumnName("QPLaborHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Task)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UnitProduced).HasColumnType("decimal(18, 6)");

            entity.HasOne(d => d.QplaborHdrFkNavigation).WithMany(p => p.QuotePkgLaborDetailEstimates)
                .HasForeignKey(d => d.QplaborHdrFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuotePkgLaborDetailEstimate_QuotePkgHeader");
        });

        modelBuilder.Entity<QuotePkgLaborDetailEstimateLog>(entity =>
        {
            entity.HasKey(e => e.LaborDetailLogPk);

            entity.ToTable("QuotePkgLaborDetailEstimateLOG");

            entity.Property(e => e.LaborDetailLogPk).HasColumnName("LaborDetailLOG_PK");
            entity.Property(e => e.CostPerHour).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Hours).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QplaborDetailPk).HasColumnName("QPLaborDetail_PK");
            entity.Property(e => e.QplaborHdrFk).HasColumnName("QPLaborHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Task)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UnitProduced).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<QuotePkgOvrHdDetailEstimate>(entity =>
        {
            entity.HasKey(e => e.QpovrHdDetailPk);

            entity.ToTable("QuotePkgOvrHdDetailEstimate");

            entity.Property(e => e.QpovrHdDetailPk).HasColumnName("QPOvrHdDetail_PK");
            entity.Property(e => e.CostPerHour).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Hours).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QpovrHdHdrFk).HasColumnName("QPOvrHdHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Task)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UnitProduced).HasColumnType("decimal(18, 6)");

            entity.HasOne(d => d.QpovrHdHdrFkNavigation).WithMany(p => p.QuotePkgOvrHdDetailEstimates)
                .HasForeignKey(d => d.QpovrHdHdrFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuotePkgOvrHdDetailEstimate_QuotePkgHeader");
        });

        modelBuilder.Entity<QuotePkgOvrHdDetailEstimateLog>(entity =>
        {
            entity.HasKey(e => e.OvrHdDetailLogPk);

            entity.ToTable("QuotePkgOvrHdDetailEstimateLOG");

            entity.Property(e => e.OvrHdDetailLogPk).HasColumnName("OvrHdDetailLOG_PK");
            entity.Property(e => e.CostPerHour).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Hours).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QpovrHdDetailPk).HasColumnName("QPOvrHdDetail_PK");
            entity.Property(e => e.QpovrHdHdrFk).HasColumnName("QPOvrHdHdr_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Task)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UnitProduced).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<QuoteRfqlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_QuoteRPQLog");

            entity.ToTable("QuoteRFQLog");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Csrep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CSRep");
            entity.Property(e => e.Formulator).HasMaxLength(50);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ProductDesc).HasMaxLength(500);
            entity.Property(e => e.ProductTypeFk).HasColumnName("ProductType_FK");
            entity.Property(e => e.QfmlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QFmlCode");
            entity.Property(e => e.QfmlCodeVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("QFmlCodeVer");
            entity.Property(e => e.QhcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QHCustomerNo_FK");
            entity.Property(e => e.Qhnotes)
                .HasColumnType("ntext")
                .HasColumnName("QHNotes");
            entity.Property(e => e.QhsoheaderNoFk).HasColumnName("QHSOHeaderNo_FK");
            entity.Property(e => e.QhstatusNoFk).HasColumnName("QHStatusNo_FK");
            entity.Property(e => e.QuoteHeaderNoFk).HasColumnName("QuoteHeaderNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rfqno)
                .HasMaxLength(50)
                .HasColumnName("RFQNo");
            entity.Property(e => e.Rfqrequest)
                .HasMaxLength(50)
                .HasColumnName("RFQRequest");
            entity.Property(e => e.Rfqstatus)
                .HasMaxLength(50)
                .HasColumnName("RFQStatus");
            entity.Property(e => e.SaleRep)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuoteRfqstatus>(entity =>
        {
            entity.HasKey(e => e.RfqstatusId).HasName("PK_QuoteRPQStatus");

            entity.ToTable("QuoteRFQStatus");

            entity.Property(e => e.RfqstatusId)
                .ValueGeneratedOnAdd()
                .HasColumnName("RFQStatusId");
            entity.Property(e => e.Rfqstatus)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("RFQStatus");
            entity.Property(e => e.Type).HasMaxLength(25);
        });

        modelBuilder.Entity<RawMaterial>(entity =>
        {
            entity.HasKey(e => new { e.RawMaterialNoPk, e.RmitemNumber });

            entity.ToTable("RawMaterial", tb =>
                {
                    tb.HasTrigger("trigger_RawMaterial_Insert");
                    tb.HasTrigger("trigger_RawMaterial_Update");
                });

            entity.HasIndex(e => e.RmitemNumber, "IX_RawMaterial").IsUnique();

            entity.HasIndex(e => e.Rmdescription, "IX_RawMaterialDescription");

            entity.Property(e => e.RawMaterialNoPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("RawMaterialNo_PK");
            entity.Property(e => e.RmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNumber");
            entity.Property(e => e.ActiveIngredient).HasMaxLength(250);
            entity.Property(e => e.Carrier).HasMaxLength(250);
            entity.Property(e => e.Category).HasMaxLength(250);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Division).HasMaxLength(250);
            entity.Property(e => e.ExternalDescription)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PlantPart).HasMaxLength(250);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RmbookValue)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMBookValue");
            entity.Property(e => e.RmbrandName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMBrandName");
            entity.Property(e => e.RmchemName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMChemName");
            entity.Property(e => e.RmconversionPieces).HasColumnName("RMConversionPieces");
            entity.Property(e => e.RmcustItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCustItem");
            entity.Property(e => e.RmcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCustomerNo_FK");
            entity.Property(e => e.RmcustomerSupplied).HasColumnName("RMCustomerSupplied");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.Rmdiscontinue).HasColumnName("RMDiscontinue");
            entity.Property(e => e.RmglcostAccountNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLCostAccountNo_FK");
            entity.Property(e => e.RmglcostCenterNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLCostCenterNo_FK");
            entity.Property(e => e.RmglrevAccountNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLRevAccountNo_FK");
            entity.Property(e => e.RmglrevSubAccountNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLRevSubAccountNo_FK");
            entity.Property(e => e.RmgrossWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMGrossWeight");
            entity.Property(e => e.Rmheight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMHeight");
            entity.Property(e => e.RmlastApcost)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RMLastAPCost");
            entity.Property(e => e.RmlastApdate)
                .HasColumnType("datetime")
                .HasColumnName("RMLastAPDate");
            entity.Property(e => e.RmlastCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMLastCost");
            entity.Property(e => e.RmlastPodate)
                .HasColumnType("datetime")
                .HasColumnName("RMLastPODate");
            entity.Property(e => e.RmlastStdCostBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMLastStdCostBy");
            entity.Property(e => e.RmlastStdCostDate)
                .HasColumnType("datetime")
                .HasColumnName("RMLastStdCostDate");
            entity.Property(e => e.RmlatinName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMLatinName");
            entity.Property(e => e.Rmlength)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMLength");
            entity.Property(e => e.RmminQtyInStock)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMMinQtyInStock");
            entity.Property(e => e.RmminQtyPur)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMMinQtyPur");
            entity.Property(e => e.RmneedManualOrder).HasColumnName("RMNeedManualOrder");
            entity.Property(e => e.RmnetWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMNetWeight");
            entity.Property(e => e.Rmpack).HasColumnName("RMPack");
            entity.Property(e => e.RmpalBaseX).HasColumnName("RMPalBaseX");
            entity.Property(e => e.RmpalBaseY).HasColumnName("RMPalBaseY");
            entity.Property(e => e.RmpalHeight).HasColumnName("RMPalHeight");
            entity.Property(e => e.RmpkgCategoryNoFk).HasColumnName("RMPkgCategoryNo_FK");
            entity.Property(e => e.RmpkgCount).HasColumnName("RMPkgCount");
            entity.Property(e => e.RmpkgProdType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPkgProdType");
            entity.Property(e => e.RmpkgVer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPkgVer");
            entity.Property(e => e.RmpotencyName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMPotencyName");
            entity.Property(e => e.RmproductClassNoFk).HasColumnName("RMProductClassNo_FK");
            entity.Property(e => e.RmproductTypeNoFk).HasColumnName("RMProductTypeNo_FK");
            entity.Property(e => e.RmqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyAllocated");
            entity.Property(e => e.RmqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyBackOrdered");
            entity.Property(e => e.RmqtyExpired)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyExpired");
            entity.Property(e => e.RmqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyInProduction");
            entity.Property(e => e.RmqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyInQCInspection");
            entity.Property(e => e.RmqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyOH");
            entity.Property(e => e.RmqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyOrdered");
            entity.Property(e => e.RmqtyReceived)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyReceived");
            entity.Property(e => e.RmqtyReserved)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyReserved");
            entity.Property(e => e.RmqtyShipped)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyShipped");
            entity.Property(e => e.RmqtyToBePurchased)
                .HasComment("Not USed")
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyToBePurchased");
            entity.Property(e => e.RmqtyWeightedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyWeightedUp");
            entity.Property(e => e.RmstandardCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMStandardCost");
            entity.Property(e => e.RmunitCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMUnitCost");
            entity.Property(e => e.RmunitCostFactor).HasColumnName("RMUnitCostFactor");
            entity.Property(e => e.RmuomFk).HasColumnName("RMUOM_FK");
            entity.Property(e => e.Rmvolume)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVolume");
            entity.Property(e => e.Rmwidth)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMWidth");
        });

        modelBuilder.Entity<RawMaterialByVendor>(entity =>
        {
            entity.HasKey(e => e.RawMaterialVendorNoPk).HasName("PK_RawMaterials");

            entity.ToTable("RawMaterialByVendor", tb =>
                {
                    tb.HasTrigger("trigger_RawMaterialByVendor_Insert");
                    tb.HasTrigger("trigger_RawMaterialByVendor_Update");
                });

            entity.HasIndex(e => e.RmvrawMaterialItemNumber, "RMItem");

            entity.HasIndex(e => e.RmvvendorNoFk, "VendorId");

            entity.Property(e => e.RawMaterialVendorNoPk).HasColumnName("RawMaterialVendorNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Rmdensity)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMDensity");
            entity.Property(e => e.RmdensityConversion).HasColumnName("RMDensityConversion");
            entity.Property(e => e.RmuomFk).HasColumnName("RMUOM_FK");
            entity.Property(e => e.Rmvactive).HasColumnName("RMVActive");
            entity.Property(e => e.RmvbookValue)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVBookValue");
            entity.Property(e => e.RmvcasePerPallet)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVCasePerPallet");
            entity.Property(e => e.RmvconversionPieces).HasColumnName("RMVConversionPieces");
            entity.Property(e => e.RmvcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVCustomerNo_FK");
            entity.Property(e => e.Rmvdescription)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("RMVDescription");
            entity.Property(e => e.RmvgrossWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVGrossWeight");
            entity.Property(e => e.Rmvheight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVHeight");
            entity.Property(e => e.RmvlastCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLastCost");
            entity.Property(e => e.RmvlastStdCostEnterBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLastStdCostEnterBy");
            entity.Property(e => e.RmvlastStdCostQuoteBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLastStdCostQuoteBy");
            entity.Property(e => e.RmvlastStdCostQuoteDt)
                .HasColumnType("datetime")
                .HasColumnName("RMVLastStdCostQuoteDt");
            entity.Property(e => e.RmvleadTimeInDays).HasColumnName("RMVLeadTimeInDays");
            entity.Property(e => e.Rmvlength)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLength");
            entity.Property(e => e.RmvminQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVMinQty");
            entity.Property(e => e.RmvnetWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVNetWeight");
            entity.Property(e => e.Rmvnote)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("RMVNote");
            entity.Property(e => e.Rmvpack).HasColumnName("RMVPack");
            entity.Property(e => e.RmvpalBaseX).HasColumnName("RMVPalBaseX");
            entity.Property(e => e.RmvpalBaseY).HasColumnName("RMVPalBaseY");
            entity.Property(e => e.RmvpalHeight).HasColumnName("RMVPalHeight");
            entity.Property(e => e.RmvqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyAllocated");
            entity.Property(e => e.RmvqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyBackOrdered");
            entity.Property(e => e.RmvqtyExpired)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyExpired");
            entity.Property(e => e.RmvqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyInProduction");
            entity.Property(e => e.RmvqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyInQCInspection");
            entity.Property(e => e.RmvqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyOH");
            entity.Property(e => e.RmvqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyOrdered");
            entity.Property(e => e.RmvqtyReceived)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyReceived");
            entity.Property(e => e.RmvqtyReserved)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyReserved");
            entity.Property(e => e.RmvqtyWeightedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyWeightedUp");
            entity.Property(e => e.RmvquoteNote)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RMVQuoteNote");
            entity.Property(e => e.RmvquoteQtyPerStdCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQuoteQtyPerStdCost");
            entity.Property(e => e.RmvrawMaterialItemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVRawMaterialItemNumber");
            entity.Property(e => e.RmvrawMaterialNoFk).HasColumnName("RMVRawMaterialNo_FK");
            entity.Property(e => e.RmvstandardCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVStandardCost");
            entity.Property(e => e.RmvunitCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVUnitCost");
            entity.Property(e => e.RmvvendorItemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVVendorItemNumber");
            entity.Property(e => e.RmvvendorNoFk).HasColumnName("RMVVendorNo_FK");
            entity.Property(e => e.Rmvvolume)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVVolume");
            entity.Property(e => e.Rmvwidth)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVWidth");

            entity.HasOne(d => d.RmvrawMaterialItemNumberNavigation).WithMany(p => p.RawMaterialByVendors)
                .HasPrincipalKey(p => p.RmitemNumber)
                .HasForeignKey(d => d.RmvrawMaterialItemNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RawMaterialByVendor_RawMaterial");

            entity.HasOne(d => d.RmvvendorNoFkNavigation).WithMany(p => p.RawMaterialByVendors)
                .HasForeignKey(d => d.RmvvendorNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RawMaterialByVendor_Vendor");
        });

        modelBuilder.Entity<RawMaterialByVendorByLot>(entity =>
        {
            entity.HasKey(e => e.RminvLotNoPk);

            entity.ToTable("RawMaterialByVendorByLot");

            entity.Property(e => e.RminvLotNoPk).HasColumnName("RMInvLotNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNumber");
            entity.Property(e => e.RmvlconversionPieces).HasColumnName("RMVLConversionPieces");
            entity.Property(e => e.RmvlexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVLExpiredDate");
            entity.Property(e => e.Rmvlnotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMVLNotes");
            entity.Property(e => e.RmvlqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyAllocated");
            entity.Property(e => e.RmvlqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyBackOrdered");
            entity.Property(e => e.RmvlqtyExpired)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyExpired");
            entity.Property(e => e.RmvlqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyInProduction");
            entity.Property(e => e.RmvlqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyInQCInspection");
            entity.Property(e => e.RmvlqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyOH");
            entity.Property(e => e.RmvlqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyOrdered");
            entity.Property(e => e.RmvlqtyRecv)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyRecv");
            entity.Property(e => e.RmvlqtyReserved)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyReserved");
            entity.Property(e => e.RmvlqtyWeighedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyWeighedUp");
            entity.Property(e => e.RmvlrawMaterialNoFk).HasColumnName("RMVLRawMaterialNo_FK");
            entity.Property(e => e.Rmvlremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMVLRemarks");
            entity.Property(e => e.RmvlretestBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLRetestBy");
            entity.Property(e => e.RmvlretestDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVLRetestDate");
            entity.Property(e => e.RmvlretestStatus).HasColumnName("RMVLRetestStatus");
            entity.Property(e => e.RmvlvendorLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLVendorLotNumber");
            entity.Property(e => e.RmvlvendorNoFk).HasColumnName("RMVLVendorNo_FK");
            entity.Property(e => e.Rmvlverified).HasColumnName("RMVLVerified");
            entity.Property(e => e.RmvlwhsLotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLWhsLotNumber");
            entity.Property(e => e.RmvlwhsOldLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLWhsOldLotNumber");
            entity.Property(e => e.XferBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XferDt).HasColumnType("datetime");
            entity.Property(e => e.XferFromRmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("XferFromRMCode");
        });

        modelBuilder.Entity<RawMaterialByVendorByLotLog>(entity =>
        {
            entity.HasKey(e => e.RmbvblPk).HasName("PK_RawMaterialByVendorByLotLog");

            entity.ToTable("RawMaterialByVendorByLotLOG");

            entity.Property(e => e.RmbvblPk).HasColumnName("RMBVBL_PK");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RminvLotNoPk).HasColumnName("RMInvLotNo_PK");
            entity.Property(e => e.RmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNumber");
            entity.Property(e => e.RmvlconversionPieces).HasColumnName("RMVLConversionPieces");
            entity.Property(e => e.RmvlconversionQtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLConversionQtyOH");
            entity.Property(e => e.RmvlexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVLExpiredDate");
            entity.Property(e => e.Rmvlnotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMVLNotes");
            entity.Property(e => e.RmvlphysicalInventoryQtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLPhysicalInventoryQtyOH");
            entity.Property(e => e.RmvlqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyAllocated");
            entity.Property(e => e.RmvlqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyBackOrdered");
            entity.Property(e => e.RmvlqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyInProduction");
            entity.Property(e => e.RmvlqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyInQCInspection");
            entity.Property(e => e.RmvlqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyOH");
            entity.Property(e => e.RmvlqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyOrdered");
            entity.Property(e => e.RmvlqtyRecv)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyRecv");
            entity.Property(e => e.RmvlqtyWeighedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyWeighedUp");
            entity.Property(e => e.RmvlrawMaterialNoFk).HasColumnName("RMVLRawMaterialNo_FK");
            entity.Property(e => e.Rmvlremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMVLRemarks");
            entity.Property(e => e.RmvlretestBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLRetestBy");
            entity.Property(e => e.RmvlretestDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVLRetestDate");
            entity.Property(e => e.RmvlvendorLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLVendorLotNumber");
            entity.Property(e => e.RmvlvendorNoFk).HasColumnName("RMVLVendorNo_FK");
            entity.Property(e => e.Rmvlverified).HasColumnName("RMVLVerified");
            entity.Property(e => e.RmvlwhsLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLWhsLotNumber");
            entity.Property(e => e.RmvlwhsOldLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLWhsOldLotNumber");
            entity.Property(e => e.XferBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XferDt).HasColumnType("datetime");
            entity.Property(e => e.XferFromRmFk).HasColumnName("XferFromRM_FK");
        });

        modelBuilder.Entity<RawMaterialByVendorByLotRemove>(entity =>
        {
            entity.HasKey(e => e.RminvLotNoPk).HasName("PK_RMInventoryLot");

            entity.ToTable("RawMaterialByVendorByLot-REMOVE");

            entity.HasIndex(e => e.RmvlwhsLotNumber, "IX_LotNo").IsUnique();

            entity.HasIndex(e => e.RmvlrawMaterialNoFk, "IX_RawCode");

            entity.Property(e => e.RminvLotNoPk).HasColumnName("RMInvLotNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmitemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNumber");
            entity.Property(e => e.RmvlconversionPieces).HasColumnName("RMVLConversionPieces");
            entity.Property(e => e.RmvlconversionQtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLConversionQtyOH");
            entity.Property(e => e.RmvlexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVLExpiredDate");
            entity.Property(e => e.Rmvlnotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMVLNotes");
            entity.Property(e => e.RmvlphysicalInventoryQtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLPhysicalInventoryQtyOH");
            entity.Property(e => e.RmvlqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyAllocated");
            entity.Property(e => e.RmvlqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyBackOrdered");
            entity.Property(e => e.RmvlqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyInProduction");
            entity.Property(e => e.RmvlqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyInQCInspection");
            entity.Property(e => e.RmvlqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyOH");
            entity.Property(e => e.RmvlqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyOrdered");
            entity.Property(e => e.RmvlqtyRecv)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyRecv");
            entity.Property(e => e.RmvlqtyWeighedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLQtyWeighedUp");
            entity.Property(e => e.RmvlrawMaterialNoFk).HasColumnName("RMVLRawMaterialNo_FK");
            entity.Property(e => e.Rmvlremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMVLRemarks");
            entity.Property(e => e.RmvlretestBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLRetestBy");
            entity.Property(e => e.RmvlretestDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVLRetestDate");
            entity.Property(e => e.RmvlretestStatus).HasColumnName("RMVLRetestStatus");
            entity.Property(e => e.RmvlvendorLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLVendorLotNumber");
            entity.Property(e => e.RmvlvendorNoFk).HasColumnName("RMVLVendorNo_FK");
            entity.Property(e => e.Rmvlverified).HasColumnName("RMVLVerified");
            entity.Property(e => e.RmvlwhsLotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLWhsLotNumber");
            entity.Property(e => e.RmvlwhsOldLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLWhsOldLotNumber");
            entity.Property(e => e.XferBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.XferDt).HasColumnType("datetime");
            entity.Property(e => e.XferFromRmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("XferFromRMCode");
        });

        modelBuilder.Entity<RawMaterialByVendorHistoricalPrice>(entity =>
        {
            entity.HasKey(e => e.RawMaterialVendorHistoricalPriceNoPk);

            entity.ToTable("RawMaterialByVendorHistoricalPrice");

            entity.Property(e => e.RawMaterialVendorHistoricalPriceNoPk).HasColumnName("RawMaterialVendorHistoricalPriceNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.RmvhpchangeBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVHPChangeBy");
            entity.Property(e => e.RmvhpchangeDate)
                .HasColumnType("datetime")
                .HasColumnName("RMVHPChangeDate");
            entity.Property(e => e.RmvhpcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVHPCustomerNo_FK");
            entity.Property(e => e.Rmvhppack)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVHPPack");
            entity.Property(e => e.RmvhppriceNew).HasColumnName("RMVHPPriceNew");
            entity.Property(e => e.RmvhppriceOld).HasColumnName("RMVHPPriceOld");
            entity.Property(e => e.RmvhprawMaterialItemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVHPRawMaterialItemNumber");
            entity.Property(e => e.RmvhprawMaterialNoFk).HasColumnName("RMVHPRawMaterialNo_FK");
            entity.Property(e => e.RmvhpvendorNoFk).HasColumnName("RMVHPVendorNo_FK");
            entity.Property(e => e.RmvnewMinQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVNewMinQty");
            entity.Property(e => e.RmvoldMinQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVOldMinQty");
            entity.Property(e => e.RmvquoteNote)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RMVQuoteNote");
            entity.Property(e => e.RmvquoteQtyNew)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQuoteQtyNew");
            entity.Property(e => e.RmvquoteQtyOld)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQuoteQtyOld");
            entity.Property(e => e.Rmvquoteby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVQuoteby");
        });

        modelBuilder.Entity<RawMaterialByVendorLog>(entity =>
        {
            entity.HasKey(e => e.RawMaterialVendorLognoPk);

            entity.ToTable("RawMaterialByVendorLOG");

            entity.Property(e => e.RawMaterialVendorLognoPk).HasColumnName("RawMaterialVendorLOGNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RawMaterialVendorNoPk).HasColumnName("RawMaterialVendorNo_PK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Rmdensity).HasColumnName("RMDensity");
            entity.Property(e => e.RmdensityConversion).HasColumnName("RMDensityConversion");
            entity.Property(e => e.RmuomFk).HasColumnName("RMUOM_FK");
            entity.Property(e => e.Rmvactive).HasColumnName("RMVActive");
            entity.Property(e => e.RmvbookValue)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVBookValue");
            entity.Property(e => e.RmvcasePerPallet)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVCasePerPallet");
            entity.Property(e => e.RmvconversionPieces).HasColumnName("RMVConversionPieces");
            entity.Property(e => e.RmvcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVCustomerNo_FK");
            entity.Property(e => e.Rmvdescription)
                .IsRequired()
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("RMVDescription");
            entity.Property(e => e.RmvgrossWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVGrossWeight");
            entity.Property(e => e.Rmvheight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVHeight");
            entity.Property(e => e.RmvlastCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLastCost");
            entity.Property(e => e.RmvlastStdCostEnterBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLastStdCostEnterBy");
            entity.Property(e => e.RmvlastStdCostQuoteBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLastStdCostQuoteBy");
            entity.Property(e => e.RmvlastStdCostQuoteDt)
                .HasColumnType("datetime")
                .HasColumnName("RMVLastStdCostQuoteDt");
            entity.Property(e => e.RmvleadTimeInDays).HasColumnName("RMVLeadTimeInDays");
            entity.Property(e => e.Rmvlength)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVLength");
            entity.Property(e => e.RmvminQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVMinQty");
            entity.Property(e => e.RmvnetWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVNetWeight");
            entity.Property(e => e.Rmvnote)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("RMVNote");
            entity.Property(e => e.Rmvpack).HasColumnName("RMVPack");
            entity.Property(e => e.RmvpalBaseX).HasColumnName("RMVPalBaseX");
            entity.Property(e => e.RmvpalBaseY).HasColumnName("RMVPalBaseY");
            entity.Property(e => e.RmvpalHeight).HasColumnName("RMVPalHeight");
            entity.Property(e => e.RmvqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyAllocated");
            entity.Property(e => e.RmvqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyBackOrdered");
            entity.Property(e => e.RmvqtyExpired)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyExpired");
            entity.Property(e => e.RmvqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyInProduction");
            entity.Property(e => e.RmvqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyInQCInspection");
            entity.Property(e => e.RmvqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyOH");
            entity.Property(e => e.RmvqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyOrdered");
            entity.Property(e => e.RmvqtyReceived)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyReceived");
            entity.Property(e => e.RmvqtyReserved)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyReserved");
            entity.Property(e => e.RmvqtyWeightedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQtyWeightedUp");
            entity.Property(e => e.RmvquoteNote)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RMVQuoteNote");
            entity.Property(e => e.RmvquoteQtyPerStdCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVQuoteQtyPerStdCost");
            entity.Property(e => e.RmvrawMaterialItemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVRawMaterialItemNumber");
            entity.Property(e => e.RmvrawMaterialNoFk).HasColumnName("RMVRawMaterialNo_FK");
            entity.Property(e => e.RmvstandardCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVStandardCost");
            entity.Property(e => e.RmvunitCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVUnitCost");
            entity.Property(e => e.RmvvendorItemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVVendorItemNumber");
            entity.Property(e => e.RmvvendorNoFk).HasColumnName("RMVVendorNo_FK");
            entity.Property(e => e.Rmvvolume)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVVolume");
            entity.Property(e => e.Rmvwidth)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVWidth");
        });

        modelBuilder.Entity<RawMaterialCoa>(entity =>
        {
            entity.HasKey(e => e.RmcoaPk);

            entity.ToTable("RawMaterialCOA");

            entity.HasIndex(e => e.RmcoaWhlotNumber, "IX1_RawMaterialCOA");

            entity.HasIndex(e => e.RmcoaItemNumber, "ix2_RawMaterialCOA");

            entity.HasIndex(e => e.RmcoaVendorName, "ix3_RawMaterialCOA");

            entity.HasIndex(e => e.RmcoaApponumber, "ix4_RawMaterialCOA");

            entity.Property(e => e.RmcoaPk).HasColumnName("RMCoa_PK");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItemDocDirectory).HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmcoaApponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCoaAPPONumber");
            entity.Property(e => e.RmcoaFolder)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMCoaFolder");
            entity.Property(e => e.RmcoaItemNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCoaItemNumber");
            entity.Property(e => e.RmcoaVendorName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMCoaVendorName");
            entity.Property(e => e.RmcoaWhlotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCoaWHLotNumber");
            entity.Property(e => e.RmdocumentType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMDocumentType");
        });

        modelBuilder.Entity<RawMaterialLog>(entity =>
        {
            entity.HasKey(e => e.Logid);

            entity.ToTable("RawMaterialLOG");

            entity.Property(e => e.Logid).HasColumnName("LOGID");
            entity.Property(e => e.ActiveIngredient).HasMaxLength(250);
            entity.Property(e => e.Carrier).HasMaxLength(250);
            entity.Property(e => e.Category).HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Devision).HasMaxLength(50);
            entity.Property(e => e.ExternalDescription)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PlantPart).HasMaxLength(250);
            entity.Property(e => e.RawMaterialNoPk).HasColumnName("RawMaterialNo_PK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RmbookValue)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMBookValue");
            entity.Property(e => e.RmbrandName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMBrandName");
            entity.Property(e => e.RmchemName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMChemName");
            entity.Property(e => e.RmconversionPieces).HasColumnName("RMConversionPieces");
            entity.Property(e => e.RmcustItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCustItem");
            entity.Property(e => e.RmcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCustomerNo_FK");
            entity.Property(e => e.RmcustomerSupplied).HasColumnName("RMCustomerSupplied");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.Rmdiscontinue).HasColumnName("RMDiscontinue");
            entity.Property(e => e.RmglcostAccountNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLCostAccountNo_FK");
            entity.Property(e => e.RmglcostCenterNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLCostCenterNo_FK");
            entity.Property(e => e.RmglrevAccountNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLRevAccountNo_FK");
            entity.Property(e => e.RmglrevSubAccountNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMGLRevSubAccountNo_FK");
            entity.Property(e => e.RmgrossWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMGrossWeight");
            entity.Property(e => e.Rmheight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMHeight");
            entity.Property(e => e.RmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemNumber");
            entity.Property(e => e.RmlastApcost)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RMLastAPCost");
            entity.Property(e => e.RmlastApdate)
                .HasColumnType("datetime")
                .HasColumnName("RMLastAPDate");
            entity.Property(e => e.RmlastCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMLastCost");
            entity.Property(e => e.RmlastPodate)
                .HasColumnType("datetime")
                .HasColumnName("RMLastPODate");
            entity.Property(e => e.RmlastStdCostBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMLastStdCostBy");
            entity.Property(e => e.RmlastStdCostDate)
                .HasColumnType("datetime")
                .HasColumnName("RMLastStdCostDate");
            entity.Property(e => e.RmlatinName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMLatinName");
            entity.Property(e => e.Rmlength)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMLength");
            entity.Property(e => e.RmminQtyInStock)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMMinQtyInStock");
            entity.Property(e => e.RmminQtyPur)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMMinQtyPur");
            entity.Property(e => e.RmneedManualOrder).HasColumnName("RMNeedManualOrder");
            entity.Property(e => e.RmnetWeight)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMNetWeight");
            entity.Property(e => e.Rmpack).HasColumnName("RMPack");
            entity.Property(e => e.RmpalBaseX).HasColumnName("RMPalBaseX");
            entity.Property(e => e.RmpalBaseY).HasColumnName("RMPalBaseY");
            entity.Property(e => e.RmpalHeight).HasColumnName("RMPalHeight");
            entity.Property(e => e.RmpkgCategoryNoFk).HasColumnName("RMPkgCategoryNo_FK");
            entity.Property(e => e.RmpkgCount).HasColumnName("RMPkgCount");
            entity.Property(e => e.RmpkgProdType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPkgProdType");
            entity.Property(e => e.RmpkgVer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPkgVer");
            entity.Property(e => e.RmpotencyName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMPotencyName");
            entity.Property(e => e.RmproductClassNoFk).HasColumnName("RMProductClassNo_FK");
            entity.Property(e => e.RmproductTypeNoFk).HasColumnName("RMProductTypeNo_FK");
            entity.Property(e => e.RmqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyAllocated");
            entity.Property(e => e.RmqtyBackOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyBackOrdered");
            entity.Property(e => e.RmqtyExpired)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyExpired");
            entity.Property(e => e.RmqtyInProduction)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyInProduction");
            entity.Property(e => e.RmqtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyInQCInspection");
            entity.Property(e => e.RmqtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyOH");
            entity.Property(e => e.RmqtyOrdered)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyOrdered");
            entity.Property(e => e.RmqtyReceived)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyReceived");
            entity.Property(e => e.RmqtyReserved)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyReserved");
            entity.Property(e => e.RmqtyShipped)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyShipped");
            entity.Property(e => e.RmqtyToBePurchased)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyToBePurchased");
            entity.Property(e => e.RmqtyWeightedUp)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyWeightedUp");
            entity.Property(e => e.RmstandardCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMStandardCost");
            entity.Property(e => e.RmunitCost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMUnitCost");
            entity.Property(e => e.RmunitCostFactor).HasColumnName("RMUnitCostFactor");
            entity.Property(e => e.RmuomFk).HasColumnName("RMUOM_FK");
            entity.Property(e => e.Rmvolume)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMVolume");
            entity.Property(e => e.Rmwidth)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMWidth");
        });

        modelBuilder.Entity<RawMaterialSpecAnalysis>(entity =>
        {
            entity.HasKey(e => e.RmspecAnalysisNoPk);

            entity.ToTable("RawMaterialSpecAnalysis");

            entity.Property(e => e.RmspecAnalysisNoPk).HasColumnName("RMSpecAnalysisNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdby)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmsaanalysis)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSAAnalysis");
            entity.Property(e => e.RmsaspecId).HasColumnName("RMSASpec_ID");
            entity.Property(e => e.RmsaspecNoFk).HasColumnName("RMSASpecNo_FK");
            entity.Property(e => e.Rmsaversion).HasColumnName("RMSAVersion");
        });

        modelBuilder.Entity<RcvBackLog>(entity =>
        {
            entity.HasKey(e => e.RcvBackLogsNoPk).HasName("PK_RcvRequired");

            entity.Property(e => e.RcvBackLogsNoPk).HasColumnName("RcvBackLogsNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RcvBlassignedDeptNoFk).HasColumnName("RcvBLAssignedDeptNo_FK");
            entity.Property(e => e.RcvBlassignedName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvBLAssignedName");
            entity.Property(e => e.RcvBlexpectedDt)
                .HasColumnType("datetime")
                .HasColumnName("RcvBLExpectedDt");
            entity.Property(e => e.RcvBlnotes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RcvBLNotes");
            entity.Property(e => e.RcvBlstatusNoFk).HasColumnName("RcvBLStatusNo_FK");
            entity.Property(e => e.RcvBlwhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvBLWhsLot");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<RcvDetail>(entity =>
        {
            entity.HasKey(e => e.RcvDetailNoPk);

            entity.ToTable("RcvDetail");

            entity.HasIndex(e => e.RcvDstatusNoFk, "IX1RcvDetail");

            entity.HasIndex(e => e.RcvDrcvHeaderNoFk, "IX_RcvDetail");

            entity.HasIndex(e => e.RcvDwhsLotNumber, "IX_RcvLotNumber");

            entity.Property(e => e.RcvDetailNoPk).HasColumnName("RcvDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpddt).HasColumnType("datetime");
            entity.Property(e => e.RcvDbatchNoFk).HasColumnName("RcvDBatchNo_FK");
            entity.Property(e => e.RcvDcondRelease).HasColumnName("RcvDCondRelease");
            entity.Property(e => e.RcvDcondReleaseSet)
                .HasColumnType("datetime")
                .HasColumnName("RcvDCondReleaseSet");
            entity.Property(e => e.RcvDcondReleaseUnset)
                .HasColumnType("datetime")
                .HasColumnName("RcvDCondReleaseUnset");
            entity.Property(e => e.RcvDexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDExpiredDate");
            entity.Property(e => e.RcvDnotes)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("RcvDNotes");
            entity.Property(e => e.RcvDpcsQcaccepted).HasColumnName("RcvDPcsQCAccepted");
            entity.Property(e => e.RcvDpcsQcrejected).HasColumnName("RcvDPcsQCRejected");
            entity.Property(e => e.RcvDpieces).HasColumnName("RcvDPieces");
            entity.Property(e => e.RcvDpostReady).HasColumnName("RcvDPostReady");
            entity.Property(e => e.RcvDqaexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDQAExpiredDate");
            entity.Property(e => e.RcvDqanotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RcvDQANotes");
            entity.Property(e => e.RcvDqaqtyPerPiece)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQAQtyPerPiece");
            entity.Property(e => e.RcvDqaverifiedVendorLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDQAVerifiedVendorLot");
            entity.Property(e => e.RcvDqtyPerPiece)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyPerPiece");
            entity.Property(e => e.RcvDqtyQcaccepted)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyQCAccepted");
            entity.Property(e => e.RcvDqtyQcrejected)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyQCRejected");
            entity.Property(e => e.RcvDqtyReceived)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyReceived");
            entity.Property(e => e.RcvDrcvHeaderNoFk).HasColumnName("RcvDRcvHeaderNo_FK");
            entity.Property(e => e.RcvDreceivedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDReceivedBy");
            entity.Property(e => e.RcvDreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDReceivedDate");
            entity.Property(e => e.RcvDreturnedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDReturnedBy");
            entity.Property(e => e.RcvDreturnedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDReturnedDate");
            entity.Property(e => e.RcvDreturnedNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RcvDReturnedNotes");
            entity.Property(e => e.RcvDreturnedPcs).HasColumnName("RcvDReturnedPcs");
            entity.Property(e => e.RcvDreturnedQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDReturnedQty");
            entity.Property(e => e.RcvDrtrnQtyPerPiece)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RcvDRtrnQtyPerPiece");
            entity.Property(e => e.RcvDstatusNoFk).HasColumnName("RcvDStatusNo_FK");
            entity.Property(e => e.RcvDvendorLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVendorLot");
            entity.Property(e => e.RcvDvendorPo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVendorPO");
            entity.Property(e => e.RcvDverifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVerifiedBy");
            entity.Property(e => e.RcvDverifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDVerifiedDate");
            entity.Property(e => e.RcvDwhsLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDWhsLotNumber");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.RcvDrcvHeaderNoFkNavigation).WithMany(p => p.RcvDetails)
                .HasForeignKey(d => d.RcvDrcvHeaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RcvDetail_RcvHeader");
        });

        modelBuilder.Entity<RcvDetailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RcvDetailLOG");

            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpddt).HasColumnType("datetime");
            entity.Property(e => e.RcvDbatchNoFk).HasColumnName("RcvDBatchNo_FK");
            entity.Property(e => e.RcvDcondRelease).HasColumnName("RcvDCondRelease");
            entity.Property(e => e.RcvDcondReleaseSet)
                .HasColumnType("datetime")
                .HasColumnName("RcvDCondReleaseSet");
            entity.Property(e => e.RcvDcondReleaseUnset)
                .HasColumnType("datetime")
                .HasColumnName("RcvDCondReleaseUnset");
            entity.Property(e => e.RcvDetailNoPk).HasColumnName("RcvDetailNo_PK");
            entity.Property(e => e.RcvDexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDExpiredDate");
            entity.Property(e => e.RcvDnotes)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("RcvDNotes");
            entity.Property(e => e.RcvDpcsQcaccepted).HasColumnName("RcvDPcsQCAccepted");
            entity.Property(e => e.RcvDpcsQcrejected).HasColumnName("RcvDPcsQCRejected");
            entity.Property(e => e.RcvDpieces).HasColumnName("RcvDPieces");
            entity.Property(e => e.RcvDpostReady).HasColumnName("RcvDPostReady");
            entity.Property(e => e.RcvDqaexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDQAExpiredDate");
            entity.Property(e => e.RcvDqanotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RcvDQANotes");
            entity.Property(e => e.RcvDqaqtyPerPiece).HasColumnName("RcvDQAQtyPerPiece");
            entity.Property(e => e.RcvDqaverifiedVendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDQAVerifiedVendorLot");
            entity.Property(e => e.RcvDqtyPerPiece).HasColumnName("RcvDQtyPerPiece");
            entity.Property(e => e.RcvDqtyQcaccepted).HasColumnName("RcvDQtyQCAccepted");
            entity.Property(e => e.RcvDqtyQcrejected).HasColumnName("RcvDQtyQCRejected");
            entity.Property(e => e.RcvDqtyReceived).HasColumnName("RcvDQtyReceived");
            entity.Property(e => e.RcvDrcvHeaderNoFk).HasColumnName("RcvDRcvHeaderNo_FK");
            entity.Property(e => e.RcvDreceivedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDReceivedBy");
            entity.Property(e => e.RcvDreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDReceivedDate");
            entity.Property(e => e.RcvDreturnedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDReturnedBy");
            entity.Property(e => e.RcvDreturnedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDReturnedDate");
            entity.Property(e => e.RcvDreturnedNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RcvDReturnedNotes");
            entity.Property(e => e.RcvDreturnedPcs).HasColumnName("RcvDReturnedPcs");
            entity.Property(e => e.RcvDreturnedQty).HasColumnName("RcvDReturnedQty");
            entity.Property(e => e.RcvDrtrnQtyPerPiece)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RcvDRtrnQtyPerPiece");
            entity.Property(e => e.RcvDstatusNoFk).HasColumnName("RcvDStatusNo_FK");
            entity.Property(e => e.RcvDvendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVendorLot");
            entity.Property(e => e.RcvDvendorPo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVendorPO");
            entity.Property(e => e.RcvDverifiedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVerifiedBy");
            entity.Property(e => e.RcvDverifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDVerifiedDate");
            entity.Property(e => e.RcvDwhsLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDWhsLotNumber");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RcvHeader>(entity =>
        {
            entity.HasKey(e => e.RcvHeaderNoPk);

            entity.ToTable("RcvHeader");

            entity.HasIndex(e => e.RcvHvendorNoFk, "IX1_RcvHeader");

            entity.HasIndex(e => e.RcvHaptransNoFk, "IX2_RcvHeader");

            entity.HasIndex(e => e.RcvHitemNumber, "IX_RcvItemNo");

            entity.Property(e => e.RcvHeaderNoPk).HasColumnName("RcvHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RcvHapbatchNoFk).HasColumnName("RcvHAPBatchNo_FK");
            entity.Property(e => e.RcvHapheaderNoFk).HasColumnName("RcvHAPHeaderNo_FK");
            entity.Property(e => e.RcvHapponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHAPPONumber");
            entity.Property(e => e.RcvHaptransNoFk).HasColumnName("RcvHAPTransNo_FK");
            entity.Property(e => e.RcvHbatchNoFk).HasColumnName("RcvHBatchNo_FK");
            entity.Property(e => e.RcvHcustomerNoFk).HasColumnName("RcvHCustomerNo_FK");
            entity.Property(e => e.RcvHdateExpected)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateExpected");
            entity.Property(e => e.RcvHdateQai)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateQAI");
            entity.Property(e => e.RcvHdateReceived)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateReceived");
            entity.Property(e => e.RcvHisFullReceived).HasColumnName("RcvHIsFullReceived");
            entity.Property(e => e.RcvHitemKeyNoFk).HasColumnName("RcvHItemKeyNo_FK");
            entity.Property(e => e.RcvHitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHItemNumber");
            entity.Property(e => e.RcvHnonManReceived).HasColumnName("RcvHNonManReceived");
            entity.Property(e => e.RcvHnotes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RcvHNotes");
            entity.Property(e => e.RcvHproductClassNoFk).HasColumnName("RcvHProductClassNo_FK");
            entity.Property(e => e.RcvHproductTypeNoFk).HasColumnName("RcvHProductTypeNo_FK");
            entity.Property(e => e.RcvHqtyExpected)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHQtyExpected");
            entity.Property(e => e.RcvHqtyQai)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHQtyQAI");
            entity.Property(e => e.RcvHqtyReceived)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHQtyReceived");
            entity.Property(e => e.RcvHreturnedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHReturnedBy");
            entity.Property(e => e.RcvHreturnedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvHReturnedDate");
            entity.Property(e => e.RcvHreturnedNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RcvHReturnedNotes");
            entity.Property(e => e.RcvHreturnedQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHReturnedQty");
            entity.Property(e => e.RcvHstatusNoFk).HasColumnName("RcvHStatusNo_FK");
            entity.Property(e => e.RcvHvendorNoFk).HasColumnName("RcvHVendorNo_FK");
            entity.Property(e => e.RcvhitemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RCVHItemDesc");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RcvHeaderLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RcvHeaderLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RcvHapbatchNoFk).HasColumnName("RcvHAPBatchNo_FK");
            entity.Property(e => e.RcvHapheaderNoFk).HasColumnName("RcvHAPHeaderNo_FK");
            entity.Property(e => e.RcvHapponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHAPPONumber");
            entity.Property(e => e.RcvHaptransNoFk).HasColumnName("RcvHAPTransNo_FK");
            entity.Property(e => e.RcvHbatchNoFk).HasColumnName("RcvHBatchNo_FK");
            entity.Property(e => e.RcvHcustomerNoFk).HasColumnName("RcvHCustomerNo_FK");
            entity.Property(e => e.RcvHdateExpected)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateExpected");
            entity.Property(e => e.RcvHdateQai)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateQAI");
            entity.Property(e => e.RcvHdateReceived)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateReceived");
            entity.Property(e => e.RcvHeaderNoPk).HasColumnName("RcvHeaderNo_PK");
            entity.Property(e => e.RcvHisFullReceived).HasColumnName("RcvHIsFullReceived");
            entity.Property(e => e.RcvHitemKeyNoFk).HasColumnName("RcvHItemKeyNo_FK");
            entity.Property(e => e.RcvHitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHItemNumber");
            entity.Property(e => e.RcvHnonManReceived).HasColumnName("RcvHNonManReceived");
            entity.Property(e => e.RcvHnotes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RcvHNotes");
            entity.Property(e => e.RcvHproductClassNoFk).HasColumnName("RcvHProductClassNo_FK");
            entity.Property(e => e.RcvHproductTypeNoFk).HasColumnName("RcvHProductTypeNo_FK");
            entity.Property(e => e.RcvHqtyExpected).HasColumnName("RcvHQtyExpected");
            entity.Property(e => e.RcvHqtyQai).HasColumnName("RcvHQtyQAI");
            entity.Property(e => e.RcvHqtyReceived).HasColumnName("RcvHQtyReceived");
            entity.Property(e => e.RcvHreturnedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHReturnedBy");
            entity.Property(e => e.RcvHreturnedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvHReturnedDate");
            entity.Property(e => e.RcvHreturnedNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RcvHReturnedNotes");
            entity.Property(e => e.RcvHreturnedQty).HasColumnName("RcvHReturnedQty");
            entity.Property(e => e.RcvHstatusNoFk).HasColumnName("RcvHStatusNo_FK");
            entity.Property(e => e.RcvHvendorNoFk).HasColumnName("RcvHVendorNo_FK");
            entity.Property(e => e.RcvhitemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RCVHItemDesc");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RcvVoucherDetail>(entity =>
        {
            entity.HasKey(e => e.RvdetailNoPk);

            entity.ToTable("RcvVoucherDetail");

            entity.Property(e => e.RvdetailNoPk).HasColumnName("RVDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Rvboxes).HasColumnName("RVBoxes");
            entity.Property(e => e.RvheaderNoFk).HasColumnName("RVHeaderNo_FK");
            entity.Property(e => e.RvitemCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("RVItemCode");
            entity.Property(e => e.RvitemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .HasColumnName("RVItemDesc");
            entity.Property(e => e.RvorderQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RVOrderQty");
            entity.Property(e => e.RvqtyPerBox)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RVQtyPerBox");
            entity.Property(e => e.RvtotalQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RVTotalQty");
            entity.Property(e => e.RvunitPrice)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RVUnitPrice");
            entity.Property(e => e.RvvendorLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RVVendorLot");
            entity.Property(e => e.RvwhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RVWhsLot");

            entity.HasOne(d => d.RvheaderNoFkNavigation).WithMany(p => p.RcvVoucherDetails)
                .HasForeignKey(d => d.RvheaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RcvVoucherDetail_RcvVoucherHeader");
        });

        modelBuilder.Entity<RcvVoucherHeader>(entity =>
        {
            entity.HasKey(e => e.RvheaderNoPk).HasName("PK_RcvVoucherHdr");

            entity.ToTable("RcvVoucherHeader");

            entity.Property(e => e.RvheaderNoPk).HasColumnName("RVHeaderNo_PK");
            entity.Property(e => e.CarrierName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Department)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaidDt).HasColumnType("datetime");
            entity.Property(e => e.PoorderBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POOrderBy");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Rvponum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RVPONum");
            entity.Property(e => e.RvvendorNoFk).HasColumnName("RVVendorNo_FK");
            entity.Property(e => e.RvvoucherId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RVVoucherID");
            entity.Property(e => e.Term)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.RvvendorNoFkNavigation).WithMany(p => p.RcvVoucherHeaders)
                .HasForeignKey(d => d.RvvendorNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RcvVoucherHeader_Vendor");
        });

        modelBuilder.Entity<RcvVoucherInvoice>(entity =>
        {
            entity.HasKey(e => e.RvinvoiceNoPk).HasName("PK_APInvoice");

            entity.ToTable("RcvVoucherInvoice");

            entity.Property(e => e.RvinvoiceNoPk).HasColumnName("RVInvoiceNo_PK");
            entity.Property(e => e.Apqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("APQty");
            entity.Property(e => e.ApunitCost)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("APUnitCost");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaidDt).HasColumnType("datetime");
            entity.Property(e => e.RvcheckNum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RVCheckNum");
            entity.Property(e => e.RvdetailFk).HasColumnName("RVDetail_FK");
            entity.Property(e => e.RvhdrFk).HasColumnName("RVHdr_FK");
            entity.Property(e => e.VendorInvoice)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorInvoiceDt).HasColumnType("datetime");

            entity.HasOne(d => d.RvdetailFkNavigation).WithMany(p => p.RcvVoucherInvoices)
                .HasForeignKey(d => d.RvdetailFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RcvVoucherInvoice_RcvVoucherDetail");

            entity.HasOne(d => d.RvhdrFkNavigation).WithMany(p => p.RcvVoucherInvoices)
                .HasForeignKey(d => d.RvhdrFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RcvVoucherInvoice_RcvVoucherHeader");
        });

        modelBuilder.Entity<ReceiveRm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Receive_RM");

            entity.Property(e => e.Aphordered4Dept)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHOrdered4Dept");
            entity.Property(e => e.AphorderedBy)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APHOrderedBy");
            entity.Property(e => e.Aphterms).HasColumnName("APHTerms");
            entity.Property(e => e.AptconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("APTConfirmDt");
            entity.Property(e => e.ApttransQty).HasColumnName("APTTransQty");
            entity.Property(e => e.ApttransUnitPrice).HasColumnName("APTTransUnitPrice");
            entity.Property(e => e.ItemClass)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Podate)
                .HasColumnType("datetime")
                .HasColumnName("PODate");
            entity.Property(e => e.RcvDnotes)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("RcvDNotes");
            entity.Property(e => e.RcvDpieces).HasColumnName("RcvDPieces");
            entity.Property(e => e.RcvDqaexpiredDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDQAExpiredDate");
            entity.Property(e => e.RcvDqtyPerPiece)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyPerPiece");
            entity.Property(e => e.RcvDqtyQcaccepted)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyQCAccepted");
            entity.Property(e => e.RcvDqtyQcrejected)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyQCRejected");
            entity.Property(e => e.RcvDqtyReceived)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvDQtyReceived");
            entity.Property(e => e.RcvDreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDReceivedDate");
            entity.Property(e => e.RcvDstatusNoFk).HasColumnName("RcvDStatusNo_FK");
            entity.Property(e => e.RcvDvendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVendorLot");
            entity.Property(e => e.RcvDvendorPo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDVendorPO");
            entity.Property(e => e.RcvDverifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("RcvDVerifiedDate");
            entity.Property(e => e.RcvDwhsLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvDWhsLotNumber");
            entity.Property(e => e.RcvHapponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHAPPONumber");
            entity.Property(e => e.RcvHdateExpected)
                .HasColumnType("datetime")
                .HasColumnName("RcvHDateExpected");
            entity.Property(e => e.RcvHeaderNoPk).HasColumnName("RcvHeaderNo_PK");
            entity.Property(e => e.RcvHitemKeyNoFk).HasColumnName("RcvHItemKeyNo_FK");
            entity.Property(e => e.RcvHitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RcvHItemNumber");
            entity.Property(e => e.RcvHqtyExpected)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHQtyExpected");
            entity.Property(e => e.RcvHqtyReceived)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHQtyReceived");
            entity.Property(e => e.RcvHreturnedQty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("RcvHReturnedQty");
            entity.Property(e => e.RcvHvendorNoFk).HasColumnName("RcvHVendorNo_FK");
            entity.Property(e => e.RcvStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RcvhitemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RCVHItemDesc");
            entity.Property(e => e.RmqtyAllocated)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMQtyAllocated");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RegistrationDoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk).HasName("PK_ItemDocument");

            entity.ToTable("RegistrationDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.FormRequestNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormRequestNo_FK");
            entity.Property(e => e.ItemDocName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<RegistrationDocTmpRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RegistrationDocTMP-REMOVE");

            entity.Property(e => e.FName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("fName");
            entity.Property(e => e.ItemCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDocDirectory)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemDocPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("ItemDoc_PK");
            entity.Property(e => e.VendorName)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ReleaseToQa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Release_To_QA");

            entity.Property(e => e.BrhlotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRHLotNumber");
            entity.Property(e => e.BrhlotSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRHLotSize");
            entity.Property(e => e.BrhproductionCompletedDt)
                .HasColumnType("datetime")
                .HasColumnName("BRHProductionCompletedDt");
            entity.Property(e => e.BrhstatusNoFk).HasColumnName("BRHStatusNo_FK");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Imdescription)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IMDescription");
            entity.Property(e => e.ImitemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMItem_ID");
            entity.Property(e => e.MfgDate).HasColumnType("datetime");
            entity.Property(e => e.SohcustPonumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHCustPONumber");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
            entity.Property(e => e.SoheaderNoPk).HasColumnName("SOHeaderNo_PK");
            entity.Property(e => e.ToDateRelQty).HasColumnType("decimal(38, 6)");
            entity.Property(e => e.TotalQty).HasColumnType("decimal(38, 6)");
        });

        modelBuilder.Entity<Rfqdoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk);

            entity.ToTable("RFQDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItemDocDirectory)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.QuoteHeaderNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QuoteHeaderNo_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RmactivationRequest>(entity =>
        {
            entity.HasKey(e => e.RanoPk);

            entity.ToTable("RMActivationRequest");

            entity.Property(e => e.RanoPk).HasColumnName("RANo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
        });

        modelBuilder.Entity<RmcleanLabel>(entity =>
        {
            entity.HasKey(e => e.RmcleanLabelPk);

            entity.ToTable("RMCleanLabel");

            entity.Property(e => e.RmcleanLabelPk).HasColumnName("RMCleanLabel_PK");
            entity.Property(e => e.CleanLabelDesc)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");

            entity.HasOne(d => d.RmcodeNavigation).WithMany(p => p.RmcleanLabels)
                .HasPrincipalKey(p => p.RmitemNumber)
                .HasForeignKey(d => d.Rmcode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RMCleanLabel_RawMaterial");
        });

        modelBuilder.Entity<RmdocType>(entity =>
        {
            entity.HasKey(e => e.DocType);

            entity.ToTable("RMDocType");

            entity.Property(e => e.DocType).HasMaxLength(250);
        });

        modelBuilder.Entity<RminvTransHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RMInvTransHistory");

            entity.Property(e => e.Brlot)
                .HasMaxLength(250)
                .HasColumnName("BRLot");
            entity.Property(e => e.CurAllocQty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curAllocQty");
            entity.Property(e => e.CurOhqty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curOHQty");
            entity.Property(e => e.CurOnOrderQty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curOnOrderQty");
            entity.Property(e => e.CurQcqty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curQCQty");
            entity.Property(e => e.CurShipQty)
                .HasColumnType("decimal(28, 6)")
                .HasColumnName("curShipQty");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .HasColumnName("IMcode");
            entity.Property(e => e.InvTransHisId).HasColumnName("InvTransHisID");
            entity.Property(e => e.IssueAllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IssueByUser)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.IssueFrom)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.IssueOhqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IssueOHQty");
            entity.Property(e => e.IssueOnOrderQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IssueQcqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IssueQCQty");
            entity.Property(e => e.IssueShipQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.LotQtyAllocated).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotQtyExpired).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotQtyInQcinspection)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotQtyInQCInspection");
            entity.Property(e => e.LotQtyOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotQtyOH");
            entity.Property(e => e.LotQtyOrdered).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotQtyRecv).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotQtyReserved).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Ponum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONum");
            entity.Property(e => e.Reason).HasMaxLength(500);
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .HasColumnName("RMcode");
            entity.Property(e => e.RmvlvendorLotNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMVLVendorLotNumber");
            entity.Property(e => e.Sonum).HasColumnName("SONum");
            entity.Property(e => e.Source).HasMaxLength(250);
            entity.Property(e => e.WhsLot).HasMaxLength(50);
        });

        modelBuilder.Entity<RminvTransRemove>(entity =>
        {
            entity.HasKey(e => e.RmtransNoPk).HasName("PK_RMInvTrans");

            entity.ToTable("RMInvTrans-REMOVE");

            entity.Property(e => e.RmtransNoPk).HasColumnName("RMTransNo_PK");
            entity.Property(e => e.Caller)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RmremarksDevUtil)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMRemarksDevUtil");
            entity.Property(e => e.RmtadjustmentTrans).HasColumnName("RMTAdjustmentTrans");
            entity.Property(e => e.RmtcustomerNoFk).HasColumnName("RMTCustomerNo_FK");
            entity.Property(e => e.RmtmanLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTManLot");
            entity.Property(e => e.RmtmonthlyBped)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTMonthlyBPED");
            entity.Property(e => e.Rmtnotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMTNotes");
            entity.Property(e => e.Rmtponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTPONumber");
            entity.Property(e => e.RmtproductClassNoFk).HasColumnName("RMTProductClassNo_FK");
            entity.Property(e => e.RmtproductTypeNoFk).HasColumnName("RMTProductTypeNo_FK");
            entity.Property(e => e.RmtransRef)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTransRef");
            entity.Property(e => e.RmtrawMaterialNoFk).HasColumnName("RMTRawMaterialNo_FK");
            entity.Property(e => e.RmtrmexpirationDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTRMExpirationDate");
            entity.Property(e => e.RmtrmitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTRMItemNumber");
            entity.Property(e => e.Rmtrmpack).HasColumnName("RMTRMPack");
            entity.Property(e => e.RmttransDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTTransDate");
            entity.Property(e => e.RmttransExtCost)
                .HasColumnType("money")
                .HasColumnName("RMTTransExtCost");
            entity.Property(e => e.RmttransQty).HasColumnName("RMTTransQTY");
            entity.Property(e => e.RmttransSourceNoFk).HasColumnName("RMTTransSourceNo_FK");
            entity.Property(e => e.RmttransTypeNoFk).HasColumnName("RMTTransTypeNo_FK");
            entity.Property(e => e.RmttransUnitCost)
                .HasColumnType("money")
                .HasColumnName("RMTTransUnitCost");
            entity.Property(e => e.RmtvendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTVendorLot");
            entity.Property(e => e.RmtvendorNoFk).HasColumnName("RMTVendorNo_FK");
            entity.Property(e => e.RmtweeklyBped)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTWeeklyBPED");
            entity.Property(e => e.RmtwhsLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTWhsLot");
            entity.Property(e => e.RmtxferedFromDeptNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTXferedFromDeptNo_FK");
            entity.Property(e => e.RmtxferedToDeptNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTXferedToDeptNo_FK");
        });

        modelBuilder.Entity<RmlotPickForBr>(entity =>
        {
            entity.HasKey(e => e.RmlotPickForBrPk);

            entity.ToTable("RMLotPickForBR");

            entity.Property(e => e.RmlotPickForBrPk).HasColumnName("RMLotPickForBR_PK");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("BRLot");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("IMCode");
            entity.Property(e => e.LabelClaim).HasMaxLength(255);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MgPerUnit).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("RMCode");
            entity.Property(e => e.WhsLot)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Rmmanufacture>(entity =>
        {
            entity.HasKey(e => e.RmmanufacturePk);

            entity.ToTable("RMManufacture");

            entity.Property(e => e.RmmanufacturePk).HasColumnName("RMManufacture_PK");
            entity.Property(e => e.MfgName)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");

            entity.HasOne(d => d.RmcodeNavigation).WithMany(p => p.Rmmanufactures)
                .HasPrincipalKey(p => p.RmitemNumber)
                .HasForeignKey(d => d.Rmcode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RMManufacture_RMManufacture");
        });

        modelBuilder.Entity<RmphyInvByLocation>(entity =>
        {
            entity.HasKey(e => e.RmitemByLocNoPk).HasName("PK_RMItemByLocation");

            entity.ToTable("RMPhyInvByLocation");

            entity.Property(e => e.RmitemByLocNoPk).HasColumnName("RMItemByLocNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.PkgReturnWhsQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.RmbyLocNotes)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMByLocNotes");
            entity.Property(e => e.RmbyLocReason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMByLocReason");
            entity.Property(e => e.RmbyLocVendorCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMByLocVendorCode");
            entity.Property(e => e.RmitemByLocItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocItemDesc");
            entity.Property(e => e.RmitemByLocItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocItem_ID");
            entity.Property(e => e.RmitemByLocNumBox).HasColumnName("RMItemByLocNumBox");
            entity.Property(e => e.RmitemByLocProductClassNoFk).HasColumnName("RMItemByLocProductClassNo_FK");
            entity.Property(e => e.RmitemByLocQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMItemByLocQty");
            entity.Property(e => e.RmitemByLocQtyPerBox)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMItemByLocQtyPerBox");
            entity.Property(e => e.RmitemByLocRmitemNoFk).HasColumnName("RMItemByLocRMItemNo_FK");
            entity.Property(e => e.RmitemByLocVendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocVendorLot");
            entity.Property(e => e.RmitemByLocVendorNoFk).HasColumnName("RMItemByLocVendorNo_FK");
            entity.Property(e => e.RmitemByLocWhsLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocWhsLocation");
            entity.Property(e => e.RmitemByLocWhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocWhsLot");
            entity.Property(e => e.RmitemByLocations)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocations");
        });

        modelBuilder.Entity<RmphyInvByLocationLog>(entity =>
        {
            entity.HasKey(e => e.RmphyInvTransNoPk).HasName("PK_RMPhyInvByLocationLog");

            entity.ToTable("RMPhyInvByLocationLOG");

            entity.Property(e => e.RmphyInvTransNoPk).HasColumnName("RMPhyInvTransNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.PkgReturnWhsQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.RmphyInvLogFromLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogFromLocation");
            entity.Property(e => e.RmphyInvLogItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogItemDesc");
            entity.Property(e => e.RmphyInvLogItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogItem_ID");
            entity.Property(e => e.RmphyInvLogItemKeyNoFk).HasColumnName("RMPhyInvLogItemKeyNo_FK");
            entity.Property(e => e.RmphyInvLogItemPack).HasColumnName("RMPhyInvLogItemPack");
            entity.Property(e => e.RmphyInvLogNotes)
                .HasColumnType("ntext")
                .HasColumnName("RMPhyInvLogNotes");
            entity.Property(e => e.RmphyInvLogNumBox).HasColumnName("RMPhyInvLogNumBox");
            entity.Property(e => e.RmphyInvLogOperation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogOperation");
            entity.Property(e => e.RmphyInvLogProductTypeClass).HasColumnName("RMPhyInvLogProductType_Class");
            entity.Property(e => e.RmphyInvLogQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMPhyInvLogQty");
            entity.Property(e => e.RmphyInvLogQtyPerBox)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMPhyInvLogQtyPerBox");
            entity.Property(e => e.RmphyInvLogReason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogReason");
            entity.Property(e => e.RmphyInvLogToLocation)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogToLocation");
            entity.Property(e => e.RmphyInvLogVendorCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogVendorCode");
            entity.Property(e => e.RmphyInvLogVendorLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogVendorLot");
            entity.Property(e => e.RmphyInvLogVendorNoFk).HasColumnName("RMPhyInvLogVendorNo_FK");
            entity.Property(e => e.RmphyInvLogWhsLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogWhsLocation");
            entity.Property(e => e.RmphyInvLogWhsLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMPhyInvLogWhsLot");
        });

        modelBuilder.Entity<RmsafetyStockItem>(entity =>
        {
            entity.HasKey(e => e.ItemCode).HasName("PK_RMSafetyStockItem_1");

            entity.ToTable("RMSafetyStockItem");

            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnName("remarks");
        });

        modelBuilder.Entity<RmspecDetail>(entity =>
        {
            entity.HasKey(e => e.RmspecDetailNoPk);

            entity.ToTable("RMSpecDetail", tb => tb.HasTrigger("trigger_RMSpecDetail"));

            entity.Property(e => e.RmspecDetailNoPk).HasColumnName("RMSpecDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdby)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmsdanalysis)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDAnalysis");
            entity.Property(e => e.RmsdhasSpecLab).HasColumnName("RMSDHasSpecLab");
            entity.Property(e => e.RmsdheaderFk).HasColumnName("RMSDHeader_FK");
            entity.Property(e => e.Rmsdmethod)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDMethod");
            entity.Property(e => e.Rmsdnotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDNotes");
            entity.Property(e => e.RmsdorderId).HasColumnName("RMSDOrder_ID");
            entity.Property(e => e.Rmsdspec)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDSpec");
            entity.Property(e => e.SectionId).HasColumnName("SectionID");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);

            entity.HasOne(d => d.RmsdheaderFkNavigation).WithMany(p => p.RmspecDetails)
                .HasForeignKey(d => d.RmsdheaderFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RMSpecDetail_RMSpecHeader");
        });

        modelBuilder.Entity<RmspecDetailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RMSpecDetailLOG");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdby)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmsdanalysis)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDAnalysis");
            entity.Property(e => e.RmsdhasSpecLab).HasColumnName("RMSDHasSpecLab");
            entity.Property(e => e.RmsdheaderFk).HasColumnName("RMSDHeader_FK");
            entity.Property(e => e.Rmsdmethod)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDMethod");
            entity.Property(e => e.Rmsdnotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDNotes");
            entity.Property(e => e.RmsdorderId).HasColumnName("RMSDOrder_ID");
            entity.Property(e => e.Rmsdspec)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMSDSpec");
            entity.Property(e => e.RmspecDetailNoPk).HasColumnName("RMSpecDetailNo_PK");
            entity.Property(e => e.SectionId).HasColumnName("SectionID");
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
        });

        modelBuilder.Entity<RmspecHeader>(entity =>
        {
            entity.HasKey(e => e.RmspecHeaderNoPk).HasName("PK_RMSpecHeader_1");

            entity.ToTable("RMSpecHeader", tb => tb.HasTrigger("trigger_RMSpecHeader"));

            entity.Property(e => e.RmspecHeaderNoPk).HasColumnName("RMSpecHeaderNo_PK");
            entity.Property(e => e.ApproveBy).HasMaxLength(50);
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdby)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QaapproveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAApproveID");
            entity.Property(e => e.QcapproveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QCApproveID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.RmshitemDescription)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMSHItemDescription");
            entity.Property(e => e.RmshitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHItemNumber");
            entity.Property(e => e.RmshproductDesc)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("RMSHProductDesc");
            entity.Property(e => e.RmshqaapproveBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHQAApproveBy");
            entity.Property(e => e.RmshqaapproveDate)
                .HasColumnType("datetime")
                .HasColumnName("RMSHQAApproveDate");
            entity.Property(e => e.RmshqcapproveBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHQCApproveBy");
            entity.Property(e => e.RmshqcapproveDate)
                .HasColumnType("datetime")
                .HasColumnName("RMSHQCApproveDate");
            entity.Property(e => e.RmshrawMaterialNoFk).HasColumnName("RMSHRawMaterialNo_FK");
            entity.Property(e => e.RmshrnDapproveBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHRnDApproveBy");
            entity.Property(e => e.RmshrnDapproveDate)
                .HasColumnType("datetime")
                .HasColumnName("RMSHRnDApproveDate");
            entity.Property(e => e.RmshstatusNoFk).HasColumnName("RMSHStatusNo_FK");
            entity.Property(e => e.Rmshversion).HasColumnName("RMSHVersion");
            entity.Property(e => e.RnDapproveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDApproveID");
        });

        modelBuilder.Entity<RmspecHeaderLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RMSpecHeaderLOG");

            entity.Property(e => e.ApproveBy).HasMaxLength(50);
            entity.Property(e => e.ApproveDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdby)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QaapproveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAApproveID");
            entity.Property(e => e.QcapproveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QCApproveID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.RmshitemDescription)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMSHItemDescription");
            entity.Property(e => e.RmshitemNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHItemNumber");
            entity.Property(e => e.RmshproductDesc)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("RMSHProductDesc");
            entity.Property(e => e.RmshqaapproveBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHQAApproveBy");
            entity.Property(e => e.RmshqaapproveDate)
                .HasColumnType("datetime")
                .HasColumnName("RMSHQAApproveDate");
            entity.Property(e => e.RmshqcapproveBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHQCApproveBy");
            entity.Property(e => e.RmshqcapproveDate)
                .HasColumnType("datetime")
                .HasColumnName("RMSHQCApproveDate");
            entity.Property(e => e.RmshrawMaterialNoFk).HasColumnName("RMSHRawMaterialNo_FK");
            entity.Property(e => e.RmshrnDapproveBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMSHRnDApproveBy");
            entity.Property(e => e.RmshrnDapproveDate)
                .HasColumnType("datetime")
                .HasColumnName("RMSHRnDApproveDate");
            entity.Property(e => e.RmshstatusNoFk).HasColumnName("RMSHStatusNo_FK");
            entity.Property(e => e.Rmshversion).HasColumnName("RMSHVersion");
            entity.Property(e => e.RmspecHeaderNoPk).HasColumnName("RMSpecHeaderNo_PK");
            entity.Property(e => e.RnDapproveId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDApproveID");
        });

        modelBuilder.Entity<RmspecTemplated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RMSpecTemplated");

            entity.Property(e => e.Analysis)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Method).HasMaxLength(250);
            entity.Property(e => e.SectionTitle).HasMaxLength(250);
            entity.Property(e => e.SortId).HasColumnName("SortID");
            entity.Property(e => e.Specification).HasMaxLength(250);
        });

        modelBuilder.Entity<RmtestMethod>(entity =>
        {
            entity.HasKey(e => e.RmtestMethodPk).HasName("PK_RMLotTestMethod");

            entity.ToTable("RMTestMethod");

            entity.Property(e => e.RmtestMethodPk).HasColumnName("RMTestMethod_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.MethodClass)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TestCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TestDesc).IsRequired();
            entity.Property(e => e.Uom)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<RmtestResult>(entity =>
        {
            entity.HasKey(e => e.RmtestResultPk);

            entity.ToTable("RMTestResult");

            entity.Property(e => e.RmtestResultPk).HasColumnName("RMTestResult_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMcode");
            entity.Property(e => e.TestCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TestResult).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.WhsLot).HasMaxLength(50);

            entity.HasOne(d => d.RmcodeNavigation).WithMany(p => p.RmtestResults)
                .HasPrincipalKey(p => p.RmitemNumber)
                .HasForeignKey(d => d.Rmcode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RMTestResult_RawMaterial");
        });

        modelBuilder.Entity<RmviewDoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk);

            entity.ToTable("RMViewDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItemCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDocDirectory)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RnDcoatingFormulaDetail>(entity =>
        {
            entity.HasKey(e => e.CoatingFormulaDetailNoPk).HasName("PK_CoatingFormulaDetailNo");

            entity.ToTable("RnDCoatingFormulaDetail");

            entity.Property(e => e.CoatingFormulaDetailNoPk).HasColumnName("CoatingFormulaDetailNo_PK");
            entity.Property(e => e.CoatingFormulaHeaderFk).HasColumnName("CoatingFormulaHeader_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.Rmpercent)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("RMPercent");

            entity.HasOne(d => d.CoatingFormulaHeaderFkNavigation).WithMany(p => p.RnDcoatingFormulaDetails)
                .HasForeignKey(d => d.CoatingFormulaHeaderFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RnDCoatingFormulaDetail_RnDCoatingFormulaHeader");
        });

        modelBuilder.Entity<RnDcoatingFormulaDetailLog>(entity =>
        {
            entity.HasKey(e => e.CoatingFormulaDetailLogPk).HasName("PK_CoatingFormulaDetailLog");

            entity.ToTable("RnDCoatingFormulaDetailLOG");

            entity.Property(e => e.CoatingFormulaDetailLogPk).HasColumnName("CoatingFormulaDetailLog_PK");
            entity.Property(e => e.CoatingFormulaDetailNoPk).HasColumnName("CoatingFormulaDetailNo_PK");
            entity.Property(e => e.CoatingFormulaHeaderFk).HasColumnName("CoatingFormulaHeader_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.Rmpercent)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("RMPercent");
        });

        modelBuilder.Entity<RnDcoatingFormulaHeader>(entity =>
        {
            entity.HasKey(e => e.CoatingFormulaHeaderNoPk);

            entity.ToTable("RnDCoatingFormulaHeader");

            entity.Property(e => e.CoatingFormulaHeaderNoPk).HasColumnName("CoatingFormulaHeaderNo_PK");
            entity.Property(e => e.CoatingCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoatingDesc)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.Version).HasColumnType("decimal(4, 2)");
        });

        modelBuilder.Entity<RnDcoatingFormulaHeaderLog>(entity =>
        {
            entity.HasKey(e => e.CoatingFormulaHeaderLogPk).HasName("PK_CoatingFormulaHeaderLog");

            entity.ToTable("RnDCoatingFormulaHeaderLOG");

            entity.Property(e => e.CoatingFormulaHeaderLogPk).HasColumnName("CoatingFormulaHeaderLog_PK");
            entity.Property(e => e.CoatingCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoatingDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CoatingFormulaHeaderNoPk).HasColumnName("CoatingFormulaHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.Version).HasColumnType("decimal(4, 2)");
        });

        modelBuilder.Entity<RnDformulaCleanLabel>(entity =>
        {
            entity.HasKey(e => e.FmlCleanLabelPk).HasName("PK_IMCleanLabel");

            entity.ToTable("RnDFormulaCleanLabel");

            entity.Property(e => e.FmlCleanLabelPk).HasColumnName("FmlCleanLabel_PK");
            entity.Property(e => e.CleanLabelDesc)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FmlHdrFk).HasColumnName("FmlHdr_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<RnDformulaDetail>(entity =>
        {
            entity.HasKey(e => e.RnDformulaDetailNoPk);

            entity.ToTable("RnDFormulaDetail");

            entity.Property(e => e.RnDformulaDetailNoPk).HasColumnName("RnDFormulaDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDfdheaderNoFk).HasColumnName("RnDFDHeaderNo_FK");
            entity.Property(e => e.RnDfdlabelClaim)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasColumnName("RnDFDLabelClaim");
            entity.Property(e => e.RnDfdmethod)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDMethod");
            entity.Property(e => e.RnDfdmwratio)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDMWRatio");
            entity.Property(e => e.RnDfdpctOver)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDPctOver");
            entity.Property(e => e.RnDfdpctOverA)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDPctOverA");
            entity.Property(e => e.RnDfdpctPotency)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDPctPotency");
            entity.Property(e => e.RnDfdremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDRemarks");
            entity.Property(e => e.RnDfdrmitemCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDRMItemCode");
            entity.Property(e => e.RnDfdrmitemDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDRMItemDesc");
            entity.Property(e => e.RnDfdrmitemFk).HasColumnName("RnDFDRMItem_FK");
            entity.Property(e => e.RnDfdsortId).HasColumnName("RnDFDSortID");
            entity.Property(e => e.RnDfdspec)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDSPec");
            entity.Property(e => e.RnDfdtotalWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDTotalWt");
            entity.Property(e => e.RnDfdunitWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDUnitWt");

            entity.HasOne(d => d.RnDfdheaderNoFkNavigation).WithMany(p => p.RnDformulaDetails)
                .HasForeignKey(d => d.RnDfdheaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RnDFormulaDetail_RnDFormulaHeader");
        });

        modelBuilder.Entity<RnDformulaDetailLog>(entity =>
        {
            entity.HasKey(e => e.RnDlogDetailNoPk).HasName("PK_RnDLogDetailNo");

            entity.ToTable("RnDFormulaDetailLOG");

            entity.Property(e => e.RnDlogDetailNoPk).HasColumnName("RnDLogDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDfdheaderNoFk).HasColumnName("RnDFDHeaderNo_FK");
            entity.Property(e => e.RnDfdlabelClaim)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RnDFDLabelClaim");
            entity.Property(e => e.RnDfdmethod)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDMethod");
            entity.Property(e => e.RnDfdmwratio)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDMWRatio");
            entity.Property(e => e.RnDfdpctOver)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDPctOver");
            entity.Property(e => e.RnDfdpctOverA)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDPctOverA");
            entity.Property(e => e.RnDfdpctPotency)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDPctPotency");
            entity.Property(e => e.RnDfdremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDRemarks");
            entity.Property(e => e.RnDfdrmitemCode)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDRMItemCode");
            entity.Property(e => e.RnDfdrmitemDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDRMItemDesc");
            entity.Property(e => e.RnDfdrmitemFk).HasColumnName("RnDFDRMItem_FK");
            entity.Property(e => e.RnDfdsortId).HasColumnName("RnDFDSortID");
            entity.Property(e => e.RnDfdspec)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFDSPec");
            entity.Property(e => e.RnDfdtotalWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDTotalWt");
            entity.Property(e => e.RnDfdunitWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFDUnitWt");
            entity.Property(e => e.RnDformulaDetailNoPk).HasColumnName("RnDFormulaDetailNo_PK");
        });

        modelBuilder.Entity<RnDformulaHeader>(entity =>
        {
            entity.HasKey(e => e.RnDformulaHeaderNoPk);

            entity.ToTable("RnDFormulaHeader");

            entity.Property(e => e.RnDformulaHeaderNoPk).HasColumnName("RnDFormulaHeaderNo_PK");
            entity.Property(e => e.Comment)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDcoating2UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDCoating2UnitWt");
            entity.Property(e => e.RnDcoating3UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDCoating3UnitWt");
            entity.Property(e => e.RnDcoatingFormulaHeader2Fk).HasColumnName("RnDCoatingFormulaHeader2_FK");
            entity.Property(e => e.RnDcoatingFormulaHeader3Fk).HasColumnName("RnDCoatingFormulaHeader3_FK");
            entity.Property(e => e.RnDcoatingFormulaHeaderFk).HasColumnName("RnDCoatingFormulaHeader_FK");
            entity.Property(e => e.RnDcoatingUnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDCoatingUnitWt");
            entity.Property(e => e.RnDfhalertLimit)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RnDFHAlertLimit");
            entity.Property(e => e.RnDfhalertRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHAlertRange");
            entity.Property(e => e.RnDfhbatchSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHBatchSize");
            entity.Property(e => e.RnDfhbatchUomFk).HasColumnName("RnDFHBatchUOM_FK");
            entity.Property(e => e.RnDfhcapsuleCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHCapsuleCode");
            entity.Property(e => e.RnDfhcapuleDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHCapuleDesc");
            entity.Property(e => e.RnDfhcoating)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHCoating");
            entity.Property(e => e.RnDfhcolor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHColor");
            entity.Property(e => e.RnDfhcontrolLimit)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RnDFHControlLimit");
            entity.Property(e => e.RnDfhcontrolRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHControlRange");
            entity.Property(e => e.RnDfhconvertImdate)
                .HasColumnType("datetime")
                .HasColumnName("RnDFHConvertIMDate");
            entity.Property(e => e.RnDfhcustomerNoFk).HasColumnName("RnDFHCustomerNo_FK");
            entity.Property(e => e.RnDfhdailyDose).HasColumnName("RnDFHDailyDose");
            entity.Property(e => e.RnDfhdepositWt)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RnDFHDepositWt");
            entity.Property(e => e.RnDfhdisintegrate)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHDisintegrate");
            entity.Property(e => e.RnDfhdryWt)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RnDFHDryWt");
            entity.Property(e => e.RnDfhemptyCapsuleWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHEmptyCapsuleWt");
            entity.Property(e => e.RnDfhfgitemMasterNoFk).HasColumnName("RnDFHFGItemMasterNo_FK");
            entity.Property(e => e.RnDfhformulaCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHFormulaCode");
            entity.Property(e => e.RnDfhformulaDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHFormulaDesc");
            entity.Property(e => e.RnDfhgeDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGeDesc");
            entity.Property(e => e.RnDfhgelColor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelColor");
            entity.Property(e => e.RnDfhgelColor2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelColor2");
            entity.Property(e => e.RnDfhgelColor3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelColor3");
            entity.Property(e => e.RnDfhgelType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelType");
            entity.Property(e => e.RnDfhhardness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHHardness");
            entity.Property(e => e.RnDfhimver)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("RnDFHIMver");
            entity.Property(e => e.RnDfhinst)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RnDFHInst");
            entity.Property(e => e.RnDfhnotes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RnDFHNotes");
            entity.Property(e => e.RnDfholdFmlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHOldFmlCode");
            entity.Property(e => e.RnDfholdFmlId).HasColumnName("RnDFHOldFmlID");
            entity.Property(e => e.RnDfhpack).HasColumnName("RnDFHPack");
            entity.Property(e => e.RnDfhparentNoFk).HasColumnName("RnDFHParentNo_FK");
            entity.Property(e => e.RnDfhpctYield)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RnDFHPctYield");
            entity.Property(e => e.RnDfhpillCavity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHPillCavity");
            entity.Property(e => e.RnDfhpillCavitySize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHPillCavitySize");
            entity.Property(e => e.RnDfhprodRun)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHProdRun");
            entity.Property(e => e.RnDfhremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHRemarks");
            entity.Property(e => e.RnDfhribbonThickness)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHRibbonThickness");
            entity.Property(e => e.RnDfhrootId).HasColumnName("RnDFHrootID");
            entity.Property(e => e.RnDfhservingSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHServingSize");
            entity.Property(e => e.RnDfhshape)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHShape");
            entity.Property(e => e.RnDfhsize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHSize");
            entity.Property(e => e.RnDfhstatusNoFk).HasColumnName("RnDFHStatusNo_FK");
            entity.Property(e => e.RnDfhthickness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHThickness");
            entity.Property(e => e.RnDfhtotalUnitWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHTotalUnitWt");
            entity.Property(e => e.RnDfhtotalWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHTotalWt");
            entity.Property(e => e.RnDfhversion)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("RnDFHVersion");
            entity.Property(e => e.RnDgel2UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDGel2UnitWt");
            entity.Property(e => e.RnDgel3UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDGel3UnitWt");
            entity.Property(e => e.RnDgelFormulaHeader2Fk).HasColumnName("RnDGelFormulaHeader2_FK");
            entity.Property(e => e.RnDgelFormulaHeader3Fk).HasColumnName("RnDGelFormulaHeader3_FK");
            entity.Property(e => e.RnDgelFormulaHeaderFk).HasColumnName("RnDGelFormulaHeader_FK");
            entity.Property(e => e.RnDgelThickness)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDGelThickness");
            entity.Property(e => e.RnDgelUnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDGelUnitWt");
            entity.Property(e => e.RnDmachineType)
                .HasMaxLength(100)
                .HasColumnName("RnDMachineType");
            entity.Property(e => e.RnDpctGelLost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDPctGelLost");
            entity.Property(e => e.RnDrpm)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("RnDRPM");
            entity.Property(e => e.RndFhproductTypeNoFk).HasColumnName("RndFHProductTypeNo_FK");
        });

        modelBuilder.Entity<RnDformulaHeaderLog>(entity =>
        {
            entity.HasKey(e => e.RnDlogHeaderNoPk).HasName("PK_RnDLogHeaderNo");

            entity.ToTable("RnDFormulaHeaderLOG");

            entity.Property(e => e.RnDlogHeaderNoPk).HasColumnName("RnDLogHeaderNo_PK");
            entity.Property(e => e.Comment)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RnDcoating2UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDCoating2UnitWt");
            entity.Property(e => e.RnDcoating3UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDCoating3UnitWt");
            entity.Property(e => e.RnDcoatingFormulaHeader2Fk).HasColumnName("RnDCoatingFormulaHeader2_FK");
            entity.Property(e => e.RnDcoatingFormulaHeader3Fk).HasColumnName("RnDCoatingFormulaHeader3_FK");
            entity.Property(e => e.RnDcoatingFormulaHeaderFk).HasColumnName("RnDCoatingFormulaHeader_FK");
            entity.Property(e => e.RnDcoatingUnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDCoatingUnitWt");
            entity.Property(e => e.RnDfhalertLimit)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RnDFHAlertLimit");
            entity.Property(e => e.RnDfhalertRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHAlertRange");
            entity.Property(e => e.RnDfhbatchSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHBatchSize");
            entity.Property(e => e.RnDfhbatchUomFk).HasColumnName("RnDFHBatchUOM_FK");
            entity.Property(e => e.RnDfhcapsuleCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHCapsuleCode");
            entity.Property(e => e.RnDfhcapuleDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHCapuleDesc");
            entity.Property(e => e.RnDfhcoating)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHCoating");
            entity.Property(e => e.RnDfhcolor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHColor");
            entity.Property(e => e.RnDfhcontrolLimit)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RnDFHControlLimit");
            entity.Property(e => e.RnDfhcontrolRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHControlRange");
            entity.Property(e => e.RnDfhconvertImdate)
                .HasColumnType("datetime")
                .HasColumnName("RnDFHConvertIMDate");
            entity.Property(e => e.RnDfhcustomerNoFk).HasColumnName("RnDFHCustomerNo_FK");
            entity.Property(e => e.RnDfhdailyDose).HasColumnName("RnDFHDailyDose");
            entity.Property(e => e.RnDfhdepositWt)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RnDFHDepositWt");
            entity.Property(e => e.RnDfhdisintegrate)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHDisintegrate");
            entity.Property(e => e.RnDfhdryWt)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("RnDFHDryWt");
            entity.Property(e => e.RnDfhemptyCapsuleWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHEmptyCapsuleWt");
            entity.Property(e => e.RnDfhfgitemMasterNoFk).HasColumnName("RnDFHFGItemMasterNo_FK");
            entity.Property(e => e.RnDfhformulaCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHFormulaCode");
            entity.Property(e => e.RnDfhformulaDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHFormulaDesc");
            entity.Property(e => e.RnDfhgeDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGeDesc");
            entity.Property(e => e.RnDfhgelColor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelColor");
            entity.Property(e => e.RnDfhgelColor2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelColor2");
            entity.Property(e => e.RnDfhgelColor3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelColor3");
            entity.Property(e => e.RnDfhgelType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHGelType");
            entity.Property(e => e.RnDfhhardness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHHardness");
            entity.Property(e => e.RnDfhimver)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("RnDFHIMver");
            entity.Property(e => e.RnDfhinst)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RnDFHInst");
            entity.Property(e => e.RnDfhnotes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RnDFHNotes");
            entity.Property(e => e.RnDfholdFmlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHOldFmlCode");
            entity.Property(e => e.RnDfholdFmlId).HasColumnName("RnDFHOldFmlID");
            entity.Property(e => e.RnDfhpack).HasColumnName("RnDFHPack");
            entity.Property(e => e.RnDfhparentNoFk).HasColumnName("RnDFHParentNo_FK");
            entity.Property(e => e.RnDfhpctYield)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("RnDFHPctYield");
            entity.Property(e => e.RnDfhpillCavity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHPillCavity");
            entity.Property(e => e.RnDfhpillCavitySize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHPillCavitySize");
            entity.Property(e => e.RnDfhprodRun)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHProdRun");
            entity.Property(e => e.RnDfhremarks)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RnDFHRemarks");
            entity.Property(e => e.RnDfhribbonThickness)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHRibbonThickness");
            entity.Property(e => e.RnDfhrootId).HasColumnName("RnDFHrootID");
            entity.Property(e => e.RnDfhservingSize)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHServingSize");
            entity.Property(e => e.RnDfhshape)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHShape");
            entity.Property(e => e.RnDfhsize)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHSize");
            entity.Property(e => e.RnDfhstatusNoFk).HasColumnName("RnDFHStatusNo_FK");
            entity.Property(e => e.RnDfhthickness)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RnDFHThickness");
            entity.Property(e => e.RnDfhtotalUnitWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHTotalUnitWt");
            entity.Property(e => e.RnDfhtotalWt)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDFHTotalWt");
            entity.Property(e => e.RnDfhversion)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("RnDFHVersion");
            entity.Property(e => e.RnDformulaHeaderNoPk).HasColumnName("RnDFormulaHeaderNo_PK");
            entity.Property(e => e.RnDgel2UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDGel2UnitWt");
            entity.Property(e => e.RnDgel3UnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDGel3UnitWt");
            entity.Property(e => e.RnDgelFormulaHeader2Fk).HasColumnName("RnDGelFormulaHeader2_FK");
            entity.Property(e => e.RnDgelFormulaHeader3Fk).HasColumnName("RnDGelFormulaHeader3_FK");
            entity.Property(e => e.RnDgelFormulaHeaderFk).HasColumnName("RnDGelFormulaHeader_FK");
            entity.Property(e => e.RnDgelThickness)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDGelThickness");
            entity.Property(e => e.RnDgelUnitWt)
                .HasColumnType("decimal(18, 10)")
                .HasColumnName("RnDGelUnitWt");
            entity.Property(e => e.RnDmachineType)
                .HasMaxLength(100)
                .HasColumnName("RnDMachineType");
            entity.Property(e => e.RnDpctGelLost)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RnDPctGelLost");
            entity.Property(e => e.RnDrpm)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("RnDRPM");
            entity.Property(e => e.RndFhproductTypeNoFk).HasColumnName("RndFHProductTypeNo_FK");
        });

        modelBuilder.Entity<RnDformulaWorkTask>(entity =>
        {
            entity.HasKey(e => e.FmlWorkTaskPk);

            entity.ToTable("RnDFormulaWorkTasks");

            entity.Property(e => e.FmlWorkTaskPk).HasColumnName("FmlWorkTask_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FmlHdrFk).HasColumnName("FmlHdr_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.WorkTaskFk).HasColumnName("WorkTask_FK");
        });

        modelBuilder.Entity<RnDgelFormulaDetail>(entity =>
        {
            entity.HasKey(e => e.GelFormulaDetailNoPk).HasName("PK_GelFormulaDetailNo");

            entity.ToTable("RnDGelFormulaDetail");

            entity.Property(e => e.GelFormulaDetailNoPk).HasColumnName("GelFormulaDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GelFormulaHeaderFk).HasColumnName("GelFormulaHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.RmitemFk).HasColumnName("RMItem_FK");
            entity.Property(e => e.Rmpercent)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("RMPercent");

            entity.HasOne(d => d.GelFormulaHeaderFkNavigation).WithMany(p => p.RnDgelFormulaDetails)
                .HasForeignKey(d => d.GelFormulaHeaderFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RnDGelFormulaDetail_RnDGelFormulaHeader");
        });

        modelBuilder.Entity<RnDgelFormulaDetailLog>(entity =>
        {
            entity.HasKey(e => e.GelFormulaDetailLogPk).HasName("PK_GelFormulaDetailLog");

            entity.ToTable("RnDGelFormulaDetailLOG");

            entity.Property(e => e.GelFormulaDetailLogPk).HasColumnName("GelFormulaDetailLog_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GelFormulaDetailNoPk).HasColumnName("GelFormulaDetailNo_PK");
            entity.Property(e => e.GelFormulaHeaderFk).HasColumnName("GelFormulaHeader_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrderId)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("OrderID");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Rmcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.RmitemFk).HasColumnName("RMItem_FK");
            entity.Property(e => e.Rmpercent)
                .HasColumnType("decimal(10, 6)")
                .HasColumnName("RMPercent");
        });

        modelBuilder.Entity<RnDgelFormulaHeader>(entity =>
        {
            entity.HasKey(e => e.GelFormulaHeaderNoPk);

            entity.ToTable("RnDGelFormulaHeader");

            entity.Property(e => e.GelFormulaHeaderNoPk).HasColumnName("GelFormulaHeaderNo_PK");
            entity.Property(e => e.AppearanceColorFk).HasColumnName("AppearanceColor_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GelColorImFk).HasColumnName("GelColorIM_FK");
            entity.Property(e => e.GelColorImcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GelColorIMCode");
            entity.Property(e => e.GelColorImdesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("GelColorIMDesc");
            entity.Property(e => e.GelMassCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GelMassDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.GelSource).HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.Version).HasColumnType("decimal(4, 2)");
        });

        modelBuilder.Entity<RnDgelFormulaHeaderLog>(entity =>
        {
            entity.HasKey(e => e.GelFormulaHeaderLogPk).HasName("PK_GelFormulaHeaderLog");

            entity.ToTable("RnDGelFormulaHeaderLOG");

            entity.Property(e => e.GelFormulaHeaderLogPk).HasColumnName("GelFormulaHeaderLog_PK");
            entity.Property(e => e.AppearanceColorFk).HasColumnName("AppearanceColor_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GelColorImFk).HasColumnName("GelColorIM_FK");
            entity.Property(e => e.GelColorImcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GelColorIMCode");
            entity.Property(e => e.GelColorImdesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("GelColorIMDesc");
            entity.Property(e => e.GelFormulaHeaderNoPk).HasColumnName("GelFormulaHeaderNo_PK");
            entity.Property(e => e.GelMassCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GelMassDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.GelSource).HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(250);
            entity.Property(e => e.Version).HasColumnType("decimal(4, 2)");
        });

        modelBuilder.Entity<Rtvdetail>(entity =>
        {
            entity.HasKey(e => e.RtvdetailNoPk);

            entity.ToTable("RTVDetail");

            entity.Property(e => e.RtvdetailNoPk).HasColumnName("RTVDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RcvDetailNoFk).HasColumnName("RcvDetailNo_FK");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RtvnoFk).HasColumnName("RTVNo_FK");
            entity.Property(e => e.RtvnumBox).HasColumnName("RTVNumBox");
            entity.Property(e => e.RtvqtyPerBox)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RTVQtyPerBox");
            entity.Property(e => e.RtvreturnQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RTVReturnQty");
        });

        modelBuilder.Entity<Rtvheader>(entity =>
        {
            entity.HasKey(e => e.RtvnoPk).HasName("PK_RTV");

            entity.ToTable("RTVHeader");

            entity.Property(e => e.RtvnoPk).HasColumnName("RTVNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Instruction)
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Ponumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PONumber");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RequestDt).HasColumnType("datetime");
            entity.Property(e => e.Rtvscac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RTVScac");
            entity.Property(e => e.RtvstatusNoFk).HasColumnName("RTVStatusNo_FK");
            entity.Property(e => e.StstrAddress1)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("STstrAddress1");
            entity.Property(e => e.StstrAddress2)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("STstrAddress2");
            entity.Property(e => e.StstrAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrAttn");
            entity.Property(e => e.StstrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrCity");
            entity.Property(e => e.StstrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrCountry");
            entity.Property(e => e.StstrEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrEmail");
            entity.Property(e => e.StstrFax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrFax1");
            entity.Property(e => e.StstrFax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrFax2");
            entity.Property(e => e.StstrName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STstrName");
            entity.Property(e => e.StstrPhone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrPhone1");
            entity.Property(e => e.StstrPhone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrPhone2");
            entity.Property(e => e.StstrPhoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrPhoneExt");
            entity.Property(e => e.StstrPostal)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrPostal");
            entity.Property(e => e.StstrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrState");
            entity.Property(e => e.StstrZip)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STstrZip");
            entity.Property(e => e.VendorSaleRep)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SampleTracking>(entity =>
        {
            entity.HasKey(e => e.RmtnoPk);

            entity.ToTable("SampleTracking");

            entity.Property(e => e.RmtnoPk).HasColumnName("RMTNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmtbotName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTBotName");
            entity.Property(e => e.RmtextractSolvent)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTExtractSolvent");
            entity.Property(e => e.RmtplantParts)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTPlantParts");
            entity.Property(e => e.RmtrcvHeaderNoFk).HasColumnName("RMTRcvHeaderNo_FK");
            entity.Property(e => e.RmtsampleDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTSampleDate");
            entity.Property(e => e.RmtsampledBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTSampledBy");
            entity.Property(e => e.RmtvendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTVendorLot");
            entity.Property(e => e.RmtwhlotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTWHLotNumber");
            entity.Property(e => e.Rmtwhname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTWHName");
            entity.Property(e => e.Rmtwhnotes)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RMTWHNotes");
            entity.Property(e => e.RmtwhpullDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTWHPullDate");
            entity.Property(e => e.RmtwhpulledBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTWHPulledBy");
        });

        modelBuilder.Entity<SampleTrackingImport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SampleTrackingImport");

            entity.Property(e => e.BotanicalName).HasMaxLength(255);
            entity.Property(e => e.Comments).HasMaxLength(255);
            entity.Property(e => e.DateQasampled)
                .HasColumnType("datetime")
                .HasColumnName("DateQASampled");
            entity.Property(e => e.DateQcreceived)
                .HasColumnType("datetime")
                .HasColumnName("DateQCReceived");
            entity.Property(e => e.DateResultsExpected).HasColumnType("datetime");
            entity.Property(e => e.DateResultsReceived).HasColumnType("datetime");
            entity.Property(e => e.DateSent).HasColumnType("datetime");
            entity.Property(e => e.ExtractSolvent).HasMaxLength(255);
            entity.Property(e => e.Item).HasMaxLength(255);
            entity.Property(e => e.ItemDescription).HasMaxLength(255);
            entity.Property(e => e.Lab).HasMaxLength(255);
            entity.Property(e => e.Lot).HasMaxLength(255);
            entity.Property(e => e.PlantParts).HasMaxLength(255);
            entity.Property(e => e.Reference).HasMaxLength(255);
            entity.Property(e => e.SampleReturnDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.TestingRequired).HasMaxLength(255);
            entity.Property(e => e.Vendor).HasMaxLength(255);
        });

        modelBuilder.Entity<SampleTrackingMd>(entity =>
        {
            entity.HasKey(e => e.RmtMdPk);

            entity.ToTable("SampleTrackingMD");

            entity.Property(e => e.RmtMdPk).HasColumnName("RmtMd_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmtMdMethodFk).HasColumnName("RmtMdMethod_FK");
        });

        modelBuilder.Entity<SampleTrackingMethod>(entity =>
        {
            entity.HasKey(e => e.RmtMethodPk);

            entity.ToTable("SampleTrackingMethod");

            entity.Property(e => e.RmtMethodPk).HasColumnName("RmtMethod_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmtMethod)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RmtMethodDescr)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SampleTrackingResult>(entity =>
        {
            entity.HasKey(e => e.RmtrnoPk);

            entity.ToTable("SampleTrackingResult");

            entity.Property(e => e.RmtrnoPk).HasColumnName("RMTRNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsBulkTest).HasColumnName("isBulkTest");
            entity.Property(e => e.IsFg).HasColumnName("IS_FG");
            entity.Property(e => e.IsMixTest).HasColumnName("isMixTest");
            entity.Property(e => e.IsPkgTest).HasColumnName("isPkgTest");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmtFk).HasColumnName("RMT_FK");
            entity.Property(e => e.Rmtranalyst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTRAnalyst");
            entity.Property(e => e.RmtrbotName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTRBotName");
            entity.Property(e => e.Rmtrcomment)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RMTRComment");
            entity.Property(e => e.RmtrdtExpected)
                .HasColumnType("datetime")
                .HasColumnName("RMTRDtExpected");
            entity.Property(e => e.RmtrdtResultsReported)
                .HasColumnType("datetime")
                .HasColumnName("RMTRDtResultsReported");
            entity.Property(e => e.RmtrdtSampleReturned)
                .HasColumnType("datetime")
                .HasColumnName("RMTRDtSampleReturned");
            entity.Property(e => e.RmtrdtSentToLab)
                .HasColumnType("datetime")
                .HasColumnName("RMTRDtSentToLab");
            entity.Property(e => e.RmtrextractSolvent)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTRExtractSolvent");
            entity.Property(e => e.Rmtrlab)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTRLab");
            entity.Property(e => e.Rmtrmethod)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMTRMethod");
            entity.Property(e => e.RmtrplantParts)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTRPlantParts");
            entity.Property(e => e.Rmtrreceived)
                .HasColumnType("datetime")
                .HasColumnName("RMTRReceived");
            entity.Property(e => e.Rmtrreference)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("RMTRReference");
            entity.Property(e => e.Rmtrresults)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("RMTRResults");
            entity.Property(e => e.Rmtrsubtest)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMTRSubtest");
            entity.Property(e => e.RmtrtestsReqired)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RMTRTestsReqired");
            entity.Property(e => e.Rmtrunit)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RMTRUnit");
            entity.Property(e => e.StartTestDt).HasColumnType("datetime");
            entity.Property(e => e.VerifyBy)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SampleTrackingResultDetail>(entity =>
        {
            entity.HasKey(e => e.RmtResPk);

            entity.ToTable("SampleTrackingResultDetail");

            entity.Property(e => e.RmtResPk).HasColumnName("RmtRes_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmtMethod)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RmtResult)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RmtResultComment)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RmtResultSpecification)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RmtResultUnit)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RmtTest)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RmthFk).HasColumnName("RMTH_FK");
        });

        modelBuilder.Entity<SampleTrackingResultHeader>(entity =>
        {
            entity.HasKey(e => e.RmthnoPk);

            entity.ToTable("SampleTrackingResultHeader");

            entity.Property(e => e.RmthnoPk).HasColumnName("RMTHNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmtFk).HasColumnName("RMT_FK");
            entity.Property(e => e.RmthanalyzerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTHAnalyzerName");
            entity.Property(e => e.Rmthcomment)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("RMTHComment");
            entity.Property(e => e.RmthexpectedDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTHExpectedDate");
            entity.Property(e => e.RmthlabName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTHLabName");
            entity.Property(e => e.RmthreceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTHReceivedDate");
            entity.Property(e => e.Rmthreference)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTHReference");
            entity.Property(e => e.RmthrequestedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMTHRequestedBy");
            entity.Property(e => e.RmthsentDate)
                .HasColumnType("datetime")
                .HasColumnName("RMTHSentDate");
        });

        modelBuilder.Entity<ShapeCode>(entity =>
        {
            entity.HasKey(e => e.ShapeCodeNoPk).HasName("PK_Shape");

            entity.Property(e => e.ShapeCodeNoPk).HasColumnName("ShapeCodeNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.Scdescription)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SCDescription");
            entity.Property(e => e.Scname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SCName");
            entity.Property(e => e.ScproductTypes)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SCProductTypes");
        });

        modelBuilder.Entity<SobillTo>(entity =>
        {
            entity.HasKey(e => e.SobillToNoPk).HasName("PK_POBillTo");

            entity.ToTable("SOBillTo");

            entity.Property(e => e.SobillToNoPk).HasColumnName("SOBillToNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Sobtaddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOBTAddress1");
            entity.Property(e => e.Sobtaddress2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOBTAddress2");
            entity.Property(e => e.Sobtaddress3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOBTAddress3");
            entity.Property(e => e.Sobtattn)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOBTAttn");
            entity.Property(e => e.Sobtcity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTCity");
            entity.Property(e => e.Sobtcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTCountry");
            entity.Property(e => e.SobtediwhsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOBTEDIwhsID");
            entity.Property(e => e.Sobtemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOBTEmail");
            entity.Property(e => e.Sobtfax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTFax1");
            entity.Property(e => e.Sobtfax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTFax2");
            entity.Property(e => e.Sobtname)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOBTName");
            entity.Property(e => e.Sobtphone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTPhone1");
            entity.Property(e => e.Sobtphone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTPhone2");
            entity.Property(e => e.SobtphoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTPhoneExt");
            entity.Property(e => e.SobtpostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTPostalCode");
            entity.Property(e => e.Sobtremarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SOBTRemarks");
            entity.Property(e => e.Sobtstate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTState");
            entity.Property(e => e.SobtzipCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOBTZipCode");
        });

        modelBuilder.Entity<SobulkStatusOpen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SOBulkStatusOPEN");

            entity.Property(e => e.BlendEndDt).HasColumnType("datetime");
            entity.Property(e => e.BlendStartDt).HasColumnType("datetime");
            entity.Property(e => e.Bomdt)
                .HasColumnType("datetime")
                .HasColumnName("BOMDt");
            entity.Property(e => e.BrcompleteDt)
                .HasColumnType("datetime")
                .HasColumnName("BRCompleteDt");
            entity.Property(e => e.BrdueDt).HasColumnName("BRDueDt");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.Brqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRQty");
            entity.Property(e => e.CoatEndDt).HasColumnType("datetime");
            entity.Property(e => e.CoatStartDt).HasColumnType("datetime");
            entity.Property(e => e.EncapEndDt).HasColumnType("datetime");
            entity.Property(e => e.EncapStartDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.InWuschedDt)
                .HasColumnType("datetime")
                .HasColumnName("InWUSchedDt");
            entity.Property(e => e.InspectEndDt).HasColumnType("datetime");
            entity.Property(e => e.InspectStartDt).HasColumnType("datetime");
            entity.Property(e => e.ReleaseEndDt).HasColumnType("datetime");
            entity.Property(e => e.ReleaseStartDt).HasColumnType("datetime");
            entity.Property(e => e.ShipDt).HasColumnType("datetime");
            entity.Property(e => e.Sonum).HasColumnName("SOnum");
            entity.Property(e => e.WuendDt)
                .HasColumnType("datetime")
                .HasColumnName("WUEndDt");
            entity.Property(e => e.WustartDt)
                .HasColumnType("datetime")
                .HasColumnName("WUStartDt");
        });

        modelBuilder.Entity<SobulkStatusRangeOpen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SOBulkStatusRangeOPEN");

            entity.Property(e => e.BlendEncap).HasColumnName("Blend_Encap");
            entity.Property(e => e.BlendEndDt).HasColumnType("datetime");
            entity.Property(e => e.BlendStartDt).HasColumnType("datetime");
            entity.Property(e => e.BomRelease).HasColumnName("BOM_Release");
            entity.Property(e => e.BomWusched)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BOM_WUSched");
            entity.Property(e => e.Bomdt)
                .HasColumnType("datetime")
                .HasColumnName("BOMDt");
            entity.Property(e => e.BrcompleteDt)
                .HasColumnType("datetime")
                .HasColumnName("BRCompleteDt");
            entity.Property(e => e.BrdueDt).HasColumnName("BRDueDt");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.Brqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("BRQty");
            entity.Property(e => e.CoatEndDt).HasColumnType("datetime");
            entity.Property(e => e.CoatStartDt).HasColumnType("datetime");
            entity.Property(e => e.EncapCoat).HasColumnName("Encap_Coat");
            entity.Property(e => e.EncapEndDt).HasColumnType("datetime");
            entity.Property(e => e.EncapStartDt).HasColumnType("datetime");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.InWuschedDt)
                .HasColumnType("datetime")
                .HasColumnName("InWUSchedDt");
            entity.Property(e => e.InspectEndDt).HasColumnType("datetime");
            entity.Property(e => e.InspectRelease).HasColumnName("Inspect_Release");
            entity.Property(e => e.InspectStartDt).HasColumnType("datetime");
            entity.Property(e => e.ReleaseEndDt).HasColumnType("datetime");
            entity.Property(e => e.ReleaseStartDt).HasColumnType("datetime");
            entity.Property(e => e.ShipDt).HasColumnType("datetime");
            entity.Property(e => e.Sonum).HasColumnName("SOnum");
            entity.Property(e => e.ToInspect).HasColumnName("To_Inspect");
            entity.Property(e => e.WuBlend).HasColumnName("WU_Blend");
            entity.Property(e => e.WuendDt)
                .HasColumnType("datetime")
                .HasColumnName("WUEndDt");
            entity.Property(e => e.WuschedWu)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("WUSched_WU");
            entity.Property(e => e.WustartDt)
                .HasColumnType("datetime")
                .HasColumnName("WUStartDt");
        });

        modelBuilder.Entity<SocloseRequest>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PK_SOCloseRequest_1");

            entity.ToTable("SOCloseRequest");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RequestReason)
                .IsRequired()
                .HasMaxLength(2500)
                .IsUnicode(false);
            entity.Property(e => e.SocrstatusNoFk).HasColumnName("SOCRStatusNo_FK");
            entity.Property(e => e.Sonumber).HasColumnName("SONumber");
        });

        modelBuilder.Entity<Sodetail>(entity =>
        {
            entity.HasKey(e => e.SodetailNoPk).HasName("PK_PODetail");

            entity.ToTable("SODetail");

            entity.HasIndex(e => e.SodsoheaderNoFk, "IX1SODetail");

            entity.HasIndex(e => e.SoditemId, "IX2SODetail");

            entity.HasIndex(e => e.SoditemMasterNoFk, "_dta_index_SODetail_7_234535969__K1_K8");

            entity.Property(e => e.SodetailNoPk).HasColumnName("SODetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsBlanketPo).HasColumnName("isBlanketPO");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.SodbatchBlending).HasColumnName("SODBatchBlending");
            entity.Property(e => e.SodbatchBlendingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchBlendingEndDt");
            entity.Property(e => e.SodbatchBlendingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchBlendingStartDt");
            entity.Property(e => e.SodbatchCoating).HasColumnName("SODBatchCoating");
            entity.Property(e => e.SodbatchCoatingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchCoatingEndDt");
            entity.Property(e => e.SodbatchCoatingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchCoatingStartDt");
            entity.Property(e => e.SodbatchCompressing).HasColumnName("SODBatchCompressing");
            entity.Property(e => e.SodbatchCompressingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchCompressingEndDt");
            entity.Property(e => e.SodbatchCompressingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchCompressingStartDt");
            entity.Property(e => e.SodbatchCountingNsorting).HasColumnName("SODBatchCountingNSorting");
            entity.Property(e => e.SodbatchCountingNsortingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchCountingNSortingEndDt");
            entity.Property(e => e.SodbatchCountingNsortingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchCountingNSortingStartDt");
            entity.Property(e => e.SodbatchDrying).HasColumnName("SODBatchDrying");
            entity.Property(e => e.SodbatchDryingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchDryingEndDt");
            entity.Property(e => e.SodbatchDryingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchDryingStartDt");
            entity.Property(e => e.SodbatchEncapsulation).HasColumnName("SODBatchEncapsulation");
            entity.Property(e => e.SodbatchEncapsulationEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchEncapsulationEndDt");
            entity.Property(e => e.SodbatchEncapsulationStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchEncapsulationStartDt");
            entity.Property(e => e.SodbatchInspection).HasColumnName("SODBatchInspection");
            entity.Property(e => e.SodbatchInspectionEndDt)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SODBatchInspectionEndDt");
            entity.Property(e => e.SodbatchInspectionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchInspectionStartDt");
            entity.Property(e => e.SodbatchLabelPrinting).HasColumnName("SODBatchLabelPrinting");
            entity.Property(e => e.SodbatchLabelPrintingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchLabelPrintingEndDt");
            entity.Property(e => e.SodbatchLabelPrintingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchLabelPrintingStartDt");
            entity.Property(e => e.SodbatchMixing).HasColumnName("SODBatchMixing");
            entity.Property(e => e.SodbatchMixingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchMixingEndDt");
            entity.Property(e => e.SodbatchMixingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchMixingStartDt");
            entity.Property(e => e.SodbatchPackaging).HasColumnName("SODBatchPackaging");
            entity.Property(e => e.SodbatchPackagingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchPackagingEndDt");
            entity.Property(e => e.SodbatchPackagingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchPackagingStartDt");
            entity.Property(e => e.SodbatchPolishing).HasColumnName("SODBatchPolishing");
            entity.Property(e => e.SodbatchPolishingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchPolishingEndDt");
            entity.Property(e => e.SodbatchPolishingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchPolishingStartDt");
            entity.Property(e => e.SodbatchProduction).HasColumnName("SODBatchProduction");
            entity.Property(e => e.SodbatchProductionEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchProductionEndDt");
            entity.Property(e => e.SodbatchProductionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchProductionStartDt");
            entity.Property(e => e.SodbatchQareleased).HasColumnName("SODBatchQAReleased");
            entity.Property(e => e.SodbatchQareleasedEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchQAReleasedEndDt");
            entity.Property(e => e.SodbatchQareleasedStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchQAReleasedStartDt");
            entity.Property(e => e.SodbatchWeighedUp).HasColumnName("SODBatchWeighedUp");
            entity.Property(e => e.SodbatchWeighedUpEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchWeighedUpEndDt");
            entity.Property(e => e.SodbatchWeighedUpStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBatchWeighedUpStartDt");
            entity.Property(e => e.Sodbomcreated).HasColumnName("SODBOMCreated");
            entity.Property(e => e.SodbomcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBOMCreatedDt");
            entity.Property(e => e.Sodbrcreated).HasColumnName("SODBRCreated");
            entity.Property(e => e.SodbrcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("SODBRCreatedDt");
            entity.Property(e => e.SodcostPerPackSize).HasColumnName("SODCostPerPackSize");
            entity.Property(e => e.SodcostPerThousand).HasColumnName("SODCostPerThousand");
            entity.Property(e => e.SodcustItemId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SODCustItem_ID");
            entity.Property(e => e.SodcustomerOrderQty).HasColumnName("SODCustomerOrderQty");
            entity.Property(e => e.SoddeliveredDate)
                .HasColumnType("datetime")
                .HasColumnName("SODDeliveredDate");
            entity.Property(e => e.SodextCost).HasColumnName("SODExtCost");
            entity.Property(e => e.SodextPrice).HasColumnName("SODExtPrice");
            entity.Property(e => e.SodimcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SODIMCustomerNo_FK");
            entity.Property(e => e.SodisShipmentStart).HasColumnName("SODIsShipmentStart");
            entity.Property(e => e.SoditemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SODItem_ID");
            entity.Property(e => e.SoditemId6)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("SODItem_ID_6");
            entity.Property(e => e.SoditemMasterNoFk).HasColumnName("SODItemMasterNo_FK");
            entity.Property(e => e.SoditemMasterVer)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("SODItemMasterVer");
            entity.Property(e => e.SodnewQty).HasColumnName("SODNewQty");
            entity.Property(e => e.Sodnotes)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SODNotes");
            entity.Property(e => e.SodorderedUomFk).HasColumnName("SODOrderedUOM_FK");
            entity.Property(e => e.SodpackagingCompleted).HasColumnName("SODPackagingCompleted");
            entity.Property(e => e.SodpackagingSetup).HasColumnName("SODPackagingSetup");
            entity.Property(e => e.SodpackagingSetupDate)
                .HasColumnType("datetime")
                .HasColumnName("SODPackagingSetupDate");
            entity.Property(e => e.SodpricePerPackSize).HasColumnName("SODPricePerPackSize");
            entity.Property(e => e.SodpricePerThousand).HasColumnName("SODPricePerThousand");
            entity.Property(e => e.SodproductionCompleted).HasColumnName("SODProductionCompleted");
            entity.Property(e => e.SodproductionCompletedDt)
                .HasColumnType("datetime")
                .HasColumnName("SODProductionCompletedDt");
            entity.Property(e => e.SodproductionQty).HasColumnName("SODProductionQty");
            entity.Property(e => e.SodproductionReleasedEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODProductionReleasedEndDt");
            entity.Property(e => e.SodproductionReleasedFlag).HasColumnName("SODProductionReleasedFlag");
            entity.Property(e => e.SodproductionReleasedSize).HasColumnName("SODProductionReleasedSize");
            entity.Property(e => e.SodproductionReleasedStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODProductionReleasedStartDt");
            entity.Property(e => e.SodproductionScheduled).HasColumnName("SODProductionScheduled");
            entity.Property(e => e.SodproductionScheduledEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SODProductionScheduledEndDt");
            entity.Property(e => e.SodproductionScheduledStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODProductionScheduledStartDt");
            entity.Property(e => e.SodquoteDetailNoFk).HasColumnName("SODQuoteDetailNo_FK");
            entity.Property(e => e.SodquoteHeaderNoFk).HasColumnName("SODQuoteHeaderNo_FK");
            entity.Property(e => e.Sodremarks)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SODRemarks");
            entity.Property(e => e.Sodrework).HasColumnName("SODRework");
            entity.Property(e => e.SodshipmentStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SODShipmentStartDT");
            entity.Property(e => e.SodsoheaderNoFk).HasColumnName("SODSOHeaderNo_FK");
            entity.Property(e => e.SodstatusNoFk).HasColumnName("SODStatusNo_FK");
            entity.Property(e => e.SodtotalRmweight).HasColumnName("SODTotalRMWeight");

            entity.HasOne(d => d.SoditemMasterNoFkNavigation).WithMany(p => p.Sodetails)
                .HasForeignKey(d => d.SoditemMasterNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SODetail_FGItemMaster");

            entity.HasOne(d => d.SodsoheaderNoFkNavigation).WithMany(p => p.Sodetails)
                .HasForeignKey(d => d.SodsoheaderNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SODetail_SOHeader");
        });

        modelBuilder.Entity<Soformula>(entity =>
        {
            entity.HasKey(e => e.SoformulaNoPk);

            entity.ToTable("SOFormula", tb => tb.HasTrigger("trigger_SOFormula"));

            entity.HasIndex(e => e.SoheaderNoFk, "IX1SOFormula");

            entity.HasIndex(e => e.FormulaGelatin, "IX2SOFormula");

            entity.HasIndex(e => e.FormulaRawMaterialNoFk, "IX3SOFormula");

            entity.HasIndex(e => e.QuoteHeaderNumberFk, "IX_SOFormula");

            entity.HasIndex(e => e.QuoteDetailNoFk, "IX_SOFormula_1");

            entity.HasIndex(e => new { e.SodetailNoFk, e.FormulaGelatin }, "_dta_index_SOFormula_7_704057594__K8_K10");

            entity.Property(e => e.SoformulaNoPk).HasColumnName("SOFormulaNo_PK");
            entity.Property(e => e.Bomqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("BOMQty");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FormulaItemMasterNoFk).HasColumnName("FormulaItemMasterNo_FK");
            entity.Property(e => e.FormulaLabelClaim)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FormulaNoFk).HasColumnName("FormulaNo_FK");
            entity.Property(e => e.FormulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormulaRawMaterialNoFk).HasColumnName("FormulaRawMaterialNo_FK");
            entity.Property(e => e.FormulaRmcustomerNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormulaRMCustomerNo_FK");
            entity.Property(e => e.FormulaRmqty).HasColumnName("FormulaRMQty");
            entity.Property(e => e.FormulaUomnoFk).HasColumnName("FormulaUOMNo_FK");
            entity.Property(e => e.ItemQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrigFormulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuoteDetailNoFk).HasColumnName("QuoteDetailNo_FK");
            entity.Property(e => e.QuoteHeaderNumberFk).HasColumnName("QuoteHeaderNumber_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.ShellItemMasterNoFk).HasColumnName("ShellItemMasterNo_FK");
            entity.Property(e => e.SodetailNoFk).HasColumnName("SODetailNo_FK");
            entity.Property(e => e.SoformulaNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOFormulaNotes");
            entity.Property(e => e.SoheaderNoFk).HasColumnName("SOHeaderNo_FK");
            entity.Property(e => e.Sormdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SORMDescription");
            entity.Property(e => e.SormitemNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SORMItemNo");
        });

        modelBuilder.Entity<SoformulaLog>(entity =>
        {
            entity.HasKey(e => e.SoformulaLogPk);

            entity.ToTable("SOFormulaLOG");

            entity.Property(e => e.SoformulaLogPk).HasColumnName("SOFormulaLOG_PK");
            entity.Property(e => e.Bomqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("BOMQty");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.FormulaItemMasterNoFk).HasColumnName("FormulaItemMasterNo_FK");
            entity.Property(e => e.FormulaLabelClaim)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FormulaNoFk).HasColumnName("FormulaNo_FK");
            entity.Property(e => e.FormulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormulaRawMaterialNoFk).HasColumnName("FormulaRawMaterialNo_FK");
            entity.Property(e => e.FormulaRmcustomerNoFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormulaRMCustomerNo_FK");
            entity.Property(e => e.FormulaRmqty).HasColumnName("FormulaRMQty");
            entity.Property(e => e.FormulaUomnoFk).HasColumnName("FormulaUOMNo_FK");
            entity.Property(e => e.ItemQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OrigFormulaNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuoteDetailNoFk).HasColumnName("QuoteDetailNo_FK");
            entity.Property(e => e.QuoteHeaderNumberFk).HasColumnName("QuoteHeaderNumber_FK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.ShellItemMasterNoFk).HasColumnName("ShellItemMasterNo_FK");
            entity.Property(e => e.SodetailNoFk).HasColumnName("SODetailNo_FK");
            entity.Property(e => e.SoformulaNoPk).HasColumnName("SOFormulaNo_PK");
            entity.Property(e => e.SoformulaNotes)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOFormulaNotes");
            entity.Property(e => e.SoheaderNoFk).HasColumnName("SOHeaderNo_FK");
            entity.Property(e => e.Sormdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SORMDescription");
            entity.Property(e => e.SormitemNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SORMItemNo");
        });

        modelBuilder.Entity<Soheader>(entity =>
        {
            entity.HasKey(e => e.SoheaderNoPk).HasName("PK_PurchaseOrders");

            entity.ToTable("SOHeader");

            entity.HasIndex(e => e.SohstatusNoFk, "IX1SOHeader");

            entity.HasIndex(e => e.Sohrep, "IX2SOHeader");

            entity.HasIndex(e => new { e.SohcustomerNoFk, e.SoheaderNoPk, e.SohdueDate, e.SohcustPonumber }, "_dta_index_SOHeader_7_1224443486__K9_K1_K16_K13");

            entity.Property(e => e.SoheaderNoPk).HasColumnName("SOHeaderNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.SoconfirmBy)
                .HasMaxLength(50)
                .HasColumnName("SOconfirmBy");
            entity.Property(e => e.SoconfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("SOconfirmDt");
            entity.Property(e => e.SodueConfirmBy)
                .HasMaxLength(50)
                .HasColumnName("SODueConfirmBy");
            entity.Property(e => e.SodueConfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("SODueConfirmDt");
            entity.Property(e => e.SohbatchBlending).HasColumnName("SOHBatchBlending");
            entity.Property(e => e.SohbatchBlendingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchBlendingEndDt");
            entity.Property(e => e.SohbatchBlendingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchBlendingStartDt");
            entity.Property(e => e.SohbatchCoating).HasColumnName("SOHBatchCoating");
            entity.Property(e => e.SohbatchCoatingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchCoatingEndDt");
            entity.Property(e => e.SohbatchCoatingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchCoatingStartDt");
            entity.Property(e => e.SohbatchCompressing).HasColumnName("SOHBatchCompressing");
            entity.Property(e => e.SohbatchCompressingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchCompressingEndDt");
            entity.Property(e => e.SohbatchCompressingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchCompressingStartDt");
            entity.Property(e => e.SohbatchCountingNsorting).HasColumnName("SOHBatchCountingNSorting");
            entity.Property(e => e.SohbatchCountingNsortingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchCountingNSortingEndDt");
            entity.Property(e => e.SohbatchCountingNsortingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchCountingNSortingStartDt");
            entity.Property(e => e.SohbatchDrying).HasColumnName("SOHBatchDrying");
            entity.Property(e => e.SohbatchDryingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchDryingEndDt");
            entity.Property(e => e.SohbatchDryingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchDryingStartDt");
            entity.Property(e => e.SohbatchEncapsulation).HasColumnName("SOHBatchEncapsulation");
            entity.Property(e => e.SohbatchEncapsulationEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchEncapsulationEndDt");
            entity.Property(e => e.SohbatchEncapsulationStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchEncapsulationStartDt");
            entity.Property(e => e.SohbatchInspection).HasColumnName("SOHBatchInspection");
            entity.Property(e => e.SohbatchInspectionEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchInspectionEndDt");
            entity.Property(e => e.SohbatchInspectionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchInspectionStartDt");
            entity.Property(e => e.SohbatchLabelPrinting).HasColumnName("SOHBatchLabelPrinting");
            entity.Property(e => e.SohbatchLabelPrintingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchLabelPrintingEndDt");
            entity.Property(e => e.SohbatchLabelPrintingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchLabelPrintingStartDt");
            entity.Property(e => e.SohbatchMixing).HasColumnName("SOHBatchMixing");
            entity.Property(e => e.SohbatchMixingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchMixingEndDt");
            entity.Property(e => e.SohbatchMixingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchMixingStartDt");
            entity.Property(e => e.SohbatchPackaging).HasColumnName("SOHBatchPackaging");
            entity.Property(e => e.SohbatchPackagingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchPackagingEndDt");
            entity.Property(e => e.SohbatchPackagingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchPackagingStartDt");
            entity.Property(e => e.SohbatchPolishing).HasColumnName("SOHBatchPolishing");
            entity.Property(e => e.SohbatchPolishingEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchPolishingEndDt");
            entity.Property(e => e.SohbatchPolishingStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchPolishingStartDt");
            entity.Property(e => e.SohbatchProduction).HasColumnName("SOHBatchProduction");
            entity.Property(e => e.SohbatchProductionEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchProductionEndDt");
            entity.Property(e => e.SohbatchProductionStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchProductionStartDt");
            entity.Property(e => e.SohbatchQareleased).HasColumnName("SOHBatchQAReleased");
            entity.Property(e => e.SohbatchQareleasedEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchQAReleasedEndDt");
            entity.Property(e => e.SohbatchQareleasedStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBatchQAReleasedStartDt");
            entity.Property(e => e.SohbatchWeighedUp).HasColumnName("SOHBatchWeighedUp");
            entity.Property(e => e.SohbillToNoFk).HasColumnName("SOHBillToNo_FK");
            entity.Property(e => e.Sohbomcreated).HasColumnName("SOHBOMCreated");
            entity.Property(e => e.SohbomcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBOMCreatedDt");
            entity.Property(e => e.Sohbrcreated).HasColumnName("SOHBRCreated");
            entity.Property(e => e.SohbrcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHBRCreatedDt");
            entity.Property(e => e.SohconfirmedAttn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHConfirmedAttn");
            entity.Property(e => e.SohconfirmedEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHConfirmedEmail");
            entity.Property(e => e.SohconfirmedFax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHConfirmedFax");
            entity.Property(e => e.SohcustNotes)
                .HasMaxLength(4000)
                .HasColumnName("SOHCustNotes");
            entity.Property(e => e.SohcustPonumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHCustPONumber");
            entity.Property(e => e.SohcustomerNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHCustomerNo_FK");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
            entity.Property(e => e.SohdueIn)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SOHDueIn");
            entity.Property(e => e.SohediDuns)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOHEDI_DUNS");
            entity.Property(e => e.SohediVendorId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOHEDI_VendorID");
            entity.Property(e => e.SohedipartnerId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SOHEDIPartnerID");
            entity.Property(e => e.SoheditimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("SOHEDITimeStamp");
            entity.Property(e => e.SohextraFee)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("SOHExtraFee");
            entity.Property(e => e.Sohfax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHFax");
            entity.Property(e => e.Sohfob)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHFOB");
            entity.Property(e => e.SohisShipmentStart).HasColumnName("SOHIsShipmentStart");
            entity.Property(e => e.Sohnotes)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SOHNotes");
            entity.Property(e => e.SohorderSrc).HasColumnName("SOHOrderSrc");
            entity.Property(e => e.SohorderedSalesTax).HasColumnName("SOHOrderedSalesTax");
            entity.Property(e => e.SohpackagingCompleted).HasColumnName("SOHPackagingCompleted");
            entity.Property(e => e.SohpkgBomcreated).HasColumnName("SOHPkgBOMCreated");
            entity.Property(e => e.SohpkgBomcreatedDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHPkgBOMCreatedDt");
            entity.Property(e => e.Sohpodate)
                .HasColumnType("datetime")
                .HasColumnName("SOHPODate");
            entity.Property(e => e.SohproductionCompleted).HasColumnName("SOHProductionCompleted");
            entity.Property(e => e.SohproductionCompletedDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHProductionCompletedDt");
            entity.Property(e => e.SohproductionReleasedEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHProductionReleasedEndDt");
            entity.Property(e => e.SohproductionReleasedFlag).HasColumnName("SOHProductionReleasedFlag");
            entity.Property(e => e.SohproductionReleasedStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHProductionReleasedStartDt");
            entity.Property(e => e.SohproductionScheduled).HasColumnName("SOHProductionScheduled");
            entity.Property(e => e.SohproductionScheduledEndDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHProductionScheduledEndDt");
            entity.Property(e => e.SohproductionScheduledStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHProductionScheduledStartDt");
            entity.Property(e => e.SohproductionTotalQty).HasColumnName("SOHProductionTotalQty");
            entity.Property(e => e.SohquoteHeaderNoFk).HasColumnName("SOHQuoteHeaderNo_FK");
            entity.Property(e => e.Sohremarks)
                .HasMaxLength(2500)
                .IsUnicode(false)
                .HasColumnName("SOHRemarks");
            entity.Property(e => e.Sohrep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHRep");
            entity.Property(e => e.SohsalesRep)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHSalesRep");
            entity.Property(e => e.SohsalesRep2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHSalesRep2");
            entity.Property(e => e.SohshipToNoFk).HasColumnName("SOHShipToNo_FK");
            entity.Property(e => e.SohshipmentStartDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHShipmentStartDt");
            entity.Property(e => e.SohsoclosedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHSOClosedBy");
            entity.Property(e => e.SohsoclosedDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHSOClosedDt");
            entity.Property(e => e.Sohsodate)
                .HasColumnType("datetime")
                .HasColumnName("SOHSODate");
            entity.Property(e => e.SohsortedKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHSortedKey");
            entity.Property(e => e.SohsovoidedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOHSOVoidedBy");
            entity.Property(e => e.SohsovoidedDt)
                .HasColumnType("datetime")
                .HasColumnName("SOHSOVoidedDt");
            entity.Property(e => e.SohstatusNoFk).HasColumnName("SOHStatusNo_FK");
            entity.Property(e => e.SohstockItem).HasColumnName("SOHStockItem");
            entity.Property(e => e.SohtermNoFk).HasColumnName("SOHTermNo_FK");
            entity.Property(e => e.SohtotalAmount).HasColumnName("SOHTotalAmount");
            entity.Property(e => e.SohweighedUpEndDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHWeighedUpEndDate");
            entity.Property(e => e.SohweighedUpStartDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHWeighedUpStartDate");
            entity.Property(e => e.SopkgConfirmBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOPkgConfirmBy");
            entity.Property(e => e.SopkgConfirmDt)
                .HasColumnType("datetime")
                .HasColumnName("SOPkgConfirmDt");
        });

        modelBuilder.Entity<SopackItem>(entity =>
        {
            entity.HasKey(e => e.SopkgItemPk);

            entity.ToTable("SOPackItem");

            entity.Property(e => e.SopkgItemPk).HasColumnName("SOPkgItem_PK");
            entity.Property(e => e.Bomqty)
                .HasColumnType("decimal(18, 8)")
                .HasColumnName("BOMQty");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("isFG");
            entity.Property(e => e.ItemCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemQty).HasColumnType("decimal(18, 8)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(2500);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.PkgImcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PkgIMCode");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.SoheaderNoFk).HasColumnName("SOHeaderNo_FK");
            entity.Property(e => e.SopodetailId).HasColumnName("SOPODetail_ID");
            entity.Property(e => e.UnitQty).HasColumnType("decimal(18, 8)");
        });

        modelBuilder.Entity<SopackStatusOpen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SOPackStatusOPEN");

            entity.Property(e => e.Bomdt)
                .HasColumnType("datetime")
                .HasColumnName("BOMDt");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.PkgCreateDt).HasColumnType("datetime");
            entity.Property(e => e.PkgPostDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedReadyDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedRecvDt).HasColumnType("datetime");
            entity.Property(e => e.Sodt)
                .HasColumnType("datetime")
                .HasColumnName("SODt");
            entity.Property(e => e.Sonum).HasColumnName("SOnum");
        });

        modelBuilder.Entity<SopackStatusRangeOpen>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SOPackStatusRangeOPEN");

            entity.Property(e => e.BomPkgBatchCreate).HasColumnName("BOM_PkgBatchCreate");
            entity.Property(e => e.BomPkgPost).HasColumnName("BOM_PkgPost");
            entity.Property(e => e.Bomdt)
                .HasColumnType("datetime")
                .HasColumnName("BOMDt");
            entity.Property(e => e.Imcode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMCode");
            entity.Property(e => e.PkgBatchCreateSchedReady).HasColumnName("PkgBatchCreate_SchedReady");
            entity.Property(e => e.PkgCreateDt).HasColumnType("datetime");
            entity.Property(e => e.PkgPostDt).HasColumnType("datetime");
            entity.Property(e => e.PkgRecvPkgPost).HasColumnName("PkgRecv_PkgPost");
            entity.Property(e => e.PkgSchedReadyDt).HasColumnType("datetime");
            entity.Property(e => e.PkgSchedRecvDt).HasColumnType("datetime");
            entity.Property(e => e.SchedReadyPkgRecv).HasColumnName("SchedReady_PkgRecv");
            entity.Property(e => e.Sodt)
                .HasColumnType("datetime")
                .HasColumnName("SODt");
            entity.Property(e => e.Sonum).HasColumnName("SOnum");
        });

        modelBuilder.Entity<Sopodetail>(entity =>
        {
            entity.ToTable("SOPODetail");

            entity.HasIndex(e => e.ItemMasterNoFk, "IX1SOPODetail");

            entity.HasIndex(e => e.IdRoot, "IdRootIndex");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemMasterNoFk).HasColumnName("ItemMasterNo_FK");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Notes)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Uom)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.IdRootNavigation).WithMany(p => p.Sopodetails)
                .HasForeignKey(d => d.IdRoot)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SOPODetail_SOHeader");
        });

        modelBuilder.Entity<SopodetailSubItem>(entity =>
        {
            entity.HasKey(e => e.SopodetailSubItemPk);

            entity.ToTable("SOPODetailSubItem");

            entity.Property(e => e.SopodetailSubItemPk).HasColumnName("SOPODetailSubItem_PK");
            entity.Property(e => e.ChildImcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ChildIMCode");
            entity.Property(e => e.ChildImqty).HasColumnName("ChildIMQty");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ParentImcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ParentIMCode");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(2500);
            entity.Property(e => e.SochildImqty).HasColumnName("SOChildIMQty");
            entity.Property(e => e.SopodetailId).HasColumnName("SOPODetail_ID");
        });

        modelBuilder.Entity<SopodetailSubItemLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SOPODetailSubItemLOG");

            entity.Property(e => e.ChildImcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ChildIMCode");
            entity.Property(e => e.ChildImqty).HasColumnName("ChildIMQty");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ParentImcode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ParentIMCode");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasMaxLength(2500);
            entity.Property(e => e.SochildImqty).HasColumnName("SOChildIMQty");
            entity.Property(e => e.SopodetailId).HasColumnName("SOPODetail_ID");
            entity.Property(e => e.SopodetailSubItemPk).HasColumnName("SOPODetailSubItem_PK");
        });

        modelBuilder.Entity<SoshipTo>(entity =>
        {
            entity.HasKey(e => e.SoshipToNoPk).HasName("PK_POShipTo");

            entity.ToTable("SOShipTo");

            entity.Property(e => e.SoshipToNoPk).HasColumnName("SOShipToNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Sostaddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOSTAddress1");
            entity.Property(e => e.Sostaddress2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOSTAddress2");
            entity.Property(e => e.Sostaddress3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOSTAddress3");
            entity.Property(e => e.Sostattn)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOSTAttn");
            entity.Property(e => e.Sostcity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTCity");
            entity.Property(e => e.Sostcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTCountry");
            entity.Property(e => e.SostediwhsId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SOSTEDIwhsID");
            entity.Property(e => e.Sostemail)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOSTEmail");
            entity.Property(e => e.Sostfax1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTFax1");
            entity.Property(e => e.Sostfax2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTFax2");
            entity.Property(e => e.Sostname)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("SOSTName");
            entity.Property(e => e.Sostphone1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTPhone1");
            entity.Property(e => e.Sostphone2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTPhone2");
            entity.Property(e => e.SostphoneExt)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTPhoneExt");
            entity.Property(e => e.SostpostalCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTPostalCode");
            entity.Property(e => e.Sostremarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SOSTRemarks");
            entity.Property(e => e.Sostscac)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTSCAC");
            entity.Property(e => e.Soststate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTState");
            entity.Property(e => e.SostzipCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOSTZipCode");
        });

        modelBuilder.Entity<SotimeLineEvent>(entity =>
        {
            entity.HasKey(e => e.SotimeLineNoPk);

            entity.ToTable("SOTimeLineEvents");

            entity.Property(e => e.SotimeLineNoPk).HasColumnName("SOTimeLineNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EventDescription)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EventName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<TabletMachine>(entity =>
        {
            entity.HasKey(e => e.TabletMachinePk);

            entity.ToTable("TabletMachine");

            entity.Property(e => e.TabletMachinePk).HasColumnName("TabletMachine_PK");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.TabletMachineName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEdiRmRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_EDI_RM-REMOVE");

            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmkey).HasColumnName("RMKey");
        });

        modelBuilder.Entity<TempBr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempBR");

            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrlotPriority).HasColumnName("BRLotPriority");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
        });

        modelBuilder.Entity<TempWubr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempWUBR");

            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrlotPriority).HasColumnName("BRLotPriority");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.ToTable("Ticket");

            entity.Property(e => e.Id)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.UserList).HasMaxLength(2500);
        });

        modelBuilder.Entity<TicketDetail>(entity =>
        {
            entity.HasKey(e => e.TdnoPk).HasName("PK_TDNo_PK");

            entity.ToTable("TicketDetail");

            entity.Property(e => e.TdnoPk)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TDNo_PK");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.TicketId)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TicketEditorTemplate>(entity =>
        {
            entity.ToTable("TicketEditorTemplate");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Template).IsRequired();
        });

        modelBuilder.Entity<TitleLevelRequest>(entity =>
        {
            entity.HasKey(e => e.TlrnoPk);

            entity.ToTable("TitleLevelRequest");

            entity.Property(e => e.TlrnoPk).HasColumnName("TLRNo_PK");
            entity.Property(e => e.AppsTreeNoFk).HasColumnName("AppsTreeNo_FK");
            entity.Property(e => e.TitleId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TitleID");
            entity.Property(e => e.Variable).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<TmpAdp82922Remove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_ADP82922-REMOVE");

            entity.Property(e => e.Department).HasMaxLength(255);
            entity.Property(e => e.F7).HasMaxLength(255);
            entity.Property(e => e.JobTitle)
                .HasMaxLength(255)
                .HasColumnName("Job Title");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.NumberOfDirectReports).HasColumnName("Number of Direct Reports");
            entity.Property(e => e.ReportsTo)
                .HasMaxLength(255)
                .HasColumnName("Reports To");
        });

        modelBuilder.Entity<TmpBrallocRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_BRAlloc-REMOVE");

            entity.Property(e => e.AdjQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.AllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Brlot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrprodComp).HasColumnName("BRProdComp");
            entity.Property(e => e.Customername)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ProdDesc)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Prodcode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMcode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMDesc");
            entity.Property(e => e.Sonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOnum");
            entity.Property(e => e.SysAlloc).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Wuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("WUQty");
        });

        modelBuilder.Entity<TmpPkgHb3Remove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_PkgHB3-REMOVE");

            entity.Property(e => e.Boxes)
                .HasColumnType("decimal(38, 0)")
                .HasColumnName("boxes");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(255)
                .HasColumnName("Item Code");
            entity.Property(e => e.PerBox).HasColumnType("decimal(38, 0)");
            entity.Property(e => e.WhsLot)
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<TmpPkgItemType2Remove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_PkgItemType2-REMOVE");

            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.ItemCode).HasMaxLength(255);
            entity.Property(e => e.ItemType).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpPkgItemTypeRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_PkgItemType-REMOVE");

            entity.Property(e => e.Category).HasMaxLength(255);
            entity.Property(e => e.ItemCode).HasMaxLength(255);
            entity.Property(e => e.ItemType).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpPkgallocRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_PKGAlloc-REMOVE");

            entity.Property(e => e.AdjInAlloc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("adjInAlloc");
            entity.Property(e => e.AdjQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CpnDesc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("cpnDesc");
            entity.Property(e => e.Cpncode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Customername)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Imalloc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMAlloc");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imdesc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Sonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SOnum");
            entity.Property(e => e.Sostatus).HasColumnName("SOStatus");
            entity.Property(e => e.Wuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("WUQty");
        });

        modelBuilder.Entity<TmpRmallocRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TmpRMAlloc-REMOVE");

            entity.Property(e => e.AdjAlloc).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.AllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Brcompleted).HasColumnName("BRCompleted");
            entity.Property(e => e.Brlot)
                .HasMaxLength(50)
                .HasColumnName("BRLot");
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ProdCode).HasMaxLength(50);
            entity.Property(e => e.ProdDesc).HasMaxLength(500);
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(500)
                .HasColumnName("RMDesc");
            entity.Property(e => e.Sonum)
                .HasMaxLength(50)
                .HasColumnName("SONum");
            entity.Property(e => e.SysAlloc).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.Wuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("WUQty");
        });

        modelBuilder.Entity<TmpRminactiveRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_RMInactive-REMOVE");

            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdesc)
                .HasMaxLength(250)
                .HasColumnName("RMDesc");
        });

        modelBuilder.Entity<TmpVendorInActive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMP_Vendor_InActive");

            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(1000);
        });

        modelBuilder.Entity<TmpdecCpnUseRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecCpnUse-REMOVE");

            entity.Property(e => e.Customer)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMER");
            entity.Property(e => e.DateCompl)
                .HasColumnType("datetime")
                .HasColumnName("DATE COMPL");
            entity.Property(e => e.ImCode)
                .HasMaxLength(255)
                .HasColumnName("IM CODE");
            entity.Property(e => e.MfgLot)
                .HasMaxLength(255)
                .HasColumnName("MFG LOT");
            entity.Property(e => e.Output).HasColumnName("OUTPUT");
            entity.Property(e => e.PkgBatch)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("PKG BATCH");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("PO##");
            entity.Property(e => e.RmCode)
                .HasMaxLength(255)
                .HasColumnName("RM CODE");
            entity.Property(e => e.So)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("SO #");
            entity.Property(e => e.TotalUsed).HasColumnName("TOTAL USED");
            entity.Property(e => e.WhseLot)
                .HasMaxLength(255)
                .HasColumnName("WHSE LOT");
        });

        modelBuilder.Entity<TmpdecDupLotRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecDupLot-REMOVE");

            entity.Property(e => e.CorrectLot)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("Correct Lot");
            entity.Property(e => e.CurrentLot)
                .HasMaxLength(255)
                .HasColumnName("Current Lot #");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(255)
                .HasColumnName("Item Code");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .HasColumnName("PO #");
            entity.Property(e => e.ReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Received Date");
            entity.Property(e => e.RecvQty).HasColumnName("Recv Qty");
            entity.Property(e => e.Vendor).HasMaxLength(255);
            entity.Property(e => e.VendorLot)
                .HasMaxLength(255)
                .HasColumnName("Vendor Lot #");
        });

        modelBuilder.Entity<TmpdecPkgBatchRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecPkgBatch-REMOVE");

            entity.Property(e => e.PackQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("packQty");
            entity.Property(e => e.PkgBatch).HasMaxLength(50);
        });

        modelBuilder.Entity<TmpdecPoRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecPO-REMOVE");

            entity.Property(e => e.F3).HasMaxLength(255);
            entity.Property(e => e.F4).HasMaxLength(255);
            entity.Property(e => e.F5).HasMaxLength(255);
            entity.Property(e => e.F6).HasMaxLength(255);
            entity.Property(e => e.NewPo)
                .HasMaxLength(255)
                .HasColumnName("newPO");
            entity.Property(e => e.OldPo)
                .HasMaxLength(255)
                .HasColumnName("oldPO");
        });

        modelBuilder.Entity<TmpdecPomonRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecPOMon-REMOVE");

            entity.Property(e => e.F3).HasMaxLength(255);
            entity.Property(e => e.NewPo)
                .HasMaxLength(255)
                .HasColumnName("newPO");
            entity.Property(e => e.OldPo)
                .HasMaxLength(255)
                .HasColumnName("Old PO");
        });

        modelBuilder.Entity<TmpdecProdCompletedRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecProdCompleted-REMOVE");

            entity.Property(e => e.BlendDt).HasColumnType("datetime");
            entity.Property(e => e.Brlot)
                .HasMaxLength(255)
                .HasColumnName("BRLot");
            entity.Property(e => e.Status).HasMaxLength(255);
        });

        modelBuilder.Entity<TmpdecReceivingRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecReceiving-REMOVE");

            entity.Property(e => e.Box).HasColumnName("BOX");
            entity.Property(e => e.F13).HasMaxLength(255);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(255)
                .HasColumnName("ITEM CODE");
            entity.Property(e => e.NewPos)
                .HasMaxLength(255)
                .HasColumnName("New Pos");
            entity.Property(e => e.NewWhslot)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("New whslot");
            entity.Property(e => e.OldWhsLot)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("Old WhsLOT ");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .HasColumnName("PO# ");
            entity.Property(e => e.PoDate)
                .HasColumnType("datetime")
                .HasColumnName("PO DATE");
            entity.Property(e => e.QtyBox).HasColumnName("QTY/BOX");
            entity.Property(e => e.RecQty).HasColumnName("REC QTY");
            entity.Property(e => e.ReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("Received Date");
            entity.Property(e => e.Vendor).HasMaxLength(255);
            entity.Property(e => e.VendorLot)
                .HasMaxLength(255)
                .HasColumnName("VENDOR LOT #");
        });

        modelBuilder.Entity<TmpdecRmphyInvByLocationRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecRMPhyInvByLocation-REMOVE");

            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.PalletId)
                .HasMaxLength(50)
                .HasColumnName("PalletID");
            entity.Property(e => e.PkgReturnWhsQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.RmbyLocNotes)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RMByLocNotes");
            entity.Property(e => e.RmbyLocReason)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMByLocReason");
            entity.Property(e => e.RmbyLocVendorCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMByLocVendorCode");
            entity.Property(e => e.RmitemByLocItemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocItemDesc");
            entity.Property(e => e.RmitemByLocItemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocItem_ID");
            entity.Property(e => e.RmitemByLocNoPk)
                .ValueGeneratedOnAdd()
                .HasColumnName("RMItemByLocNo_PK");
            entity.Property(e => e.RmitemByLocNumBox).HasColumnName("RMItemByLocNumBox");
            entity.Property(e => e.RmitemByLocProductClassNoFk).HasColumnName("RMItemByLocProductClassNo_FK");
            entity.Property(e => e.RmitemByLocQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMItemByLocQty");
            entity.Property(e => e.RmitemByLocQtyPerBox)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RMItemByLocQtyPerBox");
            entity.Property(e => e.RmitemByLocRmitemNoFk).HasColumnName("RMItemByLocRMItemNo_FK");
            entity.Property(e => e.RmitemByLocVendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocVendorLot");
            entity.Property(e => e.RmitemByLocVendorNoFk).HasColumnName("RMItemByLocVendorNo_FK");
            entity.Property(e => e.RmitemByLocWhsLocation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocWhsLocation");
            entity.Property(e => e.RmitemByLocWhsLot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocWhsLot");
            entity.Property(e => e.RmitemByLocations)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMItemByLocations");
        });

        modelBuilder.Entity<TmpdecRmphySflRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecRMphySFL-REMOVE");

            entity.Property(e => e.CustCode)
                .HasMaxLength(255)
                .HasColumnName("Cust Code");
            entity.Property(e => e.ExpDate)
                .HasColumnType("datetime")
                .HasColumnName("Exp# Date");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(255)
                .HasColumnName("Item Code");
            entity.Property(e => e.PalletId)
                .HasMaxLength(255)
                .HasColumnName("Pallet ID");
            entity.Property(e => e.QtyBox).HasColumnName("Qty/Box");
            entity.Property(e => e.RackLoc)
                .HasMaxLength(255)
                .HasColumnName("Rack Loc");
            entity.Property(e => e.RcvDate)
                .HasColumnType("datetime")
                .HasColumnName("Rcv# Date");
            entity.Property(e => e.Reason).HasMaxLength(255);
            entity.Property(e => e.TotalQty).HasColumnName("Total Qty");
            entity.Property(e => e.VendorLot)
                .HasMaxLength(255)
                .HasColumnName("Vendor Lot #");
            entity.Property(e => e.VendorName)
                .HasMaxLength(255)
                .HasColumnName("Vendor Name");
            entity.Property(e => e.Warehouse).HasMaxLength(255);
            entity.Property(e => e.WhsLot)
                .HasMaxLength(255)
                .HasColumnName("Whs# Lot");
        });

        modelBuilder.Entity<TmpdecRmusageRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPDecRMUsage-REMOVE");

            entity.Property(e => e.Customer)
                .HasMaxLength(255)
                .HasColumnName("CUSTOMER");
            entity.Property(e => e.DateCompl)
                .HasColumnType("datetime")
                .HasColumnName("DATE COMPL");
            entity.Property(e => e.F11).HasMaxLength(255);
            entity.Property(e => e.ImCode)
                .HasMaxLength(255)
                .HasColumnName("IM CODE");
            entity.Property(e => e.MfgLot)
                .HasMaxLength(255)
                .HasColumnName("MFG LOT");
            entity.Property(e => e.PkgBatch)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("PKG BATCH");
            entity.Property(e => e.Po)
                .HasMaxLength(255)
                .HasColumnName("PO#");
            entity.Property(e => e.RmCode)
                .HasMaxLength(255)
                .HasColumnName("RM CODE");
            entity.Property(e => e.UsedQty).HasColumnName("USED QTY");
            entity.Property(e => e.WhseLot)
                .HasMaxLength(255)
                .IsFixedLength()
                .HasColumnName("WHSE LOT");
        });

        modelBuilder.Entity<TmpgetCpnforPkgBatch>(entity =>
        {
            entity.ToTable("TMPGetCpnforPkgBatch");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BatchItemAdjAllocQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BatchItemRequiredQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BatchItemUsedQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.BatchNo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BatchQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.IsFg).HasColumnName("IsFG");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.Pversion).HasColumnName("PVersion");
            entity.Property(e => e.RemainOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainOH");
            entity.Property(e => e.RemainPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainPO");
            entity.Property(e => e.RemainQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainQC");
            entity.Property(e => e.SohdueDate)
                .HasColumnType("datetime")
                .HasColumnName("SOHDueDate");
        });

        modelBuilder.Entity<TmpgetRmforBrlot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TMPGetRMforBRLot_NEW");

            entity.ToTable("TMPGetRMforBRLot");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AvailPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("AvailPO");
            entity.Property(e => e.AvailQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("AvailQC");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrlotPriority).HasColumnName("BRLotPriority");
            entity.Property(e => e.HasExpired).HasColumnName("hasExpired");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LotQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotRmrequireQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotRMRequireQty");
            entity.Property(e => e.LotRmwuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotRMWUQty");
            entity.Property(e => e.NextId).HasColumnName("NextID");
            entity.Property(e => e.RemainOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainOH");
            entity.Property(e => e.RemainPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainPO");
            entity.Property(e => e.RemainQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainQC");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.ShellRm).HasColumnName("shellRM");
            entity.Property(e => e.WhsLots)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpgetRmforBrlotThang>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TMPGetRMforBRLot_Thang");

            entity.ToTable("TMPGetRMforBRLot_thang");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AvailPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("AvailPO");
            entity.Property(e => e.AvailQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("AvailQC");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrlotPriority).HasColumnName("BRLotPriority");
            entity.Property(e => e.HasExpired).HasColumnName("hasExpired");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LotQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotRmrequireQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotRMRequireQty");
            entity.Property(e => e.LotRmwuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotRMWUQty");
            entity.Property(e => e.NextId).HasColumnName("NextID");
            entity.Property(e => e.RemainOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainOH");
            entity.Property(e => e.RemainPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainPO");
            entity.Property(e => e.RemainQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainQC");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.ShellRm).HasColumnName("shellRM");
            entity.Property(e => e.WhsLots)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmppkgAllocRemove1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPpkgAlloc-REMOVE");

            entity.Property(e => e.AddInAlloc).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.AdjOrg).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.CpnCode).HasMaxLength(50);
            entity.Property(e => e.CpnDesc).HasMaxLength(500);
            entity.Property(e => e.Customer).HasMaxLength(250);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Imalloc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("IMAlloc");
            entity.Property(e => e.Imcode)
                .HasMaxLength(50)
                .HasColumnName("IMcode");
            entity.Property(e => e.Imdesc)
                .HasMaxLength(500)
                .HasColumnName("IMDesc");
            entity.Property(e => e.Sohstatus).HasColumnName("SOHStatus");
            entity.Property(e => e.Sonum).HasColumnName("SOnum");
            entity.Property(e => e.Wuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("WUQty");
        });

        modelBuilder.Entity<TmpqbinvoiceRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPQBInvoice-REMOVE");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Customer).HasMaxLength(250);
            entity.Property(e => e.ShipImcode)
                .HasMaxLength(50)
                .HasColumnName("ShipIMCode");
            entity.Property(e => e.ShipQty).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.Year)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<TmpquoteDecRemove>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPQuoteDec-REMOVE");

            entity.Property(e => e.Formulator).HasMaxLength(255);
            entity.Property(e => e.ItemIm)
                .HasMaxLength(255)
                .HasColumnName("ItemIM");
            entity.Property(e => e.Qa)
                .HasMaxLength(255)
                .HasColumnName("QA");
        });

        modelBuilder.Entity<TripHeader>(entity =>
        {
            entity.ToTable("TripHeader");

            entity.Property(e => e.ActDistance).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ActDuration).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EndAddress).HasMaxLength(250);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.EstDistance).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.EstDuration).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.StartAddress).HasMaxLength(250);
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Uommatrix>(entity =>
        {
            entity.HasKey(e => new { e.UomprodClassFk, e.UomprodTypeFk, e.UomcodeFk });

            entity.ToTable("UOMMatrix");

            entity.Property(e => e.UomprodClassFk).HasColumnName("UOMProdClass_FK");
            entity.Property(e => e.UomprodTypeFk).HasColumnName("UOMProdType_FK");
            entity.Property(e => e.UomcodeFk).HasColumnName("UOMCode_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Uomdesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("UOMDesc");
            entity.Property(e => e.Uomname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOMName");
        });

        modelBuilder.Entity<UompillSize>(entity =>
        {
            entity.HasKey(e => e.UompillSizeCodePk);

            entity.ToTable("UOMPillSize");

            entity.Property(e => e.UompillSizeCodePk)
                .ValueGeneratedNever()
                .HasColumnName("UOMPillSizeCode_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.Uompsdescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOMPSDescription");
            entity.Property(e => e.Uompsname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOMPSName");
        });

        modelBuilder.Entity<Upstracking>(entity =>
        {
            entity.HasKey(e => e.UpstrackingPk);

            entity.ToTable("UPSTracking", tb => tb.HasTrigger("DeleteOldBL"));

            entity.Property(e => e.UpstrackingPk).HasColumnName("UPStracking_PK");
            entity.Property(e => e.Blhnumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BLHNumber");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustPonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CustPONum");
            entity.Property(e => e.ProLeadNum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProNum)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Sonum)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SONum");
            entity.Property(e => e.Upsservice)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UPSservice");
            entity.Property(e => e.VoidStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UsersIdPk);

            entity.Property(e => e.UsersIdPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsersID_PK");
            entity.Property(e => e.ApprovePo).HasColumnName("ApprovePO");
            entity.Property(e => e.CloseOrVoidSo).HasColumnName("CloseOrVoidSO");
            entity.Property(e => e.CrtNewQnumOnly).HasColumnName("crtNewQnumOnly");
            entity.Property(e => e.DefForCustomer).HasColumnName("defForCustomer");
            entity.Property(e => e.EditNewBom).HasColumnName("EditNewBOM");
            entity.Property(e => e.EditPoafterRecv).HasColumnName("EditPOAfterRecv");
            entity.Property(e => e.EditRfqdoc).HasColumnName("EditRFQDoc");
            entity.Property(e => e.EditSopkgAfterBom).HasColumnName("EditSOPkgAfterBOM");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.RmviewHisNote).HasColumnName("RMViewHisNote");
            entity.Property(e => e.RmviewPobatch).HasColumnName("RMViewPOBatch");
            entity.Property(e => e.Rprmview).HasColumnName("RPRMview");
            entity.Property(e => e.SPicture).HasColumnName("sPicture");
            entity.Property(e => e.TitleId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TitleID");
            entity.Property(e => e.UserLogOffDt).HasColumnType("datetime");
            entity.Property(e => e.UserLogonDt).HasColumnType("datetime");
            entity.Property(e => e.UserPassChangeDate).HasColumnType("datetime");
            entity.Property(e => e.UserSupervisorIdFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserSupervisorID_FK");
            entity.Property(e => e.UsersCreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsersCreatedDt).HasColumnType("datetime");
            entity.Property(e => e.UsersDepartment).HasMaxLength(50);
            entity.Property(e => e.UsersEmail).HasMaxLength(250);
            entity.Property(e => e.UsersFcmtoken)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("UsersFCMToken");
            entity.Property(e => e.UsersFirstName)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UsersForgotPwdId).HasMaxLength(250);
            entity.Property(e => e.UsersLastName)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UsersLastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsersLastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.UsersLocDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsersMidName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UsersMonitorCust)
                .HasMaxLength(3000)
                .IsUnicode(false);
            entity.Property(e => e.UsersPasscode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsersToken).HasMaxLength(50);
            entity.Property(e => e.UsersWebPwd).HasMaxLength(50);
            entity.Property(e => e.WinLogonId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WinLogonID");
        });

        modelBuilder.Entity<UserDeptTemplate>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserDeptTemplate");

            entity.Property(e => e.AppTreeFk).HasColumnName("AppTree_FK");
            entity.Property(e => e.Department).HasMaxLength(250);
            entity.Property(e => e.IsSupervisor).HasColumnName("isSupervisor");
            entity.Property(e => e.TitleId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TitleID");
        });

        modelBuilder.Entity<UserTree>(entity =>
        {
            entity.HasKey(e => e.UserTreeNoPkbk);

            entity.ToTable("UserTree");

            entity.Property(e => e.UserTreeNoPkbk).HasColumnName("UserTreeNo_PKBK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.UserPermission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UserTreeAppsTreeNoFk).HasColumnName("UserTreeAppsTreeNo_FK");
            entity.Property(e => e.UserTreeUsersIdFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserTreeUsersID_FK");
        });

        modelBuilder.Entity<UserTreeRequest>(entity =>
        {
            entity.HasKey(e => e.UserTreeReqNoPk);

            entity.ToTable("UserTreeRequest");

            entity.Property(e => e.UserTreeReqNoPk).HasColumnName("UserTreeReqNo_PK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.UserPermissionType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UserTreeReqAppsTreeNoFk).HasColumnName("UserTreeReqAppsTreeNo_FK");
            entity.Property(e => e.UserTreeReqUsersIdFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserTreeReqUsersID_FK");
        });

        modelBuilder.Entity<UsersRequest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UsersRequest");

            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.ReqWinLogonId)
                .HasMaxLength(50)
                .HasColumnName("ReqWinLogonID");
            entity.Property(e => e.UsersReqBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsersReqDate).HasColumnType("datetime");
            entity.Property(e => e.UsersReqDepartment).HasMaxLength(50);
            entity.Property(e => e.UsersReqEmail).HasMaxLength(250);
            entity.Property(e => e.UsersReqFirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UsersReqIdPk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UsersReqID_PK");
            entity.Property(e => e.UsersReqLastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UsersReqMidName).HasMaxLength(50);
            entity.Property(e => e.UsersReqSupervisorIdFk)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("UsersReqSupervisorID_FK");
            entity.Property(e => e.UsersReqTitleId)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VItinventoryAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("v_ITInventoryAudit");

            entity.Property(e => e.DeviceName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItkeepQty).HasColumnName("ITKeepQty");
            entity.Property(e => e.Sku)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SKU");
        });

        modelBuilder.Entity<Validation>(entity =>
        {
            entity.HasKey(e => e.ValidationCode);

            entity.ToTable("Validation");

            entity.Property(e => e.ValidationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
        });

        modelBuilder.Entity<ValidationOption>(entity =>
        {
            entity.HasKey(e => e.VoptionNoPk).HasName("PK_ValidationOption");

            entity.Property(e => e.VoptionNoPk).HasColumnName("VOptionNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.OptionDescription)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValidationCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ValidationCodeNavigation).WithMany(p => p.ValidationOptions)
                .HasForeignKey(d => d.ValidationCode)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ValidationOptions_Validation");
        });

        modelBuilder.Entity<ValidationResponse>(entity =>
        {
            entity.HasKey(e => e.ValidationResponseNoPk);

            entity.Property(e => e.ValidationResponseNoPk).HasColumnName("ValidationResponseNo_PK");
            entity.Property(e => e.FieldKeyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.KeyNoFk).HasColumnName("KeyNo_FK");
            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ValidationCode)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VerifedReason)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VerifiedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VerifiedDt).HasColumnType("datetime");
            entity.Property(e => e.VerifiedValue)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoptionNoFk).HasColumnName("VOptionNo_FK");

            entity.HasOne(d => d.VoptionNoFkNavigation).WithMany(p => p.ValidationResponses)
                .HasForeignKey(d => d.VoptionNoFk)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ValidationResponses_ValidationOptions");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorNoPk);

            entity.ToTable("Vendor");

            entity.Property(e => e.VendorNoPk).HasColumnName("VendorNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmailAddr)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OwnerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QacontactName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAContactName");
            entity.Property(e => e.QaemailAddr)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QAEmailAddr");
            entity.Property(e => e.QccontactName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QCContactName");
            entity.Property(e => e.QcemailAddr)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("QCEmailAddr");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.VendorAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorAddr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillAttn)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBilladdr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorCarrierAcctNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorContact)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorContactEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorContactExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorFob)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorFOB");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorPaymentCodeTypeNoFk).HasColumnName("VendorPaymentCodeTypeNo_FK");
            entity.Property(e => e.VendorPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorScacCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorScacName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToAddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToAddress2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToAttention)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToEmail)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToScac)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorSortedKey)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorSpecialShippingInstruction).HasMaxLength(2500);
            entity.Property(e => e.VendorState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("VendorURL");
            entity.Property(e => e.VendorZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VendorDoc>(entity =>
        {
            entity.HasKey(e => e.ItemDocPk);

            entity.ToTable("VendorDoc");

            entity.Property(e => e.ItemDocPk).HasColumnName("ItemDoc_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.FormRequestNoFk)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormRequestNo_FK");
            entity.Property(e => e.ItemDocName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
        });

        modelBuilder.Entity<VendorLog>(entity =>
        {
            entity.HasKey(e => e.VendorLognoPk);

            entity.ToTable("VendorLOG");

            entity.Property(e => e.VendorLognoPk).HasColumnName("VendorLOGNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerEmailAddr)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QacontactName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAContactName");
            entity.Property(e => e.QaemailAddr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QAEmailAddr");
            entity.Property(e => e.QccontactName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QCContactName");
            entity.Property(e => e.QcemailAddr)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("QCEmailAddr");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.VendorAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorAddr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillAddr1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillAttn)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBillZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorBilladdr2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorCarrierAcctNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorContact)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorContactExt)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorContactPhone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorFob)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorFOB");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorNoPk).HasColumnName("VendorNo_PK");
            entity.Property(e => e.VendorPaymentCodeTypeNoFk).HasColumnName("VendorPaymentCodeTypeNo_FK");
            entity.Property(e => e.VendorPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorScacCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorScacName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToAddress1)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToAddress2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToAttention)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToCountry)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToName)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToPostalCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToScac)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorShipToZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorSortedKey)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorSpecialShippingInstruction).HasColumnType("ntext");
            entity.Property(e => e.VendorState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VendorURL");
            entity.Property(e => e.VendorZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VendorManufacture>(entity =>
        {
            entity.HasKey(e => e.VendorManufacturePk);

            entity.ToTable("VendorManufacture");

            entity.Property(e => e.VendorManufacturePk).HasColumnName("VendorManufacture_PK");
            entity.Property(e => e.MfrFk).HasColumnName("Mfr_FK");
            entity.Property(e => e.VendorNoFk).HasColumnName("VendorNo_FK");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseNoPk);

            entity.ToTable("Warehouse");

            entity.Property(e => e.WarehouseNoPk).HasColumnName("WarehouseNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsAddressLine1)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WhsAddressLine2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WhsAttention)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WhsCity)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WhsContactEmail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsCountry)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsFax1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsFax2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsNotes)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.WhsPhone1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsPhone2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsPostalCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.WhsState)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhsZipCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<WeighUpDetail>(entity =>
        {
            entity.HasKey(e => e.WudetailNoPk);

            entity.ToTable("WeighUpDetail");

            entity.HasIndex(e => e.WudbatchNoFk, "BatchNoIndex");

            entity.HasIndex(e => e.WuditemId, "IX_WeighItemId");

            entity.HasIndex(e => e.WudmanLot, "MfgLotIndex");

            entity.Property(e => e.WudetailNoPk).HasColumnName("WUDetailNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.WudaddInItem).HasColumnName("WUDAddInItem");
            entity.Property(e => e.WudbatchNoFk).HasColumnName("WUDBatchNo_FK");
            entity.Property(e => e.WudbrheaderNoFk).HasColumnName("WUDBRHeaderNo_FK");
            entity.Property(e => e.WuddestroyQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("WUDDestroyQty");
            entity.Property(e => e.WudinvTransNoFk).HasColumnName("WUDInvTransNo_FK");
            entity.Property(e => e.WuditemDesc)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("WUDItemDesc");
            entity.Property(e => e.WuditemId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUDItemID");
            entity.Property(e => e.WudloadNumber).HasColumnName("WUDLoadNumber");
            entity.Property(e => e.WudmanLot)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("WUDManLot");
            entity.Property(e => e.Wudnotes)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("WUDNotes");
            entity.Property(e => e.WudorderEntrySeq)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUDOrderEntrySeq");
            entity.Property(e => e.WudpostedDate)
                .HasColumnType("datetime")
                .HasColumnName("WUDPostedDate");
            entity.Property(e => e.Wudqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("WUDQTY");
            entity.Property(e => e.WudrawMateriallNoFk).HasColumnName("WUDRawMateriallNo_FK");
            entity.Property(e => e.WudstatusNoFk).HasColumnName("WUDStatusNo_FK");
            entity.Property(e => e.WudvendorLot)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUDVendorLot");
            entity.Property(e => e.WudvendorNoFk).HasColumnName("WUDVendorNo_FK");
            entity.Property(e => e.WudweighedUpBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUDWeighedUpBy");
            entity.Property(e => e.WudweighedUpDate)
                .HasColumnType("datetime")
                .HasColumnName("WUDWeighedUpDate");
            entity.Property(e => e.WudwhslotNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUDWHSLotNumber");
            entity.Property(e => e.WupkgImFk).HasColumnName("WUPkgIM_FK");
            entity.Property(e => e.WupkgSoFk).HasColumnName("WUPkgSO_FK");
            entity.Property(e => e.WuppostedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUPPostedBy");
            entity.Property(e => e.WuwhsLocation)
                .HasMaxLength(50)
                .HasColumnName("WUWhsLocation");
        });

        modelBuilder.Entity<WeighUpSchedule>(entity =>
        {
            entity.HasKey(e => e.WuschedNoPk);

            entity.ToTable("WeighUpSchedule");

            entity.Property(e => e.WuschedNoPk).HasColumnName("WUSchedNo_PK");
            entity.Property(e => e.Comment)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EndWuschedDate)
                .HasColumnType("datetime")
                .HasColumnName("EndWUschedDate");
            entity.Property(e => e.EndWusstampedBy)
                .HasMaxLength(50)
                .HasColumnName("EndWUSStampedBy");
            entity.Property(e => e.InWuschedDate)
                .HasColumnType("datetime")
                .HasColumnName("InWUschedDate");
            entity.Property(e => e.InWusstampedBy)
                .HasMaxLength(50)
                .HasColumnName("InWUSStampedBy");
            entity.Property(e => e.LastUpdBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remark).HasMaxLength(250);
            entity.Property(e => e.RmreadyDate)
                .HasColumnType("datetime")
                .HasColumnName("RMReadyDate");
            entity.Property(e => e.RmreadyStampedBy)
                .HasMaxLength(50)
                .HasColumnName("RMReadyStampedBy");
            entity.Property(e => e.ShipWuschedDate)
                .HasColumnType("datetime")
                .HasColumnName("ShipWUschedDate");
            entity.Property(e => e.ShipWusstampedBy)
                .HasMaxLength(50)
                .HasColumnName("ShipWUSStampedBy");
            entity.Property(e => e.StartWuschedDate)
                .HasColumnType("datetime")
                .HasColumnName("StartWUschedDate");
            entity.Property(e => e.StartWusstampedBy)
                .HasMaxLength(50)
                .HasColumnName("StartWUSStampedBy");
            entity.Property(e => e.WubatchReceivedBy)
                .HasMaxLength(50)
                .HasColumnName("WUBatchReceivedBy");
            entity.Property(e => e.WubatchReceivedDate)
                .HasColumnType("datetime")
                .HasColumnName("WUBatchReceivedDate");
            entity.Property(e => e.WubatchSentOutBy)
                .HasMaxLength(50)
                .HasColumnName("WUBatchSentOutBy");
            entity.Property(e => e.WubatchSentOutDate)
                .HasColumnType("datetime")
                .HasColumnName("WUBatchSentOutDate");
            entity.Property(e => e.Wurmready).HasColumnName("WURMReady");
            entity.Property(e => e.WusbatchHeaderNoFk).HasColumnName("WUSBatchHeaderNo_FK");
            entity.Property(e => e.Wuscheduled).HasColumnName("WUScheduled");
            entity.Property(e => e.Wusduration)
                .HasMaxLength(50)
                .HasColumnName("WUSDuration");
            entity.Property(e => e.WusloadNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUSLoadNumber");
            entity.Property(e => e.Wuslot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WUSLot");
            entity.Property(e => e.Wuspriority).HasColumnName("WUSPriority");
            entity.Property(e => e.WusroomNumber).HasColumnName("WUSRoomNumber");
            entity.Property(e => e.WustotalPallets).HasColumnName("WUSTotalPallets");
        });

        modelBuilder.Entity<WorkTask>(entity =>
        {
            entity.HasKey(e => e.WorkTaskNoPk);

            entity.Property(e => e.WorkTaskNoPk).HasColumnName("WorkTaskNo_PK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.Remarks).HasColumnType("ntext");
            entity.Property(e => e.WttaskCategoryNoFk).HasColumnName("WTTaskCategoryNo_FK");
            entity.Property(e => e.WttaskLaborRate)
                .HasColumnType("money")
                .HasColumnName("WTTaskLaborRate");
            entity.Property(e => e.WttaskMachineRate)
                .HasColumnType("money")
                .HasColumnName("WTTaskMachineRate");
            entity.Property(e => e.WttaskName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WTTaskName");
            entity.Property(e => e.WttaskTypeNoFk).HasColumnName("WTTaskTypeNo_FK");
        });

        modelBuilder.Entity<Wslog>(entity =>
        {
            entity.ToTable("WSLog");

            entity.Property(e => e.WslogId).HasColumnName("WSLogID");
            entity.Property(e => e.WslogIpaddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("WSLogIPAddress");
            entity.Property(e => e.WslogMenu)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WSLogMenu");
            entity.Property(e => e.WslogMessage)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("WSLogMessage");
            entity.Property(e => e.WslogMethod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WSLogMethod");
            entity.Property(e => e.WslogTime)
                .HasColumnType("datetime")
                .HasColumnName("WSLogTime");
            entity.Property(e => e.WslogUsersIdFk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WSLogUsersID_FK");
            entity.Property(e => e.WslogWindowsId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WSLogWindowsID");
        });

        modelBuilder.Entity<WuplanningCache>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("WUPlanning_Cache");

            entity.Property(e => e.AvailPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("AvailPO");
            entity.Property(e => e.AvailQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("AvailQC");
            entity.Property(e => e.Brlot)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BRLot");
            entity.Property(e => e.BrlotPriority).HasColumnName("BRLotPriority");
            entity.Property(e => e.HasExpired).HasColumnName("hasExpired");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.LotQty).HasColumnType("decimal(18, 6)");
            entity.Property(e => e.LotRmrequireQty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotRMRequireQty");
            entity.Property(e => e.LotRmwuqty)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("LotRMWUQty");
            entity.Property(e => e.RemainOh)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainOH");
            entity.Property(e => e.RemainPo)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainPO");
            entity.Property(e => e.RemainQc)
                .HasColumnType("decimal(18, 6)")
                .HasColumnName("RemainQC");
            entity.Property(e => e.Rmcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RMCode");
            entity.Property(e => e.Rmdescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("RMDescription");
            entity.Property(e => e.ShellRm).HasColumnName("shellRM");
            entity.Property(e => e.WhsLots)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ZipCode>(entity =>
        {
            entity.HasKey(e => new { e.ZipCodeNoPk, e.RecStatusNoFk });

            entity.ToTable("ZipCode");

            entity.Property(e => e.ZipCodeNoPk)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ZipCodeNo_PK");
            entity.Property(e => e.RecStatusNoFk).HasColumnName("RecStatusNo_FK");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.LastUpdBy)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdDt).HasColumnType("datetime");
            entity.Property(e => e.ZipCity)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZipCounty)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZipStateCode)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm810Hdr>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PK_WM_810_HDR");

            entity.ToTable("ZMM_810_HDR", tb =>
                {
                    tb.HasTrigger("Add810Flag");
                    tb.HasTrigger("Del810Flag");
                });

            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.HdrcarrierAlphaCode)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("HDRCarrierAlphaCode");
            entity.Property(e => e.HdrcarrierProCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HDRCarrierProCode");
            entity.Property(e => e.HdrconfirmationReceived)
                .HasColumnType("datetime")
                .HasColumnName("HDRConfirmationReceived");
            entity.Property(e => e.HdrdepartmentNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HDRDepartmentNumber");
            entity.Property(e => e.HdreffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("HDREffectiveDate");
            entity.Property(e => e.HdrinternalVendorNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HDRInternalVendorNumber");
            entity.Property(e => e.HdrinvoiceDate)
                .HasColumnType("datetime")
                .HasColumnName("HDRInvoiceDate");
            entity.Property(e => e.HdrinvoiceNumber)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("HDRInvoiceNumber");
            entity.Property(e => e.HdrinvoiceSent)
                .HasColumnType("datetime")
                .HasColumnName("HDRInvoiceSent");
            entity.Property(e => e.HdrinvoiceTotal).HasColumnName("HDRInvoiceTotal");
            entity.Property(e => e.HdrmerchandiseTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HDRMerchandiseTypeCode");
            entity.Property(e => e.HdrnumberOfLineItems).HasColumnName("HDRNumberOfLineItems");
            entity.Property(e => e.HdrnumberOfUnits).HasColumnName("HDRNumberOfUnits");
            entity.Property(e => e.HdrnumberUnitCode)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRNumberUnitCode");
            entity.Property(e => e.HdrpoDate)
                .HasColumnType("datetime")
                .HasColumnName("HDRPoDate");
            entity.Property(e => e.HdrpoNumber)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("HDRPoNumber");
            entity.Property(e => e.HdrreferenceId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HDRReferenceID");
            entity.Property(e => e.HdrreferenceIdq)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("HDRReferenceIDQ");
            entity.Property(e => e.Hdrrouting)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("HDRRouting");
            entity.Property(e => e.HdrsacId).HasColumnName("HDRSacID");
            entity.Property(e => e.HdrshipToAddr1)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRShipToAddr1");
            entity.Property(e => e.HdrshipToAddr2)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRShipToAddr2");
            entity.Property(e => e.HdrshipToAddr3)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRShipToAddr3");
            entity.Property(e => e.HdrshipToAddr4)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRShipToAddr4");
            entity.Property(e => e.HdrshipToCity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("HDRShipToCity");
            entity.Property(e => e.HdrshipToCountry)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("HDRShipToCountry");
            entity.Property(e => e.HdrshipToGln)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("HDRShipToGLN");
            entity.Property(e => e.HdrshipToName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("HDRShipToName");
            entity.Property(e => e.HdrshipToState)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRShipToState");
            entity.Property(e => e.HdrshipToZip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("HDRShipToZip");
            entity.Property(e => e.HdrshipmentMethodOfPayment)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRShipmentMethodOfPayment");
            entity.Property(e => e.HdrshippedDate)
                .HasColumnType("datetime")
                .HasColumnName("HDRShippedDate");
            entity.Property(e => e.HdrsupplierAddr1)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierAddr1");
            entity.Property(e => e.HdrsupplierAddr2)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierAddr2");
            entity.Property(e => e.HdrsupplierAddr3)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierAddr3");
            entity.Property(e => e.HdrsupplierAddr4)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierAddr4");
            entity.Property(e => e.HdrsupplierCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierCD");
            entity.Property(e => e.HdrsupplierCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRSupplierCDQ");
            entity.Property(e => e.HdrsupplierCity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierCity");
            entity.Property(e => e.HdrsupplierCountry)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("HDRSupplierCountry");
            entity.Property(e => e.HdrsupplierName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierName");
            entity.Property(e => e.HdrsupplierState)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRSupplierState");
            entity.Property(e => e.HdrsupplierZip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("HDRSupplierZip");
            entity.Property(e => e.HdrtermNetDays).HasColumnName("HDRTermNetDays");
            entity.Property(e => e.HdrtermsBasisDateCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRTermsBasisDateCD");
            entity.Property(e => e.HdrtermsDescription)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("HDRTermsDescription");
            entity.Property(e => e.HdrtermsDiscountAmount).HasColumnName("HDRTermsDiscountAmount");
            entity.Property(e => e.HdrtermsDiscountDaysDue).HasColumnName("HDRTermsDiscountDaysDue");
            entity.Property(e => e.HdrtermsDiscountPct).HasColumnName("HDRTermsDiscountPct");
            entity.Property(e => e.HdrtermsTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRTermsTypeCD");
            entity.Property(e => e.Hdrweight).HasColumnName("HDRWeight");
            entity.Property(e => e.HdrweightUnitCode)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HDRWeightUnitCode");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Wm810soheader).HasColumnName("WM810SOHeader");
        });

        modelBuilder.Entity<Zmm810Itm>(entity =>
        {
            entity.HasKey(e => e.Itmid).HasName("PK_WM_810_ITM");

            entity.ToTable("ZMM_810_ITM");

            entity.Property(e => e.Itmid).HasColumnName("ITMID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.ItmEanUcc13)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITM_EAN_UCC13");
            entity.Property(e => e.ItmcountryOfOrigin)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMCountryOfOrigin");
            entity.Property(e => e.Itmdescription)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ITMDescription");
            entity.Property(e => e.Itmgtin)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMGTIN");
            entity.Property(e => e.ItminnerPack).HasColumnName("ITMInnerPack");
            entity.Property(e => e.ItminvoiceId).HasColumnName("ITMInvoiceID");
            entity.Property(e => e.ItmlotNumber)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMLotNumber");
            entity.Property(e => e.ItmmutuallyDefined)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMMutuallyDefined");
            entity.Property(e => e.Itmpack).HasColumnName("ITMPack");
            entity.Property(e => e.Itmquantity).HasColumnName("ITMQuantity");
            entity.Property(e => e.ItmsacId).HasColumnName("ITMSacID");
            entity.Property(e => e.Itmucc12)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMUCC12");
            entity.Property(e => e.Itmunit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ITMUnit");
            entity.Property(e => e.ItmunitPrice).HasColumnName("ITMUnitPrice");
            entity.Property(e => e.Itmupccode)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMUPCCode");
            entity.Property(e => e.ItmwalMartItemNumber)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("ITMWalMartItemNumber");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm810Sac>(entity =>
        {
            entity.HasKey(e => e.SacPk).HasName("PK_WM_810_SAC");

            entity.ToTable("ZMM_810_SAC");

            entity.Property(e => e.SacPk).HasColumnName("SAC_PK");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SacallowanceOrCharge)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SACAllowanceOrCharge");
            entity.Property(e => e.Sacamount).HasColumnName("SACAmount");
            entity.Property(e => e.Saccode)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SACCode");
            entity.Property(e => e.Sacdescription)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SACDescription");
            entity.Property(e => e.Sacid).HasColumnName("SACID");
            entity.Property(e => e.SacinvoiceId).HasColumnName("SACInvoiceID");
            entity.Property(e => e.SacinvoiceItmid).HasColumnName("SACInvoiceITMID");
            entity.Property(e => e.SaclanguageCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("SACLanguageCD");
            entity.Property(e => e.SacmethodOfHandling)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SACMethodOfHandling");
            entity.Property(e => e.SacoptionNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SACOptionNumber");
            entity.Property(e => e.Sacpercent).HasColumnName("SACPercent");
            entity.Property(e => e.SacpercentQ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SACPercentQ");
            entity.Property(e => e.Sacquantity).HasColumnName("SACQuantity");
            entity.Property(e => e.Sacrate).HasColumnName("SACRate");
            entity.Property(e => e.SacrefId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SACRefID");
            entity.Property(e => e.SacunitCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SACUnitCD");
        });

        modelBuilder.Entity<Zmm812Cdd>(entity =>
        {
            entity.ToTable("ZMM_812_CDD");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Cdd01ReasonCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CDD01_ReasonCD");
            entity.Property(e => e.Cdd02CrDebFlagCd)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("CDD02_CrDebFlagCD");
            entity.Property(e => e.Cdd03AssignedId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CDD03_AssignedID");
            entity.Property(e => e.Cdd04Amount).HasColumnName("CDD04_Amount");
            entity.Property(e => e.Cdd07CrDebQuantity).HasColumnName("CDD07_CrDebQuantity");
            entity.Property(e => e.Cdd08Uom)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CDD08_UOM");
            entity.Property(e => e.Cdd10PriceIdc)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CDD10_PriceIDC");
            entity.Property(e => e.Cdd11UnitPrice).HasColumnName("CDD11_UnitPrice");
            entity.Property(e => e.Cdd12PriceIdc)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CDD12_PriceIDC");
            entity.Property(e => e.Cdd13UnitPrice).HasColumnName("CDD13_UnitPrice");
            entity.Property(e => e.Cdd14Msg)
                .HasMaxLength(264)
                .IsUnicode(false)
                .HasColumnName("CDD14_Msg");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.Lin01AssignedId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LIN01_AssignedID");
            entity.Property(e => e.Lin02ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("LIN02_ProductIDQ");
            entity.Property(e => e.Lin03ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("LIN03_ProductID");
            entity.Property(e => e.Lin04ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("LIN04_ProductIDQ");
            entity.Property(e => e.Lin05ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("LIN05_ProductID");
            entity.Property(e => e.Lin06ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("LIN06_ProductIDQ");
            entity.Property(e => e.Lin07ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("LIN07_ProductID");
            entity.Property(e => e.Lin08ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("LIN08_ProductIDQ");
            entity.Property(e => e.Lin09ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("LIN09_ProductID");
            entity.Property(e => e.Lin10ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("LIN10_ProductIDQ");
            entity.Property(e => e.Lin11ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("LIN11_ProductID");
            entity.Property(e => e.ParentGroupId).HasColumnName("ParentGroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm812Hdr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ZMM_810_HDR");

            entity.ToTable("ZMM_812_HDR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Bcd01ClaimDate)
                .HasColumnType("datetime")
                .HasColumnName("BCD01_ClaimDate");
            entity.Property(e => e.Bcd02DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("BCD02_DocNumber");
            entity.Property(e => e.Bcd03TransactionCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("BCD03_TransactionCD");
            entity.Property(e => e.Bcd04Amount).HasColumnName("BCD04_Amount");
            entity.Property(e => e.Bcd05CrDebFlag)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("BCD05_CrDebFlag");
            entity.Property(e => e.Bcd06InvDate)
                .HasColumnType("datetime")
                .HasColumnName("BCD06_InvDate");
            entity.Property(e => e.Bcd07InvNumber)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("BCD07_InvNumber");
            entity.Property(e => e.Bcd09Podate)
                .HasColumnType("datetime")
                .HasColumnName("BCD09_PODate");
            entity.Property(e => e.Bcd10Po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("BCD10_PO");
            entity.Property(e => e.Bcd11PurposeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BCD11_PurposeCD");
            entity.Property(e => e.Bcd12TransactionTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BCD12_TransactionTypeCD");
            entity.Property(e => e.Bcd13RefIdq)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BCD13_RefIDQ");
            entity.Property(e => e.Bcd14RefId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BCD14_RefID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Cur02CurrCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CUR02_CurrCD");
            entity.Property(e => e.Fob01MethodOfPayment)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("FOB01_MethodOfPayment");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm812Itd>(entity =>
        {
            entity.ToTable("ZMM_812_ITD");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Idt02TermsBasisDateCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("IDT02_TermsBasisDateCD");
            entity.Property(e => e.Itd01TermsTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ITD01_TermsTypeCD");
            entity.Property(e => e.Itd03TermsDoscountPct).HasColumnName("ITD03_TermsDoscountPct");
            entity.Property(e => e.Itd05TermsDiscountDaysDue).HasColumnName("ITD05_TermsDiscountDaysDue");
            entity.Property(e => e.Itd07TermsNetDays).HasColumnName("ITD07_TermsNetDays");
            entity.Property(e => e.ParentGroupId).HasColumnName("ParentGroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm812N1>(entity =>
        {
            entity.ToTable("ZMM_812_N1");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.N101EntityIdc)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("N101_EntityIDC");
            entity.Property(e => e.N102Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N102_Name");
            entity.Property(e => e.N103IdentificationCdq)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("N103_IdentificationCDQ");
            entity.Property(e => e.N104IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N104_IdentificationCD");
            entity.Property(e => e.N3011Addr)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_1_Addr");
            entity.Property(e => e.N3012Addr)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_2_Addr");
            entity.Property(e => e.N3021Addr)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_1_Addr");
            entity.Property(e => e.N3022Addr)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_2_Addr");
            entity.Property(e => e.N401City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City");
            entity.Property(e => e.N402State)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_State");
            entity.Property(e => e.N403Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("N403_Zip");
            entity.Property(e => e.N404Country)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("N404_Country");
            entity.Property(e => e.ParentGroupId).HasColumnName("ParentGroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm812N9>(entity =>
        {
            entity.ToTable("ZMM_812_N9");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.N901RefIdq)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("N901_RefIDQ");
            entity.Property(e => e.N902RefId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N902_RefID");
            entity.Property(e => e.ParentGroupId).HasColumnName("ParentGroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm812Per>(entity =>
        {
            entity.ToTable("ZMM_812_PER");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ParentGroupId).HasColumnName("ParentGroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Per01ContactFcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFCD");
            entity.Property(e => e.Per02Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name");
            entity.Property(e => e.Per03CommNumberQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER03_CommNumberQ");
            entity.Property(e => e.Per04CommNumber)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("PER04_CommNumber");
        });

        modelBuilder.Entity<Zmm812Sac>(entity =>
        {
            entity.ToTable("ZMM_812_SAC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DocNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.ParentGroupId).HasColumnName("ParentGroupID");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Sac01AllowanceOrCharge)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC01_AllowanceOrCharge");
            entity.Property(e => e.Sac02ServiceCd)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SAC02_ServiceCD");
            entity.Property(e => e.Sac05Amount).HasColumnName("SAC05_Amount");
            entity.Property(e => e.Sac06PctQ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC06_PctQ");
            entity.Property(e => e.Sac07Pct).HasColumnName("SAC07_Pct");
            entity.Property(e => e.Sac08Rate).HasColumnName("SAC08_Rate");
            entity.Property(e => e.Sac09Uom)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC09_UOM");
            entity.Property(e => e.Sac10Quantity).HasColumnName("SAC10_Quantity");
        });

        modelBuilder.Entity<Zmm816>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_816");

            entity.ToTable("ZMM_816");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Asi01ActionCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ASI01_ActionCD");
            entity.Property(e => e.Asi02MaintenanceCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("ASI02_MaintenanceCD");
            entity.Property(e => e.Asi03StatusCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("ASI03_StatusCD");
            entity.Property(e => e.Bht01StructureCd)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("BHT01_StructureCD");
            entity.Property(e => e.Bht02PurposeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BHT02_PurposeCD");
            entity.Property(e => e.Bht03RefInfo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BHT03_RefInfo");
            entity.Property(e => e.Bht04Date)
                .HasColumnType("datetime")
                .HasColumnName("BHT04_Date");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Dtm02EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_EffectiveDate");
            entity.Property(e => e.Hl01Id)
                .HasMaxLength(12)
                .IsFixedLength()
                .HasColumnName("HL01_ID");
            entity.Property(e => e.Hl02ParentId)
                .HasMaxLength(12)
                .IsFixedLength()
                .HasColumnName("HL02_ParentID");
            entity.Property(e => e.Hl03LevelCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("HL03_LevelCD");
            entity.Property(e => e.N101EntityIdCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N101_EntityIdCD");
            entity.Property(e => e.N102HdrFrom)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N102_HDR_From");
            entity.Property(e => e.N102Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N102_Name");
            entity.Property(e => e.N103IdCdQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N103_IdCdQ");
            entity.Property(e => e.N104IdCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N104_IdCD");
            entity.Property(e => e.N301Address1)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_Address_1");
            entity.Property(e => e.N301Address2)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_Address_2");
            entity.Property(e => e.N302Address1)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_Address_1");
            entity.Property(e => e.N302Address2)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_Address_2");
            entity.Property(e => e.N401City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City");
            entity.Property(e => e.N402State)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_State");
            entity.Property(e => e.N403Zip)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("N403_Zip");
            entity.Property(e => e.N404Country)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_Country");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Per02ContactName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_ContactName");
            entity.Property(e => e.Per04ContactPhone)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("PER04_ContactPhone");
            entity.Property(e => e.Processed).HasColumnType("datetime");
            entity.Property(e => e.Ref02Dc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REF02_DC");
            entity.Property(e => e.Ref02Duns)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REF02_DUNS");
            entity.Property(e => e.Ref02Store)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REF02_Store");
        });

        modelBuilder.Entity<Zmm820Adx>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_820_ADX");

            entity.ToTable("ZMM_820_ADX");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Adx01Amount).HasColumnName("ADX01_Amount");
            entity.Property(e => e.Adx02ReasonCd)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("ADX02_ReasonCD");
            entity.Property(e => e.Adx03RefIdq)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ADX03_RefIDQ");
            entity.Property(e => e.Adx04RefId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ADX04_RefID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EntNo).HasColumnName("ENT_NO");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.TraceId)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TraceID");
        });

        modelBuilder.Entity<Zmm820AdxReason>(entity =>
        {
            entity.ToTable("ZMM_820_ADX_REASON");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReasonCode)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm820Dtm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_820_RMR_DTM");

            entity.ToTable("ZMM_820_DTM");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Dtm01DateQ)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("DTM01_DateQ");
            entity.Property(e => e.Dtm02Date)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_Date");
            entity.Property(e => e.EntNo).HasColumnName("ENT_NO");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.TraceId)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TraceID");
        });

        modelBuilder.Entity<Zmm820Hdr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_820_HDR");

            entity.ToTable("ZMM_820_HDR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Brp01Transactioncode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("BRP01_Transactioncode");
            entity.Property(e => e.Brp02Total).HasColumnName("BRP02_Total");
            entity.Property(e => e.Brp03Cd)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("BRP03_CD");
            entity.Property(e => e.Brp04Payment)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRP04_Payment");
            entity.Property(e => e.Brp16Date)
                .HasColumnType("datetime")
                .HasColumnName("BRP16_Date");
            entity.Property(e => e.Brp17BusinessCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BRP17_BusinessCode");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Cur02Currency)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CUR02_Currency");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Trn01TraceType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("TRN01_TraceType");
            entity.Property(e => e.Trn02TraceId)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TRN02_TraceID");
        });

        modelBuilder.Entity<Zmm820N1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_820_N1");

            entity.ToTable("ZMM_820_N1");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.N101EntityId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("N101_EntityID");
            entity.Property(e => e.N102Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N102_Name");
            entity.Property(e => e.N103Idq)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("N103_IDQ");
            entity.Property(e => e.N104Id)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N104_ID");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.TraceId)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TraceID");
        });

        modelBuilder.Entity<Zmm820Ref>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_820_RMR_REF");

            entity.ToTable("ZMM_820_REF");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EntNo).HasColumnName("ENT_NO");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.Rmrref01Idq)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RMRREF01_IDQ");
            entity.Property(e => e.Rmrref02Id)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RMRREF02_ID");
            entity.Property(e => e.TraceId)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TraceID");
        });

        modelBuilder.Entity<Zmm820Ref6o>(entity =>
        {
            entity.ToTable("ZMM_820_REF_6O");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.RefId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RefID");
            entity.Property(e => e.RefIdq)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RefIDQ");
        });

        modelBuilder.Entity<Zmm820Rmr>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_820_RMR");

            entity.ToTable("ZMM_820_RMR");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.EntNo).HasColumnName("ENT_NO");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RecId).HasColumnName("RecID");
            entity.Property(e => e.Rmr01Idq)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RMR01_IDQ");
            entity.Property(e => e.Rmr02Id)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RMR02_ID");
            entity.Property(e => e.Rmr03ActionCd)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("RMR03_ActionCD");
            entity.Property(e => e.Rmr04NetAmount).HasColumnName("RMR04_NetAmount");
            entity.Property(e => e.Rmr05Amount).HasColumnName("RMR05_Amount");
            entity.Property(e => e.TraceId)
                .IsRequired()
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TraceID");
        });

        modelBuilder.Entity<Zmm850Fob>(entity =>
        {
            entity.HasKey(e => e.FobId).HasName("PK_WM_850_FOB");

            entity.ToTable("ZMM_850_FOB");

            entity.Property(e => e.FobId).HasColumnName("FobID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Fob01MethodOfPayment)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("FOB01_MethodOfPayment");
            entity.Property(e => e.Fob02LocationQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("FOB02_LocationQ");
            entity.Property(e => e.Fob03Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FOB03_Description");
            entity.Property(e => e.FobPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.FobPoDate).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm850Hdr>(entity =>
        {
            entity.HasKey(e => e.HdrPk).HasName("PK_WM_850_HDR_1");

            entity.ToTable("ZMM_850_HDR");

            entity.Property(e => e.HdrPk).HasColumnName("HDR_PK");
            entity.Property(e => e.Amt01AmountQcd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("AMT01_AmountQCD");
            entity.Property(e => e.Amt02Amount).HasColumnName("AMT02_Amount");
            entity.Property(e => e.Beg01HdrPoPurposeCode)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BEG01_HdrPoPurposeCode");
            entity.Property(e => e.Beg02HdrPoTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BEG02_HdrPoTypeCD");
            entity.Property(e => e.Beg03PoNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("BEG03_PoNumber");
            entity.Property(e => e.Beg04ReleaseNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BEG04_ReleaseNumber");
            entity.Property(e => e.Beg05HdrPoDate)
                .HasColumnType("datetime")
                .HasColumnName("BEG05_HdrPoDate");
            entity.Property(e => e.Beg06ContractNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BEG06_ContractNumber");
            entity.Property(e => e.Comment)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Csh01SalesReqCd1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD1");
            entity.Property(e => e.Csh01SalesReqCd2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD2");
            entity.Property(e => e.Csh01SalesReqCd3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD3");
            entity.Property(e => e.Csh01SalesReqCd4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD4");
            entity.Property(e => e.Csh01SalesReqCd5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD5");
            entity.Property(e => e.Ctt01NumberOfLineItems).HasColumnName("CTT01_NumberOfLineItems");
            entity.Property(e => e.Ctt02HashTotal).HasColumnName("CTT02_HashTotal");
            entity.Property(e => e.Cur01EntityCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CUR01_EntityCD");
            entity.Property(e => e.Cur02CurrencyCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CUR02_CurrencyCD");
            entity.Property(e => e.Dtm02CancelAfter)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_CancelAfter");
            entity.Property(e => e.Dtm02DeliveryRequested)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_DeliveryRequested");
            entity.Property(e => e.Dtm02DoNotDeliverAfter)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_DoNotDeliverAfter");
            entity.Property(e => e.Dtm02DoNotDeliverBefore)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_DoNotDeliverBefore");
            entity.Property(e => e.Dtm02EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_EffectiveDate");
            entity.Property(e => e.Dtm02PromisedForDelivery)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_PromisedForDelivery");
            entity.Property(e => e.Dtm02PromotionStart)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_PromotionStart");
            entity.Property(e => e.Dtm02RequestedPickup)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_RequestedPickup");
            entity.Property(e => e.Dtm02RequestedShip)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_RequestedShip");
            entity.Property(e => e.Dtm02ShipNoLater)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_ShipNoLater");
            entity.Property(e => e.Dtm02ShipNotBefore)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_ShipNotBefore");
            entity.Property(e => e.Dtm03CancelAfter)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_CancelAfter");
            entity.Property(e => e.Dtm03DeliveryRequested)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_DeliveryRequested");
            entity.Property(e => e.Dtm03DoNotDeliverAfter)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_DoNotDeliverAfter");
            entity.Property(e => e.Dtm03DoNotDeliverBefore)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_DoNotDeliverBefore");
            entity.Property(e => e.Dtm03EffectiveDate)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_EffectiveDate");
            entity.Property(e => e.Dtm03PromisedForDelivery)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_PromisedForDelivery");
            entity.Property(e => e.Dtm03PromotionStart)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_PromotionStart");
            entity.Property(e => e.Dtm03RequestedPickup)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_RequestedPickup");
            entity.Property(e => e.Dtm03RequestedShip)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_RequestedShip");
            entity.Property(e => e.Dtm03ShipNoLater)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_ShipNoLater");
            entity.Property(e => e.Dtm03ShipNotBefore)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_ShipNotBefore");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Hdr850Processed)
                .HasColumnType("datetime")
                .HasColumnName("HDR_850_Processed");
            entity.Property(e => e.NotificationSent).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm850Itd>(entity =>
        {
            entity.HasKey(e => e.ItdId).HasName("PK_WM_850_ITD");

            entity.ToTable("ZMM_850_ITD");

            entity.Property(e => e.ItdId).HasColumnName("ItdID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Itd01TermsTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ITD01_TermsTypeCD");
            entity.Property(e => e.Itd02TermsBasisDateCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ITD02_TermsBasisDateCD");
            entity.Property(e => e.Itd03TermsDiscountPct).HasColumnName("ITD03_TermsDiscountPct");
            entity.Property(e => e.Itd04DiscountDiscountDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ITD04_DiscountDiscountDueDate");
            entity.Property(e => e.Itd05TermsDiscountDaysDue).HasColumnName("ITD05_TermsDiscountDaysDue");
            entity.Property(e => e.Itd06TermsNetDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ITD06_TermsNetDueDate");
            entity.Property(e => e.Itd07TermsNetDays).HasColumnName("ITD07_TermsNetDays");
            entity.Property(e => e.Itd08TermsDiscountAmount).HasColumnName("ITD08_TermsDiscountAmount");
            entity.Property(e => e.Itd09TermsDeferedDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ITD09_TermsDeferedDueDate");
            entity.Property(e => e.Itd10DeferedAmt).HasColumnName("ITD10_DeferedAmt");
            entity.Property(e => e.Itd11PctInvPayable).HasColumnName("ITD11_PctInvPayable");
            entity.Property(e => e.Itd12Description)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ITD12_Description");
            entity.Property(e => e.Itd13DayOfMonth).HasColumnName("ITD13_DayOfMonth");
            entity.Property(e => e.ItdPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ItdPoDate).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm850N1>(entity =>
        {
            entity.HasKey(e => e.N1id).HasName("PK_WM_850_N1");

            entity.ToTable("ZMM_850_N1");

            entity.HasIndex(e => e.N1po, "IX1WM_850_N1");

            entity.Property(e => e.N1id).HasColumnName("N1ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.N101EntityIdentifierCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N101_EntityIdentifierCD");
            entity.Property(e => e.N102Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N102_Name");
            entity.Property(e => e.N103IdentificationCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N103_IdentificationCDQ");
            entity.Property(e => e.N104IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N104_IdentificationCD");
            entity.Property(e => e.N1po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("N1Po");
            entity.Property(e => e.N1poDate)
                .HasColumnType("datetime")
                .HasColumnName("N1PoDate");
            entity.Property(e => e.N201Name1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N201_Name1");
            entity.Property(e => e.N201Name2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N201_Name2");
            entity.Property(e => e.N301Address01)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_Address_01");
            entity.Property(e => e.N301Address02)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_Address_02");
            entity.Property(e => e.N302Address01)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_Address_01");
            entity.Property(e => e.N302Address02)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_Address_02");
            entity.Property(e => e.N401City1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City_1");
            entity.Property(e => e.N401City2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City_2");
            entity.Property(e => e.N401City3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City_3");
            entity.Property(e => e.N402StateCd1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_StateCD_1");
            entity.Property(e => e.N402StateCd2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_StateCD_2");
            entity.Property(e => e.N402StateCd3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_StateCD_3");
            entity.Property(e => e.N403PostalCd1)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("N403_PostalCD_1");
            entity.Property(e => e.N403PostalCd2)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("N403_PostalCD_2");
            entity.Property(e => e.N403PostalCd3)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("N403_PostalCD_3");
            entity.Property(e => e.N404CountryCd1)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_CountryCD_1");
            entity.Property(e => e.N404CountryCd2)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_CountryCD_2");
            entity.Property(e => e.N404CountryCd3)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_CountryCD_3");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Per01ContactFunctioCd1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_1");
            entity.Property(e => e.Per01ContactFunctioCd2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_2");
            entity.Property(e => e.Per01ContactFunctioCd3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_3");
            entity.Property(e => e.Per01ContactFunctioCd4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_4");
            entity.Property(e => e.Per01ContactFunctioCd5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_5");
            entity.Property(e => e.Per02Name1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_1");
            entity.Property(e => e.Per02Name2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_2");
            entity.Property(e => e.Per02Name3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_3");
            entity.Property(e => e.Per02Name4)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_4");
            entity.Property(e => e.Per02Name5)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_5");
        });

        modelBuilder.Entity<Zmm850N9>(entity =>
        {
            entity.HasKey(e => e.N9id).HasName("PK_WM_850_N9");

            entity.ToTable("ZMM_850_N9");

            entity.Property(e => e.N9id).HasColumnName("N9ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Mtx02Text)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("MTX02_Text");
            entity.Property(e => e.N092ReferenceIdentification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N092_ReferenceIdentification");
            entity.Property(e => e.N901ReferenceIdentificationQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N901_ReferenceIdentificationQ");
            entity.Property(e => e.N9po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("N9Po");
            entity.Property(e => e.N9poDate)
                .HasColumnType("datetime")
                .HasColumnName("N9PoDate");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm850Per>(entity =>
        {
            entity.HasKey(e => e.PerId);

            entity.ToTable("ZMM_850_PER");

            entity.Property(e => e.PerId).HasColumnName("PerID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Per01ContactCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PER01_ContactCD");
            entity.Property(e => e.Per02Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name");
            entity.Property(e => e.Per03CommNumberQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER03_CommNumberQ");
            entity.Property(e => e.Per04CommNumber)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PER04_CommNumber");
            entity.Property(e => e.PerPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.PerPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm850Pid>(entity =>
        {
            entity.HasKey(e => e.PidId).HasName("PK_WM_850_PID");

            entity.ToTable("ZMM_850_PID");

            entity.Property(e => e.PidId).HasColumnName("PidID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid01ItemDescriptionType)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PID01_ItemDescriptionType");
            entity.Property(e => e.Pid02ProductCharacteristicCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PID02_ProductCharacteristicCD");
            entity.Property(e => e.Pid03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID03_AgencyQCD");
            entity.Property(e => e.Pid04ProductDescriptionCd)
                .HasMaxLength(12)
                .IsFixedLength()
                .HasColumnName("PID04_ProductDescriptionCD");
            entity.Property(e => e.PidPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.PidPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm850Po1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_850_PO1");

            entity.ToTable("ZMM_850_PO1");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Amt01AmountQcd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("AMT01_AmountQCD");
            entity.Property(e => e.Amt02Amount).HasColumnName("AMT02_Amount");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Po101AssignedIdentification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PO101_AssignedIdentification");
            entity.Property(e => e.Po102Qty).HasColumnName("PO102_Qty");
            entity.Property(e => e.Po103Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO103_Unit");
            entity.Property(e => e.Po104UnitPrice).HasColumnName("PO104_UnitPrice");
            entity.Property(e => e.Po105UnitPriceCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO105_UnitPriceCD");
            entity.Property(e => e.Po106ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO106_ProductIDQ");
            entity.Property(e => e.Po107ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO107_ProductID");
            entity.Property(e => e.Po108ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO108_ProductIDQ");
            entity.Property(e => e.Po109ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO109_ProductID");
            entity.Property(e => e.Po110ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO110_ProductIDQ");
            entity.Property(e => e.Po111ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO111_ProductID");
            entity.Property(e => e.Po112ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO112_ProductIDQ");
            entity.Property(e => e.Po113ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO113_ProductID");
            entity.Property(e => e.Po114ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO114_ProductIDQ");
            entity.Property(e => e.Po115ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO115_ProductID");
            entity.Property(e => e.Po116ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO116_ProductIDQ");
            entity.Property(e => e.Po117ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO117_ProductID");
            entity.Property(e => e.Po118ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO118_ProductIDQ");
            entity.Property(e => e.Po119ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO119_ProductID");
            entity.Property(e => e.Po120ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO120_ProductIDQ");
            entity.Property(e => e.Po121ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO121_ProductID");
            entity.Property(e => e.Po122ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO122_ProductIDQ");
            entity.Property(e => e.Po123ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO123_ProductID");
            entity.Property(e => e.Po124ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO124_ProductIDQ");
            entity.Property(e => e.Po125ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("PO125_ProductID");
            entity.Property(e => e.Po1po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PO1Po");
            entity.Property(e => e.Po1poDate)
                .HasColumnType("datetime")
                .HasColumnName("PO1PoDate");
            entity.Property(e => e.Po401Pack1).HasColumnName("PO401_Pack1");
            entity.Property(e => e.Po401Pack2).HasColumnName("PO401_Pack2");
            entity.Property(e => e.Po401Pack3).HasColumnName("PO401_Pack3");
            entity.Property(e => e.Po401Pack4).HasColumnName("PO401_Pack4");
            entity.Property(e => e.Po401Pack5).HasColumnName("PO401_Pack5");
            entity.Property(e => e.Po414InnerPack1).HasColumnName("PO414_InnerPack1");
            entity.Property(e => e.Po414InnerPack2).HasColumnName("PO414_InnerPack2");
            entity.Property(e => e.Po414InnerPack3).HasColumnName("PO414_InnerPack3");
            entity.Property(e => e.Po414InnerPack4).HasColumnName("PO414_InnerPack4");
            entity.Property(e => e.Po414InnerPack5).HasColumnName("PO414_InnerPack5");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm850Po1Ctp>(entity =>
        {
            entity.ToTable("ZMM_850_PO1_CTP");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Ctp01ClassOfTradeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CTP01_ClassOfTradeCD");
            entity.Property(e => e.Ctp02PriceIdc)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CTP02_PriceIDC");
            entity.Property(e => e.Ctp03UnitPrice).HasColumnName("CTP03_UnitPrice");
            entity.Property(e => e.Ctp04Qty).HasColumnName("CTP04_Qty");
            entity.Property(e => e.Ctp06PriceMultiplierQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CTP06_PriceMultiplierQ");
            entity.Property(e => e.Ctp07Multiplier).HasColumnName("CTP07_Multiplier");
            entity.Property(e => e.Ctp08Amt).HasColumnName("CTP08_Amt");
            entity.Property(e => e.Ctp09UnitPriceCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CTP09_UnitPriceCD");
            entity.Property(e => e.Ctp10ConditionValue)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CTP10_ConditionValue");
            entity.Property(e => e.Ctp11MultiplePriceQty).HasColumnName("CTP11_MultiplePriceQty");
            entity.Property(e => e.Ctpc001Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CTPC001_UOMCD");
            entity.Property(e => e.Ctppo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("CTPPo");
            entity.Property(e => e.CtppoDate)
                .HasColumnType("datetime")
                .HasColumnName("CTPPoDate");
            entity.Property(e => e.CtppoitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTPPOItemLineNumber");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm850Po1N9>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_850_PO1_N9");

            entity.ToTable("ZMM_850_PO1_N9");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Mtx02Text)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("MTX02_Text");
            entity.Property(e => e.N092ReferenceIdentification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N092_ReferenceIdentification");
            entity.Property(e => e.N901ReferenceIdentificationQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N901_ReferenceIdentificationQ");
            entity.Property(e => e.N9po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("N9Po");
            entity.Property(e => e.N9poDate)
                .HasColumnType("datetime")
                .HasColumnName("N9PoDate");
            entity.Property(e => e.N9poitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("N9POItemLineNumber");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm850Po1Pid>(entity =>
        {
            entity.ToTable("ZMM_850_PO1_PID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid01ItemDescrType)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID01_ItemDescrType");
            entity.Property(e => e.Pid02CharacteristicCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PID02_CharacteristicCD");
            entity.Property(e => e.Pid03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID03_AgencyQCD");
            entity.Property(e => e.Pid04ProdDescrCd)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PID04_ProdDescrCD");
            entity.Property(e => e.Pid05Descr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PID05_Descr");
            entity.Property(e => e.Pidpo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PIDPo");
            entity.Property(e => e.PidpoDate)
                .HasColumnType("datetime")
                .HasColumnName("PIDPoDate");
            entity.Property(e => e.PidpoitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PIDPOItemLineNumber");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm850Po1Po4>(entity =>
        {
            entity.ToTable("ZMM_850_PO1_PO4");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Po401Pack).HasColumnName("PO401_Pack");
            entity.Property(e => e.Po402Size).HasColumnName("PO402_Size");
            entity.Property(e => e.Po403Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO403_UOMCD");
            entity.Property(e => e.Po404PkgCd)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PO404_PkgCD");
            entity.Property(e => e.Po405WeightQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO405_WeightQ");
            entity.Property(e => e.Po406GrossWeightPerPack).HasColumnName("PO406_GrossWeightPerPack");
            entity.Property(e => e.Po407Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO407_UOMCD");
            entity.Property(e => e.Po408GrossVolumePerPack).HasColumnName("PO408_GrossVolumePerPack");
            entity.Property(e => e.Po409Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO409_UOMCD");
            entity.Property(e => e.Po410Length).HasColumnName("PO410_Length");
            entity.Property(e => e.Po411Width).HasColumnName("PO411_Width");
            entity.Property(e => e.Po412Height).HasColumnName("PO412_Height");
            entity.Property(e => e.Po413Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO413_UOMCD");
            entity.Property(e => e.Po414InnerPack).HasColumnName("PO414_InnerPack");
            entity.Property(e => e.Po4po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PO4Po");
            entity.Property(e => e.Po4poDate)
                .HasColumnType("datetime")
                .HasColumnName("PO4PoDate");
            entity.Property(e => e.Po4poitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PO4POItemLineNumber");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm850Po1Sac>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_850_PO1_SAC");

            entity.ToTable("ZMM_850_PO1_SAC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.Sac01SacIndicator)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC01_SacIndicator");
            entity.Property(e => e.Sac02SacCd)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SAC02_SacCD");
            entity.Property(e => e.Sac03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC03_AgencyQCD");
            entity.Property(e => e.Sac04AgencyPromotionCd)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SAC04_AgencyPromotionCD");
            entity.Property(e => e.Sac05Amount).HasColumnName("SAC05_Amount");
            entity.Property(e => e.Sac06PercentQ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC06_PercentQ");
            entity.Property(e => e.Sac07Percent).HasColumnName("SAC07_Percent");
            entity.Property(e => e.Sac08Rate).HasColumnName("SAC08_Rate");
            entity.Property(e => e.Sac09Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC09_Unit");
            entity.Property(e => e.Sac10Qty).HasColumnName("SAC10_Qty");
            entity.Property(e => e.Sac11Qty).HasColumnName("SAC11_Qty");
            entity.Property(e => e.Sac12SacMethodOfHandlingCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC12_SacMethodOfHandlingCD");
            entity.Property(e => e.Sac13ReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SAC13_ReferenceID");
            entity.Property(e => e.SacItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SacPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SacPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm850Po1Sdq>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_850_PO1_SDQ");

            entity.ToTable("ZMM_850_PO1_SDQ");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.Sdq01Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SDQ01_Unit");
            entity.Property(e => e.Sdq02IdentificationCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SDQ02_IdentificationCDQ");
            entity.Property(e => e.Sdq03IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ03_IdentificationCD");
            entity.Property(e => e.Sdq04Qty).HasColumnName("SDQ04_Qty");
            entity.Property(e => e.Sdq05IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ05_IdentificationCD");
            entity.Property(e => e.Sdq06Qty).HasColumnName("SDQ06_Qty");
            entity.Property(e => e.Sdq07IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ07_IdentificationCD");
            entity.Property(e => e.Sdq08Qty).HasColumnName("SDQ08_Qty");
            entity.Property(e => e.Sdq09IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ09_IdentificationCD");
            entity.Property(e => e.Sdq10Qty).HasColumnName("SDQ10_Qty");
            entity.Property(e => e.Sdq11IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ11_IdentificationCD");
            entity.Property(e => e.Sdq12Qty).HasColumnName("SDQ12_Qty");
            entity.Property(e => e.Sdq13IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ13_IdentificationCD");
            entity.Property(e => e.Sdq14Qty).HasColumnName("SDQ14_Qty");
            entity.Property(e => e.Sdq15IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ15_IdentificationCD");
            entity.Property(e => e.Sdq16Qty).HasColumnName("SDQ16_Qty");
            entity.Property(e => e.Sdq17IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ17_IdentificationCD");
            entity.Property(e => e.Sdq18Qty).HasColumnName("SDQ18_Qty");
            entity.Property(e => e.Sdq19IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ19_IdentificationCD");
            entity.Property(e => e.Sdq20Qty).HasColumnName("SDQ20_Qty");
            entity.Property(e => e.Sdq21IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ21_IdentificationCD");
            entity.Property(e => e.Sdq22Qty).HasColumnName("SDQ22_Qty");
            entity.Property(e => e.SdqPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SdqPoDate).HasColumnType("datetime");
            entity.Property(e => e.SdqPoItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm850Po1Sln>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_WM_850_PO1_SLN");

            entity.ToTable("ZMM_850_PO1_SLN");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.C00101UnitCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("C00101_UnitCD");
            entity.Property(e => e.C00102Exponent).HasColumnName("C00102_Exponent");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid01ItemDescrType)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID01_ItemDescrType");
            entity.Property(e => e.Pid02CharacteristicCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PID02_CharacteristicCD");
            entity.Property(e => e.Pid03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID03_AgencyQCD");
            entity.Property(e => e.Pid04ProdDescrCd)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PID04_ProdDescrCD");
            entity.Property(e => e.Pid05Descr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PID05_Descr");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.Sln01Identification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SLN01_Identification");
            entity.Property(e => e.Sln02Identification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SLN02_Identification");
            entity.Property(e => e.Sln03RelationshipCd)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SLN03_RelationshipCD");
            entity.Property(e => e.Sln04Qty).HasColumnName("SLN04_Qty");
            entity.Property(e => e.Sln05Unit)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SLN05_Unit");
            entity.Property(e => e.Sln06UnitPrice).HasColumnName("SLN06_UnitPrice");
            entity.Property(e => e.Sln07UnitPriceCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN07_UnitPriceCD");
            entity.Property(e => e.Sln08RelationshipCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN08_RelationshipCD");
            entity.Property(e => e.Sln09ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN09_ProductIDQ");
            entity.Property(e => e.Sln10ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN10_ProductID");
            entity.Property(e => e.Sln11ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN11_ProductIDQ");
            entity.Property(e => e.Sln12ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN12_ProductID");
            entity.Property(e => e.Sln13ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN13_ProductIDQ");
            entity.Property(e => e.Sln14ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN14_ProductID");
            entity.Property(e => e.Sln15ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN15_ProductIDQ");
            entity.Property(e => e.Sln16ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN16_ProductID");
            entity.Property(e => e.Sln17ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN17_ProductIDQ");
            entity.Property(e => e.Sln18ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN18_ProductID");
            entity.Property(e => e.Sln19ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN19_ProductIDQ");
            entity.Property(e => e.Sln20ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN20_ProductID");
            entity.Property(e => e.Sln21ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN21_ProductIDQ");
            entity.Property(e => e.Sln22ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN22_ProductID");
            entity.Property(e => e.Sln23ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN23_ProductIDQ");
            entity.Property(e => e.Sln24ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN24_ProductID");
            entity.Property(e => e.Sln25ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN25_ProductIDQ");
            entity.Property(e => e.Sln26ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN26_ProductID");
            entity.Property(e => e.Sln27ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN27_ProductIDQ");
            entity.Property(e => e.Sln28ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN28_ProductID");
            entity.Property(e => e.SlnPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SlnPoDate).HasColumnType("datetime");
            entity.Property(e => e.SlnPoItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SlnRowId).HasColumnName("SlnRowID");
        });

        modelBuilder.Entity<Zmm850Po1SlnPid>(entity =>
        {
            entity.ToTable("ZMM_850_PO1_SLN_PID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid01ItedDescrType)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID01_ItedDescrType");
            entity.Property(e => e.Pid02CharacteristicCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PID02_CharacteristicCD");
            entity.Property(e => e.Pid03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID03_AgencyQCD");
            entity.Property(e => e.Pid04ProductDescrCd)
                .HasMaxLength(12)
                .IsFixedLength()
                .HasColumnName("PID04_ProductDescrCD");
            entity.Property(e => e.Pid05Descr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PID05_Descr");
            entity.Property(e => e.PidPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.PidPoDate).HasColumnType("datetime");
            entity.Property(e => e.PidPoItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.SlnRowId).HasColumnName("SlnRowID");
        });

        modelBuilder.Entity<Zmm850Ref>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_WM_850_REF");

            entity.ToTable("ZMM_850_REF");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Ref01ReferenceIdentificationQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("REF01_ReferenceIdentificationQ");
            entity.Property(e => e.Ref02ReferenceIdentification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REF02_ReferenceIdentification");
            entity.Property(e => e.Ref03Description)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("REF03_Description");
            entity.Property(e => e.RefPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.RefPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm850Sac>(entity =>
        {
            entity.HasKey(e => e.SacId).HasName("PK_WM_850_SAC");

            entity.ToTable("ZMM_850_SAC");

            entity.Property(e => e.SacId).HasColumnName("SacID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Sac01AllowanceOrCharge)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC01_AllowanceOrCharge");
            entity.Property(e => e.Sac02SacCd)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SAC02_SacCD");
            entity.Property(e => e.Sac03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC03_AgencyQCD");
            entity.Property(e => e.Sac04AgencyServProm)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SAC04_AgencyServProm");
            entity.Property(e => e.Sac05Amount).HasColumnName("SAC05_Amount");
            entity.Property(e => e.Sac06PercentQ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC06_PercentQ");
            entity.Property(e => e.Sac07Percent).HasColumnName("SAC07_Percent");
            entity.Property(e => e.Sac08Rate).HasColumnName("SAC08_Rate");
            entity.Property(e => e.Sac09Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC09_Unit");
            entity.Property(e => e.Sac10Quantity).HasColumnName("SAC10_Quantity");
            entity.Property(e => e.Sac12SacMethodOfHandlingCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC12_SacMethodOfHandlingCD");
            entity.Property(e => e.SacPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SacPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm850Td5>(entity =>
        {
            entity.HasKey(e => e.Td5Id).HasName("PK_WM_850_TD5");

            entity.ToTable("ZMM_850_TD5");

            entity.Property(e => e.Td5Id).HasColumnName("Td5ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Td501RoutingSeqCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TD501_RoutingSeqCD");
            entity.Property(e => e.Td502IdentificationCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TD502_IdentificationCDQ");
            entity.Property(e => e.Td503IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TD503_IdentificationCD");
            entity.Property(e => e.Td504TransportationTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TD504_TransportationTypeCD");
            entity.Property(e => e.Td505Routing)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("TD505_Routing");
            entity.Property(e => e.Td5Po)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Td5PoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm856Hdr>(entity =>
        {
            entity.HasKey(e => e.HdrPk).HasName("PK_ZMM_856_HDR_1");

            entity.ToTable("ZMM_856_HDR", tb =>
                {
                    tb.HasTrigger("Add856Flag");
                    tb.HasTrigger("Del856Flag");
                });

            entity.Property(e => e.HdrPk).HasColumnName("HDR_PK");
            entity.Property(e => e.Bsn02ControlNumber).HasColumnName("BSN02_ControlNumber");
            entity.Property(e => e.Bsn03Date)
                .HasColumnType("datetime")
                .HasColumnName("BSN03_Date");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Ctt01NumberOfLineItems).HasColumnName("CTT01_NumberOfLineItems");
            entity.Property(e => e.Dtm01Shipped)
                .HasColumnType("datetime")
                .HasColumnName("DTM01_Shipped");
            entity.Property(e => e.N102ShipFromName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N102_ShipFromName");
            entity.Property(e => e.N104BuyerCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N104_BuyerCode");
            entity.Property(e => e.N401City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City");
            entity.Property(e => e.N402State)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N402_State");
            entity.Property(e => e.N403Zip)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N403_Zip");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pid04Descr)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PID04_Descr");
            entity.Property(e => e.Prf01Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRF01_PONumber");
            entity.Property(e => e.Ref01Rfq)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("REF01_RFQ");
            entity.Property(e => e.Ref02Blnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF02_BLNumber");
            entity.Property(e => e.Ref02Pronumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF02_PRONumber");
            entity.Property(e => e.Ref02TgtProNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF02_TgtProNumber");
            entity.Property(e => e.Sent).HasColumnType("datetime");
            entity.Property(e => e.Td101PkgCode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TD101_PkgCode");
            entity.Property(e => e.Td102TotalBoxes).HasColumnName("TD102_TotalBoxes");
            entity.Property(e => e.Td107ShipmentWeight).HasColumnName("TD107_ShipmentWeight");
            entity.Property(e => e.Td108WeightUom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TD108_WeightUOM");
            entity.Property(e => e.Td503Scac)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("TD503_SCAC");
            entity.Property(e => e.Td504Method)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TD504_Method");
        });

        modelBuilder.Entity<Zmm856HdrPp>(entity =>
        {
            entity.HasKey(e => e.HdrPk);

            entity.ToTable("ZMM_856_HDR_PP", tb =>
                {
                    tb.HasTrigger("Add856FlagPP");
                    tb.HasTrigger("Del856FlagPP");
                });

            entity.Property(e => e.HdrPk).HasColumnName("HDR_PK");
            entity.Property(e => e.Bsn02ControlNumber).HasColumnName("BSN02_ControlNumber");
            entity.Property(e => e.Bsn03Date)
                .HasColumnType("datetime")
                .HasColumnName("BSN03_Date");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Ctt01NumberOfLineItems).HasColumnName("CTT01_NumberOfLineItems");
            entity.Property(e => e.Dtm01Shipped)
                .HasColumnType("datetime")
                .HasColumnName("DTM01_Shipped");
            entity.Property(e => e.N102ShipFromName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N102_ShipFromName");
            entity.Property(e => e.N104BuyerCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N104_BuyerCode");
            entity.Property(e => e.N401City)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City");
            entity.Property(e => e.N402State)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N402_State");
            entity.Property(e => e.N403Zip)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N403_Zip");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pid04Descr)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PID04_Descr");
            entity.Property(e => e.Prf01Ponumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRF01_PONumber");
            entity.Property(e => e.Ref01Rfq)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("REF01_RFQ");
            entity.Property(e => e.Ref02Blnumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF02_BLNumber");
            entity.Property(e => e.Ref02Pronumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF02_PRONumber");
            entity.Property(e => e.Ref02TgtProNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("REF02_TgtProNumber");
            entity.Property(e => e.Sent).HasColumnType("datetime");
            entity.Property(e => e.Td101PkgCode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("TD101_PkgCode");
            entity.Property(e => e.Td102TotalBoxes).HasColumnName("TD102_TotalBoxes");
            entity.Property(e => e.Td107ShipmentWeight).HasColumnName("TD107_ShipmentWeight");
            entity.Property(e => e.Td108WeightUom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TD108_WeightUOM");
            entity.Property(e => e.Td503Scac)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("TD503_SCAC");
            entity.Property(e => e.Td504Method)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TD504_Method");
        });

        modelBuilder.Entity<Zmm856Itm>(entity =>
        {
            entity.HasKey(e => e.CdPk).HasName("PK_ZMM_856_HDR");

            entity.ToTable("ZMM_856_ITM");

            entity.HasIndex(e => e.ItemSequence, "ZMI_856_ITM");

            entity.Property(e => e.CdPk).HasColumnName("CD_PK");
            entity.Property(e => e.CdData)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CD_Data");
            entity.Property(e => e.CdRecType).HasColumnName("CD_RecType");
            entity.Property(e => e.CdType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CD_Type");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Hlc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("HLC");
            entity.Property(e => e.ItemDescr)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ItemSequence)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentFk).HasColumnName("Parent_FK");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Po401Pack).HasColumnName("PO401_Pack");
            entity.Property(e => e.Sn102NumberOfUnits).HasColumnName("SN102_NumberOfUnits");
            entity.Property(e => e.Sn102Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SN102_UOM");
            entity.Property(e => e.Sonumber).HasColumnName("SONumber");
            entity.Property(e => e.Soqty).HasColumnName("SOQty");
            entity.Property(e => e.SoshippedToDate).HasColumnName("SOShippedToDate");
        });

        modelBuilder.Entity<Zmm856ItmPp>(entity =>
        {
            entity.HasKey(e => e.CdPk);

            entity.ToTable("ZMM_856_ITM_PP");

            entity.Property(e => e.CdPk).HasColumnName("CD_PK");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.CustCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Hlid).HasColumnName("HLID");
            entity.Property(e => e.Hlparent).HasColumnName("HLParent");
            entity.Property(e => e.ItemDescr)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ItemHlid).HasColumnName("ItemHLID");
            entity.Property(e => e.ItemHlparent).HasColumnName("ItemHLParent");
            entity.Property(e => e.Man02)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAN02");
            entity.Property(e => e.ParentFk).HasColumnName("Parent_FK");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Po401Pack).HasColumnName("PO401_Pack");
            entity.Property(e => e.Scc14)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SCC14");
            entity.Property(e => e.Sn102NumberOfUnits).HasColumnName("SN102_NumberOfUnits");
            entity.Property(e => e.Sn102Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SN102_UOM");
            entity.Property(e => e.Sonumber).HasColumnName("SONumber");
            entity.Property(e => e.Soqty).HasColumnName("SOQty");
            entity.Property(e => e.SoshippedToDate).HasColumnName("SOShippedToDate");
            entity.Property(e => e.Upc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UPC");
        });

        modelBuilder.Entity<Zmm860Fob>(entity =>
        {
            entity.HasKey(e => e.FobId);

            entity.ToTable("ZMM_860_FOB");

            entity.Property(e => e.FobId).HasColumnName("FobID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Fob01MethodOfPayment)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("FOB01_MethodOfPayment");
            entity.Property(e => e.Fob02LocationQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("FOB02_LocationQ");
            entity.Property(e => e.Fob03Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("FOB03_Description");
            entity.Property(e => e.FobPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.FobPoDate).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm860Hdr>(entity =>
        {
            entity.HasKey(e => e.HdrPk);

            entity.ToTable("ZMM_860_HDR");

            entity.Property(e => e.HdrPk).HasColumnName("HDR_PK");
            entity.Property(e => e.Amt01AmountQcd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("AMT01_AmountQCD");
            entity.Property(e => e.Amt02Amount).HasColumnName("AMT02_Amount");
            entity.Property(e => e.Bch01HdrPoPurposeCode)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BCH01_HdrPoPurposeCode");
            entity.Property(e => e.Bch02HdrPoTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("BCH02_HdrPoTypeCD");
            entity.Property(e => e.Bch03PoNumber)
                .IsRequired()
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("BCH03_PoNumber");
            entity.Property(e => e.Bch04ReleaseNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BCH04_ReleaseNumber");
            entity.Property(e => e.Bch05ChangeSeq)
                .HasMaxLength(8)
                .IsFixedLength()
                .HasColumnName("BCH05_ChangeSeq");
            entity.Property(e => e.Bch06Date)
                .HasColumnType("datetime")
                .HasColumnName("BCH06_Date");
            entity.Property(e => e.Bch07ReqRefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BCH07_ReqRefNo");
            entity.Property(e => e.Bch08ContractNumber)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BCH08_ContractNumber");
            entity.Property(e => e.Bch09RefId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BCH09_RefID");
            entity.Property(e => e.Bch10Date)
                .HasColumnType("datetime")
                .HasColumnName("BCH10_Date");
            entity.Property(e => e.Bch11Date)
                .HasColumnType("datetime")
                .HasColumnName("BCH11_Date");
            entity.Property(e => e.Comment)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Csh01SalesReqCd1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD1");
            entity.Property(e => e.Csh01SalesReqCd2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD2");
            entity.Property(e => e.Csh01SalesReqCd3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD3");
            entity.Property(e => e.Csh01SalesReqCd4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD4");
            entity.Property(e => e.Csh01SalesReqCd5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CSH01_SalesReqCD5");
            entity.Property(e => e.Ctt01NumberOfLineItems).HasColumnName("CTT01_NumberOfLineItems");
            entity.Property(e => e.Ctt02HashTotal).HasColumnName("CTT02_HashTotal");
            entity.Property(e => e.Cur01EntityCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CUR01_EntityCD");
            entity.Property(e => e.Cur02CurrencyCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CUR02_CurrencyCD");
            entity.Property(e => e.Dtm02CancelAfter)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_CancelAfter");
            entity.Property(e => e.Dtm02DeliveryRequested)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_DeliveryRequested");
            entity.Property(e => e.Dtm02DoNotDeliverAfter)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_DoNotDeliverAfter");
            entity.Property(e => e.Dtm02DoNotDeliverBefore)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_DoNotDeliverBefore");
            entity.Property(e => e.Dtm02EffectiveDate)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_EffectiveDate");
            entity.Property(e => e.Dtm02PromisedForDelivery)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_PromisedForDelivery");
            entity.Property(e => e.Dtm02PromotionStart)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_PromotionStart");
            entity.Property(e => e.Dtm02RequestedPickup)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_RequestedPickup");
            entity.Property(e => e.Dtm02RequestedShip)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_RequestedShip");
            entity.Property(e => e.Dtm02ShipNoLater)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_ShipNoLater");
            entity.Property(e => e.Dtm02ShipNotBefore)
                .HasColumnType("datetime")
                .HasColumnName("DTM02_ShipNotBefore");
            entity.Property(e => e.Dtm03CancelAfter)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_CancelAfter");
            entity.Property(e => e.Dtm03DeliveryRequested)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_DeliveryRequested");
            entity.Property(e => e.Dtm03DoNotDeliverAfter)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_DoNotDeliverAfter");
            entity.Property(e => e.Dtm03DoNotDeliverBefore)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_DoNotDeliverBefore");
            entity.Property(e => e.Dtm03EffectiveDate)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_EffectiveDate");
            entity.Property(e => e.Dtm03PromisedForDelivery)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_PromisedForDelivery");
            entity.Property(e => e.Dtm03PromotionStart)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_PromotionStart");
            entity.Property(e => e.Dtm03RequestedPickup)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_RequestedPickup");
            entity.Property(e => e.Dtm03RequestedShip)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_RequestedShip");
            entity.Property(e => e.Dtm03ShipNoLater)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_ShipNoLater");
            entity.Property(e => e.Dtm03ShipNotBefore)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DTM03_ShipNotBefore");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Hdr860Processed)
                .HasColumnType("datetime")
                .HasColumnName("HDR_860_Processed");
            entity.Property(e => e.NotificationSent).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm860Itd>(entity =>
        {
            entity.HasKey(e => e.ItdId);

            entity.ToTable("ZMM_860_ITD");

            entity.Property(e => e.ItdId).HasColumnName("ItdID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Itd01TermsTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ITD01_TermsTypeCD");
            entity.Property(e => e.Itd02TermsBasisDateCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("ITD02_TermsBasisDateCD");
            entity.Property(e => e.Itd03TermsDiscountPct).HasColumnName("ITD03_TermsDiscountPct");
            entity.Property(e => e.Itd04DiscountDiscountDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ITD04_DiscountDiscountDueDate");
            entity.Property(e => e.Itd05TermsDiscountDaysDue).HasColumnName("ITD05_TermsDiscountDaysDue");
            entity.Property(e => e.Itd06TermsNetDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ITD06_TermsNetDueDate");
            entity.Property(e => e.Itd07TermsNetDays).HasColumnName("ITD07_TermsNetDays");
            entity.Property(e => e.Itd08TermsDiscountAmount).HasColumnName("ITD08_TermsDiscountAmount");
            entity.Property(e => e.Itd09TermsDeferedDueDate)
                .HasColumnType("datetime")
                .HasColumnName("ITD09_TermsDeferedDueDate");
            entity.Property(e => e.Itd10DeferedAmt).HasColumnName("ITD10_DeferedAmt");
            entity.Property(e => e.Itd11PctInvPayable).HasColumnName("ITD11_PctInvPayable");
            entity.Property(e => e.Itd12Description)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("ITD12_Description");
            entity.Property(e => e.Itd13DayOfMonth).HasColumnName("ITD13_DayOfMonth");
            entity.Property(e => e.ItdPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ItdPoDate).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm860N1>(entity =>
        {
            entity.HasKey(e => e.N1id);

            entity.ToTable("ZMM_860_N1");

            entity.Property(e => e.N1id).HasColumnName("N1ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.N101EntityIdentifierCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N101_EntityIdentifierCD");
            entity.Property(e => e.N102Name)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N102_Name");
            entity.Property(e => e.N103IdentificationCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N103_IdentificationCDQ");
            entity.Property(e => e.N104IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N104_IdentificationCD");
            entity.Property(e => e.N1po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("N1Po");
            entity.Property(e => e.N1poDate)
                .HasColumnType("datetime")
                .HasColumnName("N1PoDate");
            entity.Property(e => e.N201Name1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N201_Name1");
            entity.Property(e => e.N201Name2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("N201_Name2");
            entity.Property(e => e.N301Address01)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_Address_01");
            entity.Property(e => e.N301Address02)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N301_Address_02");
            entity.Property(e => e.N302Address01)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_Address_01");
            entity.Property(e => e.N302Address02)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("N302_Address_02");
            entity.Property(e => e.N401City1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City_1");
            entity.Property(e => e.N401City2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City_2");
            entity.Property(e => e.N401City3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("N401_City_3");
            entity.Property(e => e.N402StateCd1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_StateCD_1");
            entity.Property(e => e.N402StateCd2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_StateCD_2");
            entity.Property(e => e.N402StateCd3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("N402_StateCD_3");
            entity.Property(e => e.N403PostalCd1)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("N403_PostalCD_1");
            entity.Property(e => e.N403PostalCd2)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("N403_PostalCD_2");
            entity.Property(e => e.N403PostalCd3)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("N403_PostalCD_3");
            entity.Property(e => e.N404CountryCd1)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_CountryCD_1");
            entity.Property(e => e.N404CountryCd2)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_CountryCD_2");
            entity.Property(e => e.N404CountryCd3)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N404_CountryCD_3");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Per01ContactFunctioCd1)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_1");
            entity.Property(e => e.Per01ContactFunctioCd2)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_2");
            entity.Property(e => e.Per01ContactFunctioCd3)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_3");
            entity.Property(e => e.Per01ContactFunctioCd4)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_4");
            entity.Property(e => e.Per01ContactFunctioCd5)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PER01_ContactFunctioCD_5");
            entity.Property(e => e.Per02Name1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_1");
            entity.Property(e => e.Per02Name2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_2");
            entity.Property(e => e.Per02Name3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_3");
            entity.Property(e => e.Per02Name4)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_4");
            entity.Property(e => e.Per02Name5)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PER02_Name_5");
        });

        modelBuilder.Entity<Zmm860N9>(entity =>
        {
            entity.HasKey(e => e.N9id);

            entity.ToTable("ZMM_860_N9");

            entity.Property(e => e.N9id).HasColumnName("N9ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Mtx02Text)
                .HasMaxLength(4096)
                .IsUnicode(false)
                .HasColumnName("MTX02_Text");
            entity.Property(e => e.N092ReferenceIdentification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N092_ReferenceIdentification");
            entity.Property(e => e.N901ReferenceIdentificationQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("N901_ReferenceIdentificationQ");
            entity.Property(e => e.N9po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("N9Po");
            entity.Property(e => e.N9poDate)
                .HasColumnType("datetime")
                .HasColumnName("N9PoDate");
            entity.Property(e => e.Partner)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm860Poc>(entity =>
        {
            entity.ToTable("ZMM_860_POC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Poc01AssignedIdentification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("POC01_AssignedIdentification");
            entity.Property(e => e.Poc02ChangeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("POC02_ChangeCD");
            entity.Property(e => e.Poc03QtyOrdered).HasColumnName("POC03_QtyOrdered");
            entity.Property(e => e.Poc04QtyLeftToRcv).HasColumnName("POC04_QtyLeftToRcv");
            entity.Property(e => e.Poc05Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("POC05_Unit");
            entity.Property(e => e.Poc06UnitPrice).HasColumnName("POC06_UnitPrice");
            entity.Property(e => e.Poc07UnitPriceCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("POC07_UnitPriceCD");
            entity.Property(e => e.Poc08ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("POC08_ProductIDQ");
            entity.Property(e => e.Poc09ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("POC09_ProductID");
            entity.Property(e => e.Poc10ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("POC10_ProductIDQ");
            entity.Property(e => e.Poc11ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("POC11_ProductID");
            entity.Property(e => e.Poc12ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("POC12_ProductIDQ");
            entity.Property(e => e.Poc13ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("POC13_ProductID");
            entity.Property(e => e.Pocpo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("POCPo");
            entity.Property(e => e.PocpoDate)
                .HasColumnType("datetime")
                .HasColumnName("POCPoDate");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm860PocCtp>(entity =>
        {
            entity.ToTable("ZMM_860_POC_CTP");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Ctp01ClassOfTradeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CTP01_ClassOfTradeCD");
            entity.Property(e => e.Ctp02PriceIdc)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CTP02_PriceIDC");
            entity.Property(e => e.Ctp03UnitPrice).HasColumnName("CTP03_UnitPrice");
            entity.Property(e => e.Ctp04Qty).HasColumnName("CTP04_Qty");
            entity.Property(e => e.Ctp06PriceMultiplierQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("CTP06_PriceMultiplierQ");
            entity.Property(e => e.Ctp07Multiplier).HasColumnName("CTP07_Multiplier");
            entity.Property(e => e.Ctp08Amt).HasColumnName("CTP08_Amt");
            entity.Property(e => e.Ctp09UnitPriceCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CTP09_UnitPriceCD");
            entity.Property(e => e.Ctp10ConditionValue)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("CTP10_ConditionValue");
            entity.Property(e => e.Ctp11MultiplePriceQty).HasColumnName("CTP11_MultiplePriceQty");
            entity.Property(e => e.Ctpc001Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("CTPC001_UOMCD");
            entity.Property(e => e.Ctppo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("CTPPo");
            entity.Property(e => e.CtppoDate)
                .HasColumnType("datetime")
                .HasColumnName("CTPPoDate");
            entity.Property(e => e.CtppoitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CTPPOItemLineNumber");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm860PocPid>(entity =>
        {
            entity.ToTable("ZMM_860_POC_PID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid01ItemDescrType)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID01_ItemDescrType");
            entity.Property(e => e.Pid02CharacteristicCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PID02_CharacteristicCD");
            entity.Property(e => e.Pid03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID03_AgencyQCD");
            entity.Property(e => e.Pid04ProdDescrCd)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("PID04_ProdDescrCD");
            entity.Property(e => e.Pid05Descr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PID05_Descr");
            entity.Property(e => e.Pidpo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PIDPo");
            entity.Property(e => e.PidpoDate)
                .HasColumnType("datetime")
                .HasColumnName("PIDPoDate");
            entity.Property(e => e.PidpoitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PIDPOItemLineNumber");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm860PocPo4>(entity =>
        {
            entity.ToTable("ZMM_860_POC_PO4");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Po401Pack).HasColumnName("PO401_Pack");
            entity.Property(e => e.Po402Size).HasColumnName("PO402_Size");
            entity.Property(e => e.Po403Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO403_UOMCD");
            entity.Property(e => e.Po404PkgCd)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PO404_PkgCD");
            entity.Property(e => e.Po405WeightQ)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO405_WeightQ");
            entity.Property(e => e.Po406GrossWeightPerPack).HasColumnName("PO406_GrossWeightPerPack");
            entity.Property(e => e.Po407Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO407_UOMCD");
            entity.Property(e => e.Po408GrossVolumePerPack).HasColumnName("PO408_GrossVolumePerPack");
            entity.Property(e => e.Po409Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO409_UOMCD");
            entity.Property(e => e.Po410Length).HasColumnName("PO410_Length");
            entity.Property(e => e.Po411Width).HasColumnName("PO411_Width");
            entity.Property(e => e.Po412Height).HasColumnName("PO412_Height");
            entity.Property(e => e.Po413Uomcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PO413_UOMCD");
            entity.Property(e => e.Po414InnerPack).HasColumnName("PO414_InnerPack");
            entity.Property(e => e.Po4po)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PO4Po");
            entity.Property(e => e.Po4poDate)
                .HasColumnType("datetime")
                .HasColumnName("PO4PoDate");
            entity.Property(e => e.Po4poitemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PO4POItemLineNumber");
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
        });

        modelBuilder.Entity<Zmm860PocSac>(entity =>
        {
            entity.ToTable("ZMM_860_POC_SAC");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.Sac01SacIndicator)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC01_SacIndicator");
            entity.Property(e => e.Sac02SacCd)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SAC02_SacCD");
            entity.Property(e => e.Sac03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC03_AgencyQCD");
            entity.Property(e => e.Sac04AgencyPromotionCd)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SAC04_AgencyPromotionCD");
            entity.Property(e => e.Sac05Amount).HasColumnName("SAC05_Amount");
            entity.Property(e => e.Sac06PercentQ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC06_PercentQ");
            entity.Property(e => e.Sac07Percent).HasColumnName("SAC07_Percent");
            entity.Property(e => e.Sac08Rate).HasColumnName("SAC08_Rate");
            entity.Property(e => e.Sac09Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC09_Unit");
            entity.Property(e => e.Sac10Qty).HasColumnName("SAC10_Qty");
            entity.Property(e => e.Sac11Qty).HasColumnName("SAC11_Qty");
            entity.Property(e => e.Sac12SacMethodOfHandlingCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC12_SacMethodOfHandlingCD");
            entity.Property(e => e.Sac13ReferenceId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SAC13_ReferenceID");
            entity.Property(e => e.SacItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SacPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SacPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm860PocSdq>(entity =>
        {
            entity.ToTable("ZMM_860_POC_SDQ");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.Sdq01Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SDQ01_Unit");
            entity.Property(e => e.Sdq02IdentificationCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SDQ02_IdentificationCDQ");
            entity.Property(e => e.Sdq03IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ03_IdentificationCD");
            entity.Property(e => e.Sdq04Qty).HasColumnName("SDQ04_Qty");
            entity.Property(e => e.Sdq05IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ05_IdentificationCD");
            entity.Property(e => e.Sdq06Qty).HasColumnName("SDQ06_Qty");
            entity.Property(e => e.Sdq07IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ07_IdentificationCD");
            entity.Property(e => e.Sdq08Qty).HasColumnName("SDQ08_Qty");
            entity.Property(e => e.Sdq09IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ09_IdentificationCD");
            entity.Property(e => e.Sdq10Qty).HasColumnName("SDQ10_Qty");
            entity.Property(e => e.Sdq11IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ11_IdentificationCD");
            entity.Property(e => e.Sdq12Qty).HasColumnName("SDQ12_Qty");
            entity.Property(e => e.Sdq13IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ13_IdentificationCD");
            entity.Property(e => e.Sdq14Qty).HasColumnName("SDQ14_Qty");
            entity.Property(e => e.Sdq15IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ15_IdentificationCD");
            entity.Property(e => e.Sdq16Qty).HasColumnName("SDQ16_Qty");
            entity.Property(e => e.Sdq17IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ17_IdentificationCD");
            entity.Property(e => e.Sdq18Qty).HasColumnName("SDQ18_Qty");
            entity.Property(e => e.Sdq19IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ19_IdentificationCD");
            entity.Property(e => e.Sdq20Qty).HasColumnName("SDQ20_Qty");
            entity.Property(e => e.Sdq21IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SDQ21_IdentificationCD");
            entity.Property(e => e.Sdq22Qty).HasColumnName("SDQ22_Qty");
            entity.Property(e => e.Sdq23LocationId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SDQ23_LocationID");
            entity.Property(e => e.SdqPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SdqPoDate).HasColumnType("datetime");
            entity.Property(e => e.SdqPoItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm860PocSln>(entity =>
        {
            entity.ToTable("ZMM_860_POC_SLN");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.C00101UnitCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("C00101_UnitCD");
            entity.Property(e => e.C00102Exponent).HasColumnName("C00102_Exponent");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.Sln01Identification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SLN01_Identification");
            entity.Property(e => e.Sln02Identification)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SLN02_Identification");
            entity.Property(e => e.Sln03RelationshipCd)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SLN03_RelationshipCD");
            entity.Property(e => e.Sln04Qty).HasColumnName("SLN04_Qty");
            entity.Property(e => e.Sln06UnitPrice).HasColumnName("SLN06_UnitPrice");
            entity.Property(e => e.Sln07UnitPriceCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN07_UnitPriceCD");
            entity.Property(e => e.Sln08RelationshipCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN08_RelationshipCD");
            entity.Property(e => e.Sln09ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN09_ProductIDQ");
            entity.Property(e => e.Sln10ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN10_ProductID");
            entity.Property(e => e.Sln11ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN11_ProductIDQ");
            entity.Property(e => e.Sln12ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN12_ProductID");
            entity.Property(e => e.Sln13ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN13_ProductIDQ");
            entity.Property(e => e.Sln14ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN14_ProductID");
            entity.Property(e => e.Sln15ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN15_ProductIDQ");
            entity.Property(e => e.Sln16ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN16_ProductID");
            entity.Property(e => e.Sln17ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN17_ProductIDQ");
            entity.Property(e => e.Sln18ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN18_ProductID");
            entity.Property(e => e.Sln19ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN19_ProductIDQ");
            entity.Property(e => e.Sln20ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN20_ProductID");
            entity.Property(e => e.Sln21ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN21_ProductIDQ");
            entity.Property(e => e.Sln22ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN22_ProductID");
            entity.Property(e => e.Sln23ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN23_ProductIDQ");
            entity.Property(e => e.Sln24ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN24_ProductID");
            entity.Property(e => e.Sln25ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN25_ProductIDQ");
            entity.Property(e => e.Sln26ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN26_ProductID");
            entity.Property(e => e.Sln27ProductIdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SLN27_ProductIDQ");
            entity.Property(e => e.Sln28ProductId)
                .HasMaxLength(48)
                .IsUnicode(false)
                .HasColumnName("SLN28_ProductID");
            entity.Property(e => e.SlnPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SlnPoDate).HasColumnType("datetime");
            entity.Property(e => e.SlnPoItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SlnRowId).HasColumnName("SlnRowID");
        });

        modelBuilder.Entity<Zmm860PocSlnPid>(entity =>
        {
            entity.ToTable("ZMM_860_POC_SLN_PID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pid01ItedDescrType)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID01_ItedDescrType");
            entity.Property(e => e.Pid02CharacteristicCd)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("PID02_CharacteristicCD");
            entity.Property(e => e.Pid03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("PID03_AgencyQCD");
            entity.Property(e => e.Pid04ProductDescrCd)
                .HasMaxLength(12)
                .IsFixedLength()
                .HasColumnName("PID04_ProductDescrCD");
            entity.Property(e => e.Pid05Descr)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PID05_Descr");
            entity.Property(e => e.PidPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.PidPoDate).HasColumnType("datetime");
            entity.Property(e => e.PidPoItemLineNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PorowId).HasColumnName("PORowID");
            entity.Property(e => e.SlnRowId).HasColumnName("SlnRowID");
        });

        modelBuilder.Entity<Zmm860Ref>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("ZMM_860_REF");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Ref01ReferenceIdentificationQ)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("REF01_ReferenceIdentificationQ");
            entity.Property(e => e.Ref02ReferenceIdentification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REF02_ReferenceIdentification");
            entity.Property(e => e.Ref03Description)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("REF03_Description");
            entity.Property(e => e.RefPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.RefPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm860Sac>(entity =>
        {
            entity.HasKey(e => e.SacId);

            entity.ToTable("ZMM_860_SAC");

            entity.Property(e => e.SacId).HasColumnName("SacID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Sac01AllowanceOrCharge)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC01_AllowanceOrCharge");
            entity.Property(e => e.Sac02SacCd)
                .HasMaxLength(4)
                .IsFixedLength()
                .HasColumnName("SAC02_SacCD");
            entity.Property(e => e.Sac03AgencyQcd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC03_AgencyQCD");
            entity.Property(e => e.Sac04AgencyServProm)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("SAC04_AgencyServProm");
            entity.Property(e => e.Sac05Amount).HasColumnName("SAC05_Amount");
            entity.Property(e => e.Sac06PercentQ)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("SAC06_PercentQ");
            entity.Property(e => e.Sac07Percent).HasColumnName("SAC07_Percent");
            entity.Property(e => e.Sac08Rate).HasColumnName("SAC08_Rate");
            entity.Property(e => e.Sac09Unit)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC09_Unit");
            entity.Property(e => e.Sac10Quantity).HasColumnName("SAC10_Quantity");
            entity.Property(e => e.Sac12SacMethodOfHandlingCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("SAC12_SacMethodOfHandlingCD");
            entity.Property(e => e.SacPo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.SacPoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm860Td5>(entity =>
        {
            entity.HasKey(e => e.Td5Id);

            entity.ToTable("ZMM_860_TD5");

            entity.Property(e => e.Td5Id).HasColumnName("Td5ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Partner)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Td501RoutingSeqCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TD501_RoutingSeqCD");
            entity.Property(e => e.Td502IdentificationCdq)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TD502_IdentificationCDQ");
            entity.Property(e => e.Td503IdentificationCd)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TD503_IdentificationCD");
            entity.Property(e => e.Td504TransportationTypeCd)
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("TD504_TransportationTypeCD");
            entity.Property(e => e.Td505Routing)
                .HasMaxLength(35)
                .IsUnicode(false)
                .HasColumnName("TD505_Routing");
            entity.Property(e => e.Td5Po)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Td5PoDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Zmm864Hdr>(entity =>
        {
            entity.HasKey(e => e.CnfId).HasName("PK_WM_864_CNF");

            entity.ToTable("ZMM_864_HDR");

            entity.Property(e => e.CnfId).HasColumnName("CnfID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Processed).HasColumnType("datetime");
            entity.Property(e => e.TransactionPurpose)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TransactionType)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zmm864Mit>(entity =>
        {
            entity.HasKey(e => e.MitId);

            entity.ToTable("ZMM_864_MIT");

            entity.Property(e => e.MitId).HasColumnName("MIT_ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Mit01Id)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("MIT01_ID");
            entity.Property(e => e.Mit02Description)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("MIT02_Description");
            entity.Property(e => e.Mit03PageWidth).HasColumnName("MIT03_PageWidth");
            entity.Property(e => e.Mit04PageLength).HasColumnName("MIT04_PageLength");
            entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
        });

        modelBuilder.Entity<Zmm864Msg>(entity =>
        {
            entity.HasKey(e => e.MsgId);

            entity.ToTable("ZMM_864_MSG");

            entity.Property(e => e.MsgId).HasColumnName("MSG_ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Msg01Text)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("MSG01_Text");
            entity.Property(e => e.Msg02Cd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MSG02_CD");
            entity.Property(e => e.Msg03Num).HasColumnName("MSG03_Num");
            entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
        });

        modelBuilder.Entity<Zmm864N1>(entity =>
        {
            entity.HasKey(e => e.N1Id);

            entity.ToTable("ZMM_864_N1");

            entity.Property(e => e.N1Id).HasColumnName("N1_ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.N101Idc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N101_IDC");
            entity.Property(e => e.N102Name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N102_Name");
            entity.Property(e => e.N103Idcq)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("N103_IDCQ");
            entity.Property(e => e.N104Idc)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("N104_IDC");
            entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
        });

        modelBuilder.Entity<Zmm864Ref>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("ZMM_864_REF");

            entity.Property(e => e.RefId).HasColumnName("REF_ID");
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.GentranDateStamp).HasColumnType("datetime");
            entity.Property(e => e.GentranTimeStamp).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("Parent_ID");
            entity.Property(e => e.Ref01Idc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("REF01_IDC");
            entity.Property(e => e.Ref02Id)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("REF02_ID");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
